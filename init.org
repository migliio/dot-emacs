#+TITLE: GNU Emacs configuration file
#+AUTHOR: Claudio Migliorelli (@miglio)
#+PROPERTY: header-args:emacs-lisp :tangle init.el
* Init work

In this piece of code I add stuff to perform the startup of the Emacs init file to make it work properly.

#+begin_src emacs-lisp
(add-to-list 'load-path (concat user-emacs-directory "modules/"))
(add-to-list 'load-path (concat user-emacs-directory "site-lisp/"))
(add-to-list 'load-path (concat user-emacs-directory "site-lisp/git-email"))
(add-to-list 'load-path (concat user-emacs-directory "site-lisp/org-fc"))
#+end_src

Start the emacs server when opening emacs

#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+end_src

* Startup performance

I find myself closing and opening Emacs a plenty of times. I want it to be responsive and fast. I'm going to reduce the frequency of garbage collection and then I'll measure the startup time.

#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb


(add-hook 'after-init-hook #'(lambda ()
                               ;; restore after startup
                               (setq gc-cons-threshold 800000)))
#+end_src
  
* Package management

First of all, let's initialize the package management setting up ELPA, MELPA and org package repositories. After that, I want Emacs loading =use-package= to manage package configuration.

#+begin_src emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(unless package--initialized (package-initialize))

;;; setup use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(setq use-package-always-ensure t)
#+end_src

* Keep emacs.d clean
** Customization settings
   
Thanks to @daviwil I finally found a way to get rid of all transient files that appear in my ~dot-emacs~ git repository. In this way I'll have a better organized folder, with relevant files only.

#+begin_src emacs-lisp
;; change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
	  url-history-file (expand-file-name "url/history" user-emacs-directory))

;; keep customization settings in a temporary file
(setq custom-file
	  (if (boundp 'server-socket-dir)
		  (expand-file-name "custom.el" server-socket-dir)
		(expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src

* MacOS support

In order to enable MacOS support I want to set the keyboard /Command/ key as the /Meta/ key and change the image scaling in order to resolve the fuzzy PDFs with Retina displays.

#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (when (memq window-system '(mac ns))
    (setq ns-pop-up-frames nil
	  mac-option-modifier nil
	  mac-command-modifier 'meta
	  x-select-enable-clipboard t)
    (when (fboundp 'mac-auto-operator-composition-mode)
      (mac-auto-operator-composition-mode 1)))

  ;; PDFs are fuzzy with Retina display  
  ;; uses more memory; see https://github.com/politza/pdf-tools/issues/51
  (when (memq window-system '(mac ns))
    (setq pdf-view-use-scaling t
	  pdf-view-use-imagemagick nil)))
#+end_src

* General configuration
** Useful defaults

Clean the Emacs interface making it as minimal as possible, without getting rid of useful improvements. Adding some defaults on indentation, etc.

#+begin_src emacs-lisp
  ;; no startup screen
  (setq inhibit-startup-screen t)

  ;; no message in the scratch buffer
  (setq initial-scratch-message "")

  ;; set the frame title format to display the name of the buffer associated with the current frame
  (setq-default frame-title-format '("%b"))

  ;; no ring bell
  (setq ring-bell-function 'ignore)

  ;; auto new line without actual '\n'
  (global-visual-line-mode t)

  ;; use winner mode
  (winner-mode t)

  ;; indentation is 8 char
  (setq-default tab-width 8)
  (setq-default c-basic-offset 8)

  ;; no confirmation when exiting and there are processes running in the background
  (setq confirm-kill-processes nil)

  ;; frame resize in pixel increments
  (setq frame-resize-pixelwise t)

  ;; no indent in artist mode
  (add-hook 'artist-mode-hook (lambda () (setq indent-tabs-mode nil)))

  ;; some useful global keybinds
  (global-set-key (kbd "C-c h") 'winner-undo)
  (global-set-key (kbd "C-c l") 'winner-redo)
  (global-set-key (kbd "C-c c k s") 'replace-string)
  (global-set-key (kbd "C-c c k c") 'comment-region)
  (global-set-key (kbd "C-c c k u") 'uncomment-region)


  ;; 'yes' and 'no' are tedious
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; show parenthesis
  (show-paren-mode 1)

  ;; set linum format
  (setq linum-format "%4d ")

  ;; auto revert buffers
  (global-auto-revert-mode t)

  ;; enable some modes when programming
  (add-hook 'prog-mode-hook
	    #'display-line-numbers-mode
	    #'linum-mode)

  ;; relative line numbers
  (setq display-line-numbers-type 'relative)

  ;; avoid boring warnings
  ;; (setq warning-minimum-level :emergency)

  ;; disable some boring modes
  (if (display-graphic-p)
      (dolist (mode
	       '(tool-bar-mode
		 scroll-bar-mode
		 menu-bar-mode
		 blink-cursor-mode))
	(funcall mode 0)))

  ;; solves a bug with xdg-open
  (setq process-connection-type nil)

  ;; system locale to use for formatting time values
  (setq system-time-locale "C")

  ;; use UTF-8 as a preferred coding system
  (set-language-environment "UTF-8")

  ;; avoid async shell commands warnings
  (add-to-list 'display-buffer-alist
	       (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
#+end_src

** Emacs auto-save

Put Emacs auto-save and backup files to /tmp/.

#+begin_src emacs-lisp
(defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))
(setq
   backup-by-copying t                                        ; avoid symlinks
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t
   auto-save-list-file-prefix emacs-tmp-dir
   auto-save-file-name-transforms `((".*" ,emacs-tmp-dir t))  ; change autosave dir to tmp
   backup-directory-alist `((".*" . ,emacs-tmp-dir)))
#+end_src

** User interface
*** Buffer management

Adding some tweaks to manage buffers better.

#+begin_src emacs-lisp
(use-package transpose-frame
  :bind (("C-c f t" . transpose-frame)
	 ("C-c f f" . flip-frame)
	 ("C-c f o" . flop-frame))
  :ensure t)

(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)))
#+end_src

*** Theme

Loading the preferred theme.

#+begin_src emacs-lisp
(use-package unicode-fonts
  :ensure t
  :after mu4e
  :config (unicode-fonts-setup)(require 'persistent-soft))

(use-package minions
  :ensure t
  :config
  (minions-mode 1))

(if (display-graphic-p)
    (progn
      (set-frame-font "Liberation Mono 15" nil t)
      (set-fringe-mode 0)
      (use-package hc-zenburn-theme :ensure t :config (load-theme 'hc-zenburn t)))
  (set-face-background 'default "undefined"))
#+end_src
	
** Files navigation

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :commands projectile-mode projectile-project-name
  :init
  (add-hook 'after-init-hook 'projectile-mode)
  (setq projectile-indexing-method 'alien)
  (setq projectile-project-search-path '("~/Repositories"))
  (setq projectile-use-git-grep t)
  (setq projectile-mode-line-prefix " Proj")
  (setq projectile-completion-system 'ido)
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))

;; Show directories first in dired
(setq ls-lisp-use-insert-directory-program nil)
(setq ls-lisp-dirs-first t)

;; Start searching files from "~"
(setq default-directory "~/")

;; dired extra
(require 'dired-x)

;; omit hidden files
(setq dired-omit-files "^\\...+$")
(add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1)))

;; prompt for deleting files directly
(setq delete-by-moving-to-trash t)

;; make emacs smart when multiple dired buffers are opened
(setq dired-dwim-target t)

;; use ibuffer to switch between buffers
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** File visualization
*** Open with

I want to open some files with external programs and =open-with= addresses this problem.

#+begin_src emacs-lisp
(use-package openwith
  :ensure t
  :config
  (setq openwith-associations '(
				("\\.mp4\\'" "mpv" (file))
				("\\.webm\\'" "mpv" (file))								
				("\\.mkv\\'" "mpv" (file))
				("\\.m4a\\'" "mpv --force-window" (file))
				("\\.ppt\\'" "libreoffice" (file))
				("\\.pptx\\'" "libreoffice" (file))
				("\\.doc\\'" "libreoffice" (file))
				("\\.docx\\'" "libreoffice" (file))
				))
  (openwith-mode t))
#+end_src
	
*** PDFs

I want to use =pdf-tools= to view and edit PDFs in a much better way.

#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-tools-install))
  (add-hook 'pdf-view-mode-hook
	    (lambda () (setq header-line-format nil))))
#+end_src
   
*** Undo tree

I really love the =undo-tree= mode visualization, so I'm going to enable it.

#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  (setq undo-tree-auto-save-history nil)
  (global-undo-tree-mode 1))
#+end_src

*** Ripgrep

I use ~rg~ to find file content easily.

#+begin_src emacs-lisp
(use-package deadgrep
  :ensure t
  :bind
  (("C-c s" . deadgrep)))
#+end_src

** Personal knowledge management
*** Org mode

#+begin_src emacs-lisp
(use-package ox-twbs
  :after org
  :ensure t)

(use-package ox-reveal
  :after org
  :ensure t
  :config
  (setq org-reveal-root "file:///home/claudio/Repositories/reveal.js"))

(setq org-export-backends '(beamer html latex ascii ox-reveal ox-hugo ox-twbs))

(use-package org
  :ensure t
  :bind (("C-c a" . org-agenda)
	 ("C-c t" . org-insert-structure-template)
	 ("C-c i" . org-capture)
	 ("C-c l" . org-store-link))
  :config
  (require 'org-tempo)
  ;; Set org agenda directory
  (setq org-agenda-files (list "~/Vault/pkm/pages/journal.org" "~/Vault/pkm/pages/agenda.org" "/home/claudio/Vault/pkm/pages/projects.org"))
  ;; Set org files where to search for IDs
  (setq org-id-extra-files '("~/Vault/pkm/pages"))
  ;; ignore archived entries in org-clock-report
  (setq org-clock-sources '(agenda))
  ;; Org-capture templates
  (defun mg/create-pages-file ()
    "Create an org file in ~/Vault/pkm/pages/."
    (setq mg-org-note--name (read-string "File name: "))
    (let ((mg-org-note--filename (downcase mg-org-note--name)))
      (expand-file-name (format "%s.org" mg-org-note--filename) "~/Vault/pkm/pages")))
  (setq org-capture-templates
	'(("f" "file" plain (file (lambda() (mg/create-pages-file)))
	   "%(format \"#+title: %s\n#+date: %U\n\" mg-org-note--name)")
	  ("j" "journal")
	  ("jp" "journal plain entry" plain
           (file+datetree+prompt "~/Vault/pkm/pages/journal.org")
           "**** %U: %?\n")
	  ("js" "journal schedule entry" plain
           (file+datetree+prompt "~/Vault/pkm/pages/journal.org")
	   "**** %U: today's schedule :schedule:\n***** %?\n")
	  ("je" "journal event entry" plain
           (file+datetree+prompt "~/Vault/pkm/pages/journal.org")	   
	   "**** %U: %? :schedule:event:\n:PROPERTIES:\n:WHERE:\n:NOTIFY_BEFORE:\n:END:\n%T\n***** Notes")
	  ("ji" "journal inbox entry" plain
           (file+datetree+prompt "~/Vault/pkm/pages/journal.org")  	   
	   "**** INBOX %U: %? :@inbox:\n")
	  ("ja" "journal archive resource entry" plain
           (file+datetree+prompt "~/Vault/pkm/pages/journal.org")
           "**** %U: %? :archive:\n")
	  ("jm" "journal meeting entry" plain
           (file+datetree+prompt "~/Vault/pkm/pages/journal.org")
	   "**** Meeting with %? on %U :schedule:meeting:work:\n:PROPERTIES:\n:WHERE:\n:NOTIFY_BEFORE:\n:END:\nSCHEDULED: %T\n***** Notes")
	  ("js" "journal seminar entry" plain
           (file+datetree+prompt "~/Vault/pkm/pages/journal.org")
	   "**** Seminar hold by %? @<place> :schedule:work:\n:PROPERTIES:\n:NOTIFY_BEFORE:\n:END:\nSCHEDULED: %T\n***** Notes")
	  ("jc" "journal call entry" plain
           (file+datetree+prompt "~/Vault/pkm/pages/journal.org")
	   "**** Call with %? @online on %U :schedule:\n:PROPERTIES:\n:NOTIFY_BEFORE:\n:END:\nSCHEDULED: %T\n***** Notes")
	  ("jh" "journal home chores entry" plain
           (file+datetree+prompt "~/Vault/pkm/pages/journal.org")
	   "**** %? @ home :schedule:personal:\n:PROPERTIES:\n:NOTIFY_BEFORE:\n:END:\nSCHEDULED: %T\n")
	  ("r" "resources")
	  ("rc" "conference" entry
	   (file "~/Vault/pkm/pages/conferences.org")
	   "* %^{Conference name}\n:PROPERTIES:\n:WHERE: %?\n:WEBSITE: %?\n:END:\n")
	  ("p" "personal")
	  ("pc" "contact" entry
	   (file "~/Vault/pkm/pages/contacts.org")
	   "* %(org-contacts-template-name) %^g\n:PROPERTIES:\n:EMAIL: %(org-contacts-template-email)\n:COMPANY:\n:PHONE_NUMBER: %?\n:WEBSITE:\n:TWITTER:\n:NOTES:\n:END:\n")
	  ("u" "university")
	  ("uc" "course" plain
	   (file "~/Vault/pkm/pages/courses.org")
	   "** %^{Course name}\n:PROPERTIES:\n:LECTURER:\n:UNIVERSITY:\n:ACADEMIC_YEAR:\n:RESOURCES:\n:END:\n*** Lecture notes\n")
	  ("ul" "lecture" plain
	   (file "~/Vault/pkm/pages/courses.org")
	   "** %^{Lecture #}\n:PROPERTIES:\n:TOPICS:\n:LECTURER:\n:DATE:\n:RESOURCES:\n:RELATED:\n:END:\n")
	  ("t" "project" plain
	   (file "~/Vault/pkm/pages/projects.org")
	   "** %^{Project name}\n:PROPERTIES:\n:WHAT: %?\n:REPOSITORY:\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")
	  ("P" "plans")
	  ("Py" "yearly" plain
	   (file "~/Vault/pkm/pages/planning.org")
	   "* %U: %? yearly plan :yearly:plan:\n:PROPERTIES:\n- *Feelings*:: %^{Feelings|good|neutral|bad}\n- *Related*::\n- *Date*:: %^{Date}u\n:END:\n# planning\n- *Overview*\n- *Values review and life physolophy*\n- *5 Years Vision(s)*\n- *Goal definition*\n# reviewing\n- *Financial review*\n- *Time tracking review*")
	  ("Pq" "quarterly" plain
	   (file "~/Vault/pkm/pages/planning.org")
	   "** %U: %? quarterly plan :quarterly:plan:\n:PROPERTIES:\n:FEELINGS: %^{Feelings|good|neutral|bad}\n:RELATED:\n:DATE: %^{Date}u\n:END:\n# planning\n- *Overview*\n# reviewing\n- *Projects review*\n- *Financial review*\n- *Time tracking review*")
	  ("Pm" "monthly" plain
	   (file "~/Vault/pkm/pages/planning.org")
	   "*** %U: %? monthly plan :monthly:plan:\n:PROPERTIES:\n:FEELINGS: %^{Feelings|good|neutral|bad}\n:RELATED:\n:DATE: %^{Date}u\n:END:\n# planning\n- *Overview*\n- *Projects and task picking*\n# reviewing\n- *Financial review*\n- *Time tracking review*\n- *Workout review*\n")
	  ("Pw" "weekly" plain
	   (file "~/Vault/pkm/pages/planning.org")
	   "**** %U: %? weekly plan :weekly:plan:\n:PROPERTIES:\n:FEELINGS: %^{Feelings|good|neutral|bad}\n:RELATED:\n:DATE: %^{Date}u\n:END:\n# planning\n- *Overview*\n- *Task picking*\n  - [ ] Inbox refile\n# reviewing\n- *Review*\n")))
  ;; Export citations
  (setq org-cite-global-bibliography
	'("/home/claudio/Vault/library/org/main/main.bib"))
  (require 'oc-biblatex)
  (setq org-cite-export-processors
	'((latex biblatex)))
  (setq org-latex-pdf-process (list
			       "latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f"))

  
  ;; In org-mode, I want source blocks to be themed as they would in native mode
  (setq org-src-fontify-natively t
	org-src-tab-acts-natively t
	org-confirm-babel-evaluate nil
	org-edit-src-content-indentation 0)

  ;; Set latex preview size
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

  ;; Fold everything when opening org files
  (setq org-startup-folded t)

  ;; Not export drawers
  (setq org-export-with-drawers nil)

  ;; Set org-mode TODO keywords
  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "PROG(p)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)" "INTR(i)")
	  (sequence "INBOX" "|" "ARCHIVED")))

  ;; Setup org stuck projects
  (setq org-stuck-projects '("+project/" ("NEXT" "PROG" "TODO") ("course") "\\(Details\\|Artifacts\\|Resources\\)\\>"))

  ;; Org-agenda custom commands
  (setq org-agenda-block-separator "==============================================================================")
  (setq org-agenda-custom-commands
	'(
	  ("a" "Agenda"
	   ((agenda ""
		    ((org-agenda-span 1)
		     (org-deadline-warning-days 0)
		     (org-scheduled-past-days 14)
		     (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
		     (org-agenda-skip-function '(org-agenda-skip-entry-if 'done))
		     (org-agenda-format-date "%A %-e %B %Y")
		     (org-agenda-overriding-header "Today's schedule:\n")))
	    (todo "PROG"
		  ((org-agenda-time-grid nil)
		   (org-agenda-span 1)
		   (org-deadline-warning-days 0)
		   (org-scheduled-past-days 0)
		   (org-agenda-skip-function '(org-agenda-skip-entry-if 'notscheduled))
		   (org-agenda-overriding-header "PROG tasks:\n")))
	    (todo "NEXT"
		  ((org-agenda-time-grid nil)
		   (org-agenda-span 1)
		   (org-deadline-warning-days 0)
		   (org-scheduled-past-days 0)
		   (org-agenda-skip-function '(org-agenda-skip-entry-if 'notscheduled))
		   (org-agenda-overriding-header "NEXT tasks:\n")))
            (agenda "" ((org-agenda-time-grid nil)
			(org-agenda-start-day "+1d")
			(org-agenda-start-on-weekday nil)
			(org-agenda-span 30)
			(org-agenda-show-all-dates nil)
			(org-deadline-warning-days 0)
			(org-agenda-entry-types '(:deadline))
			(org-agenda-skip-function '(org-agenda-skip-entry-if 'done))
			(org-agenda-overriding-header "\nUpcoming deadlines (+30d)\n")))
	    (agenda ""
		    ((org-agenda-start-on-weekday nil)
		     (org-agenda-start-day "+1d")
		     (org-agenda-span 5)
		     (org-deadline-warning-days 0)
		     (org-scheduled-past-days 0)
		     (org-agenda-skip-function '(org-agenda-skip-entry-if 'done))
                     (org-agenda-overriding-header "\nWeek at a glance:\n")))
	    (todo "INBOX"
		  ((org-agenda-time-grid nil)
		   (org-agenda-span 1)
		   (org-deadline-warning-days 0)
		   (org-scheduled-past-days 0)
		   (org-agenda-skip-function '(org-agenda-skip-entry-if 'done))
		   (org-agenda-overriding-header "INBOX tasks to refile:\n")))
	    ))
	  ("c" "Agenda with capture"
	   ((agenda ""
		    ((org-agenda-span 1)
		     (org-deadline-warning-days 0)
		     (org-scheduled-past-days 14)
		     (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
		     (org-agenda-skip-function '(org-agenda-skip-entry-if 'done))
		     (org-agenda-format-date "%A %-e %B %Y")
		     (org-agenda-overriding-header "Today's schedule:\n")))
	    (agenda ""
		    ((org-agenda-start-on-weekday nil)
		     (org-agenda-start-day "+1d")
		     (org-agenda-span 5)
		     (org-deadline-warning-days 0)
		     (org-scheduled-past-days 0)
		     (org-agenda-skip-function '(org-agenda-skip-entry-if 'done))
                     (org-agenda-overriding-header "\nWeek at a glance:\n")))))))

  ;; Enable DONE logging in org-mode
  (setq org-log-done 'time)
  
  ;; View LaTeX previews in better quality
  (setq org-latex-create-formula-image-program 'dvisvgm)

  ;; org-export-latex
  (require 'ox-latex)
  (add-to-list 'org-latex-classes
	       '("res"
		 "\\documentclass[margin]{res}\n
\\setlength{\textwidth}{5.1in}"
		  ("\\section{%s}" . "\\section*{%s}")
		  ("\\subsection{%s}" . "\\subsection*{%s}")
		  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		  ("\\paragraph{%s}" . "\\paragraph*{%s}")
		  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
	       '("memoir"
		  "\\documentclass[article]{memoir}\n
\\usepackage{color}
\\usepackage{amssymb}
\\usepackage{gensymb}
\\usepackage{nicefrac}
\\usepackage{units}"
		  ("\\section{%s}" . "\\section*{%s}")
		  ("\\subsection{%s}" . "\\subsection*{%s}")
		  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		  ("\\paragraph{%s}" . "\\paragraph*{%s}")
		  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
  	       '("letter"
		  "\\documentclass{letter}\n"
		  ("\\section{%s}" . "\\section*{%s}")
		  ("\\subsection{%s}" . "\\subsection*{%s}")
		  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		  ("\\paragraph{%s}" . "\\paragraph*{%s}")
		  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes	       
	       '("tuftebook"
		 "\\documentclass{tufte-book}\n
\\usepackage{color}
\\usepackage{amssymb}
\\usepackage{gensymb}
\\usepackage{nicefrac}
\\usepackage{units}"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
	       '("tuftehandout"
		 "\\documentclass{tufte-handout}
\\usepackage{color}
\\usepackage{amssymb}
\\usepackage{amsmath}
\\usepackage{gensymb}
\\usepackage{nicefrac}
\\usepackage{units}"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
	       '("tufnotes"
		 "\\documentclass{tufte-handout}
				   \\usepackage{xcolor}
					 \\usepackage{graphicx} %% allow embedded images
					 \\setkeys{Gin}{width=\\linewidth,totalheight=\\textheight,keepaspectratio}
					 \\usepackage{amsmath}  %% extended mathematics
					 \\usepackage{booktabs} %% book-quality tables
					 \\usepackage{units}    %% non-stacked fractions and better unit spacing
					 \\usepackage{multicol} %% multiple column layout facilities
					 \\RequirePackage[many]{tcolorbox}
					 \\usepackage{fancyvrb} %% extended verbatim environments
					   \\fvset{fontsize=\\normalsize}%% default font size for fancy-verbatim environments

			  \\definecolor{g1}{HTML}{077358}
			  \\definecolor{g2}{HTML}{00b096}

			  %%section format
			  \\titleformat{\\section}
			  {\\normalfont\\Large\\itshape\\color{g1}}%% format applied to label+text
			  {\\llap{\\colorbox{g1}{\\parbox{1.5cm}{\\hfill\\color{white}\\thesection}}}}%% label
			  {1em}%% horizontal separation between label and title body
			  {}%% before the title body
			  []%% after the title body

			  %% subsection format
			  \\titleformat{\\subsection}%%
			  {\\normalfont\\large\\itshape\\color{g2}}%% format applied to label+text
			  {\\llap{\\colorbox{g2}{\\parbox{1.5cm}{\\hfill\\color{white}\\thesubsection}}}}%% label
			  {1em}%% horizontal separation between label and title body
			  {}%% before the title body
			  []%% after the title body

							\\newtheorem{note}{Note}[section]

							\\tcolorboxenvironment{note}{
							 boxrule=0pt,
							 boxsep=2pt,
							 colback={green!10},
							 enhanced jigsaw, 
							 borderline west={2pt}{0pt}{Green},
							 sharp corners,
							 before skip=10pt,
							 after skip=10pt,
							 breakable,
						  }"

		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  ;; Create ID property when using org-store-link
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

  ;; Set up org-babel
  (setq org-ditaa-jar-path "/home/claudio/Repositories/dot-emacs/private/cm.tools/ditaa.jar")
  (org-babel-do-load-languages
   'org-babel-load-languages '((C . t)
			       (shell . t)
			       (python .t)
			       (emacs-lisp . t)
			       (org . t)
			       (gnuplot . t)
			       (latex . t)
			       (ditaa . t)
			       (scheme . t)
			       (lisp . t)
			       (haskell . t)
			       (R . t))))

(use-package org-wild-notifier
  :ensure t
  :custom
    (setq org-wild-notifier-notification-title "Org agenda reminder"
	  org-wild-notifier-alert-times-property "NOTIFY_BEFORE")
  :config
  (org-wild-notifier-mode))

(use-package org-contacts
  :ensure t
  :after org
  :custom (org-contacts-files '("~/Vault/pkm/pages/contacts.org")))

(require 'org-fc)
(setq org-fc-directories '("~/Vault/pkm/pages" "~/Vault/pkm/slip-box"))

(use-package ox-hugo
  :ensure t
  :after ox)
#+end_src

**** Encrypting

Enabling =org-crypt= support as it is automatically installed with =org-mode= itself.

#+begin_src emacs-lisp
;; enable and set org-crypt
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))

;; GPG key to use for encryption
(setq org-crypt-key nil)
#+end_src

**** Org-noter

Install org-noter to deal with PDF notes.

#+begin_src emacs-lisp
(use-package org-noter
  :bind ("C-c r" . org-noter)
  :ensure t
  :config
  (setq org-noter-auto-save-last-location t))
#+end_src

**** Org-mind-map

Create mind maps starting from org mode files.

#+begin_src emacs-lisp
(use-package org-mind-map
  :init
  (require 'ox-org)
  :ensure t
  :config
  (setq org-mind-map-engine "dot"))
#+end_src

**** Citar

Using the superior citation manager.

#+begin_src emacs-lisp
(use-package citar
  :ensure t
  :custom
  (org-cite-global-bibliography '("~/Vault/library/org/main/main.bib"))
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (citar-bibliography org-cite-global-bibliography)
  :bind
  (("C-c c o" . citar-open)
   ("C-c c e" . citar-open-entry)
   ("C-c c n" . citar-open-notes)
   ("C-c c l" . citar-open-links)
   (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))
  :config
  (setq citar-templates
	'((main . "${author editor:30}     ${date year issued:4}     ${title:48}")
          (suffix . "          ${=key= id:15}    ${=type=:12}")
          (preview . "${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher}.\n")
          (note . "@${author editor}, ${title}")))
  (setq citar-file-notes-extensions '("org")
	citar-notes-paths '("~/Vault/pkm/slip-box"))
  (setq citar-symbol-separator "  "))
#+end_src

*** Zettelkasten

#+begin_src emacs-lisp
(use-package org-roam
  :after org
  :ensure t
  :config
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory (file-truename "~/Vault/pkm/slip-box/"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
	 ("C-c n f" . org-roam-node-find)
	 ("C-c n g" . org-roam-graph)
	 ("C-c n t" . org-roam-tag-add)
	 ("C-c n i" . org-roam-node-insert)
	 ("C-c n c" . org-roam-capture))
  :config
  (add-hook 'after-save-hook
	    (defun org-rename-to-new-title ()
	      (when-let*
		  ((old-file (buffer-file-name))
		   (is-roam-file (org-roam-file-p old-file))
		   (file-node (save-excursion
				(goto-char 1)
				(org-roam-node-at-point)))
		   (file-name  (file-name-base (org-roam-node-file file-node)))
		   (file-time  (or (and (string-match "^\\([0-9]\\{14\\}\\)-" file-name)
					(concat (match-string 1 file-name) "-"))
				   ""))
		   (slug (org-roam-node-slug file-node))
		   (new-file (expand-file-name (concat file-time slug ".org")))
		   (different-name? (not (string-equal old-file new-file))))

		(rename-buffer new-file)
		(rename-file old-file new-file)
		(set-visited-file-name new-file)
		(set-buffer-modified-p nil))))
  (org-roam-db-autosync-mode)
  (setq org-roam-node-display-template (concat "${title} " (propertize "${tags}" 'face 'org-tag)))
  ;; org-roam templates
  (setq org-roam-capture-templates
	'(("d" "default" plain "\n#+date: %U\n\n\n-----\n\n\n"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      "#+title: ${title}\n")
	   :unnarrowed t)
	  )))

;; configuring org-roam-ui to visualize my knowledge graph
(use-package websocket
  :ensure t
  :after org-roam)

(use-package simple-httpd
  :ensure t
  :after org-roam)

(use-package org-roam-ui
  :ensure t
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme nil
	org-roam-ui-follow t
	org-roam-ui-update-on-save t))

(use-package org-sidebar
  :ensure t
  :bind
  (("C-c k b" . org-sidebar-backlinks)
   ("C-c k s" . org-sidebar-toggle)
   ("C-c k t" . org-sidebar-tree))
  :config
  (setq org-directory "~/Vault/pkm/pages"))

(use-package citar-org-roam
  :after (citar org-roam)
  :config
  (setq citar-org-roam-note-title-template "@${author} - ${title}")
  (citar-org-roam-mode))
#+end_src

*** Deft

Searching through roam entries could be a painful experience. =deft= fix this.

#+begin_src emacs-lisp
(use-package deft
  :ensure t
  :bind ("C-c d" . deft)
  :config
  ;; set the deft directory and file extensions
  (setq deft-directory "~/Vault/pkm/pages/")
  (setq deft-extensions '("org"))
  (setq deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")
  (setq deft-recursive t)
  (defun anks-deft-limiting-fn (orig-fun &rest args)
    (let
        ((deft-current-files (-take 30 deft-current-files)))
      (apply orig-fun args)))
  (advice-add 'deft-buffer-setup :around #'anks-deft-limiting-fn))
#+end_src

*** Markdown mode

I also modify files in markdown format.

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
#+end_src
	
*** Skeletons

I like to define my own skeletons to quickly insert recurring patterns.

#+begin_src emacs-lisp
(define-skeleton conference-attendance-skeleton
  "Conference attendance log template for org files" nil
  "*** Timetable\n*** Thoughts\n*** Notable talks")

(define-skeleton talk-skeleton
  "Conference talk log template for org files" nil
  ":PROPERTIES:\n:SPEAKER:\n:END:\n")

(define-skeleton place-skeleton
  "Metadata for places to visit" nil
  ":PROPERTIES:
:LINK:
:VISITED:
:COMMENT:
:END:")

(define-skeleton challenge-skeleton
  "Headings for hacking challenges" nil
  "**** Commands\n**** Walkthrough\n**** Resources")

(define-skeleton exam-skeleton
  "Exam log template for org files" nil
  "- *Exam date(s)*:
- *Exam type*:
- *Feelings*:
- *Mark(s)*:")

(define-skeleton pwn-ctf-skeleton
  "Python template used to solve pwn challenges" nil
  "from pwn import *

context.terminal = ['tmux', 'splitw', '-v']

if \"REMOTE\" not in args:
    r = process(\"\")
    gdb.attach(r, \"\"\"
    \"\"\")

    input(\"wait\")
else:
    r = remote(\"\", )")
#+end_src

*** Git

Using magit as a front-end for git.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :config
  (setq magit-send-email-workflow t)
  (setq git-commit-fill-column 75))

(require 'git-email)
#+end_src

*** Spellchecking

Enabling spellchecking by default.

#+begin_src emacs-lisp
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
#+end_src

** Bookmarks with ebuku

I use buku as my bookmarks manager.

#+begin_src emacs-lisp
(use-package ebuku
  :config
  (setq ebuku-buku-path "/usr/bin/buku")
  :ensure t)
#+end_src

** Finance

I use beancount to track my finances.

#+begin_src emacs-lisp
(require 'beancount)
(add-to-list 'auto-mode-alist '("\\.beancount\\'" . beancount-mode))
#+end_src

** Email

I use ~mu4e~ as e-mail client.

#+begin_src emacs-lisp
  (if (display-graphic-p)
      (use-package mu4e
		   :ensure nil
		   :commands (mu4e)
		   :bind (("C-c m" . mu4e))
		   :config
		   (setq mu4e-maildir (expand-file-name "~/Maildir")
			 mu4e-use-fancy-chars nil
			 mu4e-attachment-dir  "~/Downloads"
			 message-send-mail-function 'message-send-mail-with-sendmail
			 sendmail-program "/usr/bin/msmtp"
			 message-kill-buffer-on-exit t
			 mu4e-get-mail-command "mbsync -a"
			 mu4e-update-interval 300
			 mu4e-context-policy 'pick-first
			 mu4e-headers-auto-update t
			 mu4e-contexts
			 `(,(make-mu4e-context
			     :name "polimi"
			     :enter-func (lambda () (mu4e-message "Switch to the polimi context"))
			     :match-func (lambda (msg)
					   (when msg
					     (mu4e-message-contact-field-matches msg
										 :to "claudio.migliorelli@mail.polimi.it")))
			     :vars '((mu4e-sent-folder       . "/polimi/sent")
				     (mu4e-drafts-folder     . "/polimi/drafts")
				     (mu4e-trash-folder      . "/polimi/trash")
				     (user-mail-address	   . "claudio.migliorelli@mail.polimi.it")
				     (user-full-name	   . "Claudio Migliorelli" )
				     (mu4e-maildir-shortcuts . (("/polimi/INBOX" . ?i)
								("/polimi/sent" . ?s)
								("/polimi/drafts" . ?d)
								("/polimi/trash" . ?t)))
				     (mu4e-sent-messages-behavior . delete)))))
		   (setq mu4e-headers-thread-single-orphan-prefix '("└>" . " ")
			 mu4e-headers-thread-child-prefix '("└> " . " ")
			 mu4e-headers-thread-last-child-prefix '("└> " . " ")
			 mu4e-headers-thread-connection-prefix '("│ " . " ")
			 mu4e-headers-thread-orphan-prefix '("└>" . " ")
			 mu4e-headers-thread-root-prefix '("> " . " "))
		   (with-eval-after-load "mm-decode"
		     (add-to-list 'mm-discouraged-alternatives "text/html")
		     (add-to-list 'mm-discouraged-alternatives "text/richtext"))
		   (defun mg/message-insert-citation-line ()
		     "Based off `message-insert-citation-line`."
		     (when message-reply-headers
		       (insert "On " (format-time-string "%a, %d %b %Y %H:%M:%S %z" (date-to-time (mail-header-date message-reply-headers))) " ")
		       (insert (mail-header-from message-reply-headers) " wrote:")
		       (newline)
		       (newline)))

		   (setq message-citation-line-function 'mg/message-insert-citation-line)))
#+end_src

** RSS reader

Using elfeed as my preferred RSS feed manager.

#+begin_src emacs-lisp
(use-package elfeed
  :ensure t
  :bind (("C-c e" . elfeed))
  :config
  (setq elfeed-feeds
	'("https://news.ycombinator.com/rss"
	  "https://seclists.org/rss/fulldisclosure.rss"
	  "http://feeds.feedburner.com/smittenkitchen"
	  "https://www.justonecookbook.com/feed/"
	  "https://ournextlife.com/feed/"
	  "https://www.frugalwoods.com/feed/"
	  "https://moretothat.com/feed/"
	  "https://calnewport.com/feed/"
	  "https://xkcd.com/atom.xml"
	  "https://feeds.feedburner.com/TheHackersNews?format=xml"
	  "https://www.kernel.org/feeds/kdist.xml"
	  "https://9to5linux.com/feed/atom"
	  "https://fs.blog/feed/"
	  "https://www.phoronix.com/rss.php"
	  "https://www.schneier.com/feed/")))
#+end_src

** Programming stuff
*** Completion

Trying some in-buffer completion framework that is not broken.

#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :init
  (vertico-mode)
  :config
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy))

(use-package marginalia
  :ensure t
  :init
  (marginalia-mode))

(use-package savehist
  :ensure t
  :init
  (savehist-mode))

(use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Snippets

Using some snippets to make my writing experience faster.

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (setq yasnippet-snippets-dir '())
  (setq yas-snippet-dirs
	'("~/.emacs.d/private/cm.snippets"                                              ;; personal snippets
	  "~/Repositories/dot-emacs/elpa/yasnippet-snippets-20230622.1323/snippets"     ;; auto-generated snippets
          ))
  (yas-global-mode 1))

(use-package yasnippet-snippets
  :after yasnippet
  :ensure t)
#+end_src

*** CTAGS

Using CTAGS for kernel development.

#+begin_src emacs-lisp
(use-package citre
  :ensure t
  :bind (("C-x c j" . citre-jump)
	 ("C-x c J" . citre-jump-back)
	 ("C-x c p" . citre-ace-peek)
	 ("C-x c u" . citre-update-this-tags-file))
    :config
    (add-to-list 'load-path "~/Repositories/citre")
    (citre-auto-enable-citre-mode-modes '(prog-mode)))
#+end_src

*** Tramp term

Using tramp term to connect to ssh instances and edit files.

#+begin_src emacs-lisp
(use-package tramp
  :ensure t
  :init
  (setq tramp-default-method "ssh"))
#+end_src

*** LSP

Using ~lsp-mode~ to handle IDE-like features.

#+begin_src emacs-lisp
(use-package nix-mode
  :ensure t
  :mode "\\.nix\\'")

(use-package lua-mode
  :ensure t
  :mode "\\.lua\\'")

(use-package dockerfile-mode
  :ensure t
  :mode "\\.docker.file\\'" "\\Dockerfile\\'")

(use-package gnuplot
  :ensure t)

(use-package eglot
  :ensure t
  :config
  (add-to-list 'eglot-server-programs
	       '((c-mode c++-mode)
                 . ("clangd")))
  (add-to-list 'eglot-server-programs '(nix-mode . ("rnix-lsp")))
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'python-mode-hook 'eglot-ensure))

(use-package company
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode))

(use-package docker-tramp
  :ensure t)
#+end_src

*** Which key

Using which key to remind what keybinds to use to perform actions.

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

*** Terminal

I use ~vterm~ as terminal inside Emacs.

#+begin_src emacs-lisp
(use-package vterm
  :ensure t)

(use-package multi-vterm
  :ensure t
  :bind (("C-c v" . multi-vterm)))
#+end_src
*** Pythonenv

Enable pythonenv inside Emacs.

#+begin_src emacs-lisp
(use-package pyvenv
  :ensure t)
#+end_src

** Custom functions

Adding some custom functions I use to make my life easier.

#+begin_src emacs-lisp
;; copy a file in the current Dired directory
(defun mg/dired-copy-file-here (file)
  (interactive "fCopy file: ")
  (copy-file file default-directory))
(eval-after-load "dired"
  '(define-key dired-mode-map "\M-c" 'dired-copy-file-here))
(global-set-key (kbd "C-c f c") 'mg/copy-file)

;; copy file name to clipboard
(defun mg/copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
					(buffer-file-name))))
	(when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
(global-set-key (kbd "C-c f n") 'mg/copy-file-name-to-clipboard)

;; perform org-capture with a side org agenda
(defun mg/agenda-w-capture ()
  (interactive)
  (split-window-right)
  (let ((org-agenda-window-setup 'current-window))
    (org-agenda nil "c"))
  (org-capture))
#+end_src
