#+TITLE: GNU Emacs configuration file
#+AUTHOR: Claudio Migliorelli (@miglio)
#+PROPERTY: header-args:emacs-lisp :tangle init.el
* Init work

In this piece of code I add stuff to perform the startup of the Emacs init file to make it work properly.

#+begin_src emacs-lisp
(add-to-list 'load-path (concat user-emacs-directory "modules/"))
(add-to-list 'load-path (concat user-emacs-directory "site-lisp/"))
(add-to-list 'load-path (concat user-emacs-directory "site-lisp/git-email"))
(add-to-list 'load-path (concat user-emacs-directory "./site-lisp/org-fc"))
#+end_src

Start the emacs server when opening emacs

#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+end_src

* Startup performance

I find myself closing and opening Emacs a plenty of times. I want it to be responsive and fast. I'm going to reduce the frequency of garbage collection and then I'll measure the startup time.

#+begin_src emacs-lisp
(require 'startup-performance-setup)
#+end_src
  
* Package management

First of all, let's initialize the package management setting up ELPA, MELPA and org package repositories. After that, I want Emacs loading =use-package= to manage package configuration.

#+begin_src emacs-lisp
(require 'package-management-setup)
#+end_src

* Keep emacs.d clean
** Customization settings
   
Thanks to @daviwil I finally found a way to get rid of all transient files that appear in my =dot-emacs= git repository. In this way I'll have a better organized folder, with relevant files only.

#+begin_src emacs-lisp
(require 'customization-settings-setup)
#+end_src

* MacOS support

In order to enable MacOS support I want to set the keyboard /Command/ key as the /Meta/ key and change the image scaling in order to resolve the fuzzy PDFs with Retina displays.

#+begin_src emacs-lisp
(when (eq system-type 'darwin)
    (require 'macos-setup))
#+end_src

* General configuration
** Useful defaults

Clean the Emacs interface making it as minimal as possible, without getting rid of useful improvements. Adding some defaults on indentation, etc.

#+begin_src emacs-lisp
(require 'useful-defaults-setup)
#+end_src

** Emacs auto-save

Put Emacs auto-save and backup files to /tmp/.

#+begin_src emacs-lisp
(require 'autosave-setup)
#+end_src

** User interface
*** Buffer management

Adding some tweaks to manage buffers better.

#+begin_src emacs-lisp
(require 'buffer-management-setup)
#+end_src

*** Theme

Loading the preferred theme.

#+begin_src emacs-lisp
(require 'theme-setup)
#+end_src
	
** Files navigation

#+begin_src emacs-lisp
(require 'files-navigation-setup)
#+end_src

** File visualization
*** Open with

I want to open some files with external programs and =open-with= addresses this problem.

#+begin_src emacs-lisp
(require 'openwith-setup)
#+end_src
	
*** PDFs

I want to use =pdf-tools= to view and edit PDFs in a much better way.

#+begin_src emacs-lisp
(require 'pdftools-setup)
#+end_src
   
*** Undo tree

I really love the =undo-tree= mode visualization, so I'm going to enable it.

#+begin_src emacs-lisp
(require 'undo-tree-setup)
#+end_src

** Personal knowledge management
*** Org mode

#+begin_src emacs-lisp
(require 'org-mode-setup)
#+end_src

**** Org export backends

I'm going to set several =org-mode= export backends, among those shipped with Emacs itself by default.
	 
#+begin_src emacs-lisp
(require 'org-export-backends-setup)
#+end_src
	 
**** Encrypting

Enabling =org-crypt= support as it is automatically installed with =org-mode= itself.

#+begin_src emacs-lisp
(require 'org-crypt-setup)
#+end_src

**** Org-roam
The best package to manage my PKM is definitely =org-roam=. Installing/configuring it. I'm also installing and using org-roam-ui to visualize my org-roam graph.

#+begin_src emacs-lisp
(require 'org-roam-setup)
#+end_src

**** Org-noter

Install org-noter to deal with PDF notes.

#+begin_src emacs-lisp
(require 'org-noter-setup)
#+end_src

**** Org-mind-map

Create mind maps starting from org mode files.

#+begin_src emacs-lisp
(require 'org-mind-map-setup)
#+end_src

**** Org transclusion

Using org transclusion to group org headers into other org files.

#+begin_src emacs-lisp
(require 'org-transclusion-setup)
#+end_src

**** Citar

Using the superior citation manager.

#+begin_src emacs-lisp
(require 'citar-setup)
#+end_src

**** Annotate

Annotations can be quite effective.
#+begin_src emacs-lisp
(require 'annotate-setup)
#+end_src

**** Epresent

Nerdy-looking way to turn org mode notes into presentations.

#+begin_src emacs-lisp
(require 'epresent-setup)
#+end_src

*** Deft

Searching through roam entries could be a painful experience. =deft= fix this.

#+begin_src emacs-lisp
(require 'deft-setup)
#+end_src

*** Markdown mode

I also modify files in markdown format.

#+begin_src emacs-lisp
(require 'markdown-mode-setup)
#+end_src
	
*** Skeletons

I like to define my own skeletons to quickly insert recurring patterns.

#+begin_src emacs-lisp
(require 'skeletons-setup)
#+end_src

*** Git

Using magit as a front-end for git.

#+begin_src emacs-lisp
(require 'magit-setup)
#+end_src

*** Spellchecking

Enabling spellchecking by default.

#+begin_src emacs-lisp
(require 'spellchecking-setup)
#+end_src

*** Side notes

Using side notes to take sketchy notes while reading or reviewing stuff.

#+begin_src emacs-lisp
(require 'side-notes-setup)
#+end_src

** Bookmarks with ebuku

I use buku as my bookmarks manager.

#+begin_src emacs-lisp
(require 'ebuku-setup)
#+end_src

** Finance

I use beancount to track my finances.

#+begin_src emacs-lisp
(require 'beancount)
(add-to-list 'auto-mode-alist '("\\.beancount\\'" . beancount-mode))
#+end_src

** Email

I use ~mu4e~ as e-mail client.

#+begin_src emacs-lisp
(require 'email-setup)
#+end_src

** RSS reader

Using elfeed as my preferred RSS feed manager.

#+begin_src emacs-lisp
(require 'elfeed-setup)
#+end_src

** Programming stuff
*** Completion

Trying some in-buffer completion framework that is not broken.

#+begin_src emacs-lisp
(require 'completion-setup)
#+end_src

*** Snippets

Using some snippets to make my writing experience faster.

#+begin_src emacs-lisp
(require 'yasnippet-setup)
#+end_src

*** CTAGS

Using CTAGS for kernel development.

#+begin_src emacs-lisp
(require 'ctags-setup)
#+end_src

*** Tramp term

Using tramp term to connect to ssh instances and edit files.

#+begin_src emacs-lisp
(require 'tramp-setup)
#+end_src

*** LSP

Using =lsp-mode= to handle IDE-like features.

#+begin_src emacs-lisp
(require 'lsp-setup)
#+end_src

*** Which key

Using which key to remind what keybinds to use to perform actions.

#+begin_src emacs-lisp
(require 'which-key-setup)
#+end_src

*** Terminal

I use ~vterm~ as terminal inside Emacs.

#+begin_src emacs-lisp
(require 'vterm-setup)
#+end_src
** Custom functions

Adding some custom functions I use to make my life easier.

#+begin_src emacs-lisp
(require 'custom-functions-setup)
#+end_src
