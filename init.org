#+TITLE: GNU Emacs configuration file
#+AUTHOR: Claudio Migliorelli (@miglio)
#+PROPERTY: header-args:emacs-lisp :tangle init.el
* Init work

In this piece of code I add stuff to perform the loading of lisp files located on the local machine.

#+begin_src emacs-lisp
  (let ((base "/home/claudio/Repositories/dot-emacs/site-lisp/"))
    (add-to-list 'load-path base)
    (dolist (f (directory-files base))
      (let ((name (concat base "/" f)))
	(when (and (file-directory-p name) 
		   (not (equal f ".."))
		   (not (equal f ".")))
	  (add-to-list 'load-path name)))))
#+end_src

Start the server when opening emacs.

#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+end_src

* Package management

First of all, let's initialize the package management setting up ELPA, MELPA and org package repositories. After that, I want Emacs loading =use-package= to manage package configuration.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (unless package--initialized (package-initialize))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)
#+end_src

* Keep emacs.d clean
** Customization settings
   
Let's have a better organized folder, with relevant files only.

#+begin_src emacs-lisp
  ;; change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
	url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; keep customization settings in a temporary file
  (setq custom-file
	(if (boundp 'server-socket-dir)
	    (expand-file-name "custom.el" server-socket-dir)
	  (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)
#+end_src

* General configuration
** Useful defaults

Clean the Emacs interface making it as minimal as possible, without getting rid of useful improvements. Adding some defaults on indentation, etc.

#+begin_src emacs-lisp
  (use-package emacs
    :init
    (setq completion-cycle-threshold 3)
    (setq tab-always-indent 'complete)
    (if (display-graphic-p)
	(dolist (mode
		 '(tool-bar-mode
		   scroll-bar-mode
		   menu-bar-mode
		   tooltip-mode
		   blink-cursor-mode))
	  (funcall mode 0)))
    (dolist (mode
	     '(global-visual-line-mode
	       show-paren-mode))
      (funcall mode 1))
    (setq-default inhibit-startup-screen t
		  initial-scratch-message ""
		  frame-title-format '("%b")
		  ring-bell-function 'ignore
		  tab-width 8
		  c-basic-offset 8
		  frame-resize-pixelwise t	      
		  linum-format "%4d "
		  use-short-answers t
		  make-backup-files nil
		  native-comp-async-report-warnings-errors nil
		  global-auto-revert-mode t
		  confirm-kill-processes nil
		  process-connection-type nil
		  org-src-fontify-natively t
		  warning-minimum-level :emergency
		  set-language-environment "UTF-8"
		  system-time-locale "C")

    (add-hook 'window-setup-hook 'toggle-frame-maximized t)
    (add-hook 'artist-mode-hook (lambda () (setq indent-tabs-mode nil)))
    (add-to-list 'yank-excluded-properties 'face)

    (define-minor-mode mg/line-numbers-highlight-line-mode
      "Shows line numbers in relative mode and highlights the current line"
      :initial nil
      (if mg/line-numbers-highlight-line-mode
	  (progn
	    (display-line-numbers-mode 1)
	    (hl-line-mode 1)
	    (setq display-line-numbers-type 'relative))
	(progn
	  (display-line-numbers-mode 0)
	  (hl-line-mode 0))))
    ;; enable some modes when programming
    (add-hook 'prog-mode-hook
	      #'mg/line-numbers-highlight-line-mode))
#+end_src

** Emacs auto-save

Put Emacs auto-save and backup files to /tmp/.

#+begin_src emacs-lisp
  (defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))
  (setq
   backup-by-copying t
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t
   auto-save-list-file-prefix emacs-tmp-dir
   auto-save-file-name-transforms `((".*" ,emacs-tmp-dir t))
   backup-directory-alist `((".*" . ,emacs-tmp-dir)))
#+end_src

** User interface
*** Theme

Loading the preferred theme.

#+begin_src emacs-lisp
  (use-package minions
    :ensure t
    :config
    (minions-mode 1))

  (if (display-graphic-p)
      (progn
	(set-frame-font "Liberation Mono 13" nil t)
	(set-fringe-mode 0)
	;; (use-package zenburn-theme :ensure t :config (load-theme 'zenburn t)))
	(use-package gruvbox-theme :config (load-theme 'gruvbox-dark-soft)))
    (set-face-background 'default "undefined"))
#+end_src

** Completion

Trying some in-buffer completion framework that is not broken.

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :config
    (vertico-mode)
    (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy))

  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))

  (use-package savehist
    :ensure t
    :init
    (savehist-mode))

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic)))

  (use-package consult
    :bind (;; C-c bindings in `mode-specific-map'
	   ("C-c M-x" . consult-mode-command)
	   ("C-c h" . consult-history)
	   ("C-c k" . consult-kmacro)
	   ("C-c m" . consult-man)
	   ("C-c i" . consult-info)
	   ([remap Info-search] . consult-info)
	   ;; C-x bindings in `ctl-x-map'
	   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	   ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
	   ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	   ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	   ;; Custom M-# bindings for fast register access
	   ("M-#" . consult-register-load)
	   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	   ("C-M-#" . consult-register)
	   ;; Other custom bindings
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   ;; M-g bindings in `goto-map'
	   ("M-g e" . consult-compile-error)
	   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	   ("M-g g" . consult-goto-line)             ;; orig. goto-line
	   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("M-g m" . consult-mark)
	   ("M-g k" . consult-global-mark)
	   ("M-g i" . consult-imenu)
	   ("M-g I" . consult-imenu-multi)
	   ;; M-s bindings in `search-map'
	   ("M-s d" . consult-find)                  ;; Alternative: consult-fd
	   ("M-s c" . consult-locate)
	   ("M-s g" . consult-grep)
	   ("M-s G" . consult-git-grep)
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   ("M-s k" . consult-keep-lines)
	   ("M-s u" . consult-focus-lines)
	   ("M-s e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	   :map minibuffer-local-map
	   ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	   ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    (setq register-preview-delay 0.5
	  register-preview-function #'consult-register-format)
    (advice-add #'register-preview :override #'consult-register-window)

    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)
    :config
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     :preview-key '(:debounce 0.4 any))
    (setq consult-preview-key nil)
    (setq consult-narrow-key "<"))

  (use-package corfu
    :ensure t
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-preselect 'prompt)      ;; Preselect the prompt
    :init
    (global-corfu-mode))
#+end_src

** Files navigation

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :bind
    (("c-x c-d" . dired))
    :custom
    (ls-lisp-use-insert-directory-program nil)
    (ls-lisp-dirs-first t)
    (default-directory "~/"))

  (use-package dired-x
    :ensure nil
    :custom
    (dired-omit-files "^\\...+$")
    (dired-dwim-target t)
    (delete-by-moving-to-trash t)
    (dired-omit-files "^\\.[^.].+$")
    :init
    (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1))))

  ;; toggle disk usage
  (use-package disk-usage)  
#+end_src

** File visualization
*** Open with

I want to open some files with external programs and =open-with= addresses this problem.

#+begin_src emacs-lisp
  (use-package openwith
    :ensure t
    :config
    (setq openwith-associations '(
				  ("\\.mp4\\'" "mpv" (file))
				  ("\\.webm\\'" "mpv" (file))								
				  ("\\.mkv\\'" "mpv" (file))
				  ("\\.m4a\\'" "mpv --force-window" (file))
				  ("\\.ppt\\'" "libreoffice" (file))
				  ("\\.pptx\\'" "libreoffice" (file))
				  ("\\.doc\\'" "libreoffice" (file))
				  ("\\.docx\\'" "libreoffice" (file))
				  ))
    (openwith-mode t))
#+end_src
	
*** PDFs

I want to use =pdf-tools= to view and edit PDFs in a much better way.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-tools-install))
    (add-hook 'pdf-view-mode-hook
	      (lambda () (setq header-line-format nil))))
#+end_src
   
*** Undo tree

I really love the ~undo-tree~ mode visualization, so I'm going to enable it.

#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :custom
    (undo-tree-auto-save-history nil)
    (undo-tree-visualizer-relative-timestamps nil)
    :config
    (global-undo-tree-mode 1))
#+end_src

*** Ripgrep

I use ~rg~ to find file content easily.

#+begin_src emacs-lisp
  (use-package deadgrep
    :ensure t
    :bind
    (("C-c d" . deadgrep)))
#+end_src

*** Avy

Move the cursor around like a velociraptor.

#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :after org
    :init
    (eval-after-load 'org
      (progn
	(define-key org-mode-map (kbd "C-c ,") nil)
	(define-key org-mode-map (kbd "C-c ;") nil)))
    :bind
    (("C-c ," . avy-goto-char)
     ("C-c ;" . avy-goto-line)))
#+end_src

** Personal knowledge management
*** Org mode

Org mode is the single most used package of my Emacs workflow.

#+begin_src emacs-lisp
  (use-package writeroom-mode
    :ensure t
    :bind (("C-c w" . writeroom-mode)))

  (use-package org
    :ensure t
    :bind (("C-c a" . org-agenda)
	   ("C-c C-;" . org-insert-structure-template)
	   ("C-c c" . org-capture)
	   ("C-c C-z" . org-add-note)
	   ("C-c o p" . org-do-promote)
	   ("C-c o d" . org-do-demote)	   
	   ("C-c l" . org-store-link))
    :custom
    (org-agenda-files (list "~/Vault/pkm/20231210T220334--work-and-study-projects__personal_project.org" "~/Vault/pkm/20231210T220139--personal-projects__personal_project.org" "/home/claudio/Vault/pkm/20231210T224321--agenda__personal.org" "~/Vault/pkm/journal"))
    (org-export-backends '(beamer html latex ascii ox-hugo))
    (org-startup-folded t)
    (org-log-into-drawer t)
    (org-export-with-drawers nil)
    (org-clock-clocked-in-display 'mode-line)
    (org-clock-idle-time 15)
    (org-todo-keywords
     '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)")))
    (org-stuck-projects '("+project/" ("NEXT" "TODO") ("course") "\\(Details\\|Artifacts\\|Resources\\)\\>"))
    (org-log-done 'time)
    (org-agenda-hide-tags-regexp ".")
    (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
    (org-refile-use-outline-path 'file)
    (org-outline-path-complete-in-steps nil)
    (org-clock-sources '(agenda))
    :config
    (defun log-todo-next-creation-date (&rest ignore)
      "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
      (when (and (string= (org-get-todo-state) "NEXT")
		 (not (org-entry-get nil "ACTIVATED")))
	(org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d %a]"))))
    (add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)
    (setq org-capture-templates
	  '(("i" "Inbox")
	    ("it" "Todo entry" entry (file "~/Vault/pkm/20231211T145832--inbox__gtd_personal.org")
	     "* TODO %?\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:")
	    ("im" "Mail entry" entry (file "~/Vault/pkm/20231211T145832--inbox__gtd_personal.org")
	     "* TODO Process \"%a\" %?\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:")
	    ("in" "Notes entry" entry (file "~/Vault/pkm/20231213T172757--capture-notes__gtd_personal.org")
	     "* %U (%a)\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:")
	    ("a" "Agenda")
	    ("am" "Meeting entry" entry (file+headline "~/Vault/pkm/20231210T224321--agenda__personal.org" "Future")
	     "* Meeting with %? :meeting:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:\n:PROPERTIES:\n:LOCATION:\n:NOTIFY_BEFORE:\n:CATEGORY: %^{Category}\n:END:\n%^T\n")
	    ("ae" "Event entry" entry (file+headline "~/Vault/pkm/20231210T224321--agenda__personal.org" "Future")
	     "* %? :event:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:\n:PROPERTIES:\n:LOCATION:\n:NOTES:\n:NOTIFY_BEFORE:\n:END:\n%^T\n")
	    ("ae" "Call entry" entry (file+headline "~/Vault/pkm/20231210T224321--agenda__personal.org" "Future")
	     "* Call with %? :call:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:\n:PROPERTIES:\n:NOTIFY_BEFORE:\n:CATEGORY:\n:END:\n%^T\n")
	    ("r" "Resources")
	    ("ra" "Conference attendance" entry
	     (file "~/Vault/pkm/20231210T222135--conferences__personal_research.org")
	     "* %^{Conference name}\n:PROPERTIES:\n:WHERE: %?\n:WEBSITE: %?\n:END:\n")
	    ("p" "Projects")
	    ("pl" "Learning project" plain (file+headline "~/Vault/pkm/20231210T220334--work-and-study-projects__personal_project.org" "Learning")
	     "** %^{Project name} [/]\n:PROPERTIES:\n:WHAT: %?\n:REPOSITORY:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")
	    ("ph" "Home project" plain (file+headline "~/Vault/pkm/20231210T220334--work-and-study-projects__personal_project.org" "Home")
	     "** %^{Project name} [/]\n:PROPERTIES:\n:WHAT: %?\n:REPOSITORY:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")
	    ("pw" "Work project" plain (file+headline "~/Vault/pkm/20231210T220334--work-and-study-projects__personal_project.org" "Work")
	     "** %? [/]\n:PROPERTIES:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")
	    ("ps" "Study project" plain (file+headline "~/Vault/pkm/20231210T220334--work-and-study-projects__personal_project.org" "Study")
	     "** %? [/]\n:PROPERTIES:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")))
    ;; setup some org-capture specific stuff
    (defun mg/org-capture-inbox ()
      (interactive)
      (call-interactively 'org-store-link)
      (org-capture nil "it"))
    ;; setting up org-refile
    (setq org-refile-targets '(("~/Vault/pkm/20231210T220334--work-and-study-projects__personal_project.org" :regexp . "\\(?:\\(?:Log\\|Task\\)s\\)")
			       ("~/Vault/pkm/20231210T224321--agenda__personal.org" :regexp . "\\(?:Past\\)")))
    (define-key global-map (kbd "C-c i") 'mg/org-capture-inbox)
    ;; Org-agenda custom commands
    (setq org-agenda-block-separator "==============================================================================")
    (setq org-agenda-custom-commands
	  '(("a" "Agenda"
	     ((agenda ""
		      ((org-agenda-span 1)
		       (org-agenda-skip-function
			(lambda ()
			  (or (org-agenda-skip-entry-if 'regexp ":framework:")
			      (org-agenda-skip-entry-if 'done))))
		       (org-deadline-warning-days 0)
		       (org-scheduled-past-days 14)
		       (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
		       (org-agenda-format-date "%A %-e %B %Y")
		       (org-agenda-overriding-header "Today's schedule:\n")))
	      (agenda ""
		      ((org-agenda-span 1)
		       (org-agenda-skip-function
			(lambda ()
			  (or (org-agenda-skip-entry-if 'notregexp ":framework:")
			      (org-agenda-skip-entry-if 'done))))
		       (org-deadline-warning-days 0)
		       (org-scheduled-past-days 14)
		       (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
		       (org-agenda-format-date "%A %-e %B %Y")			
		       (org-agenda-overriding-header "Today's framework:\n")))
	      (todo "NEXT"
		    ((org-agenda-skip-function
		      '(org-agenda-skip-entry-if 'deadline))
		     (org-agenda-prefix-format "  %i %-12:c [%e] ")
		     (org-agenda-overriding-header "\nNEXT Tasks:\n")))
	      (agenda "" ((org-agenda-time-grid nil)
			  (org-agenda-start-day "+1d")
			  (org-agenda-start-on-weekday nil)
			  (org-agenda-span 30)
			  (org-agenda-show-all-dates nil)
			  (org-deadline-warning-days 0)
			  (org-agenda-entry-types '(:deadline))
			  (org-agenda-skip-function '(org-agenda-skip-entry-if 'done))
			  (org-agenda-overriding-header "\nUpcoming deadlines (+30d):\n")))
	      (tags-todo "inbox"
			 ((org-agenda-prefix-format "  %?-12t% s")
			  (org-agenda-overriding-header "\nInbox:\n")))
	      (tags "CLOSED>=\"<today>\""
		    ((org-agenda-overriding-header "\nCompleted today:\n")))
	      (agenda ""
		      ((org-agenda-start-on-weekday nil)
		       (org-agenda-skip-function
			(lambda ()
			  (or (org-agenda-skip-entry-if 'regexp ":framework:")
			      (org-agenda-skip-entry-if 'done))))
		       (org-agenda-start-day "+1d")
		       (org-agenda-span 5)
		       (org-deadline-warning-days 0)
		       (org-scheduled-past-days 0)
		       (org-agenda-overriding-header "\nWeek at a glance:\n")))
	      ))))
    (when (display-graphic-p)
      (progn
	(require 'oc-biblatex)
	(setq org-cite-export-processors
	      '((latex biblatex)))
	(setq org-latex-pdf-process (list
				     "latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f"))
	))
    (setq org-format-latex-options
	  (plist-put org-format-latex-options :scale 1.5))
    (setq org-format-latex-options
	  (plist-put org-format-latex-options :background "Transparent"))
    (setq org-latex-create-formula-image-program 'dvisvgm)
    (require 'ox-latex)
    (add-to-list 'org-latex-classes
		 '("res"
		   "\\documentclass[margin]{res}\n
  \\setlength{\textwidth}{5.1in}"
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
		 '("memoir"
		   "\\documentclass[article]{memoir}\n
  \\usepackage{color}
  \\usepackage{amssymb}
  \\usepackage{gensymb}
  \\usepackage{nicefrac}
  \\usepackage{units}"
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
		 '("letter"
		   "\\documentclass{letter}\n"
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes	       
		 '("tuftebook"
		   "\\documentclass{tufte-book}\n
  \\usepackage{color}
  \\usepackage{amssymb}
  \\usepackage{gensymb}
  \\usepackage{nicefrac}
  \\usepackage{units}"
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
		 '("tuftehandout"
		   "\\documentclass{tufte-handout}
  \\usepackage{color}
  \\usepackage{amssymb}
  \\usepackage{amsmath}
  \\usepackage{gensymb}
  \\usepackage{nicefrac}
  \\usepackage{units}"
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
		 '("tufnotes"
		   "\\documentclass{tufte-handout}
				     \\usepackage{xcolor}
					   \\usepackage{graphicx} %% allow embedded images
					   \\setkeys{Gin}{width=\\linewidth,totalheight=\\textheight,keepaspectratio}
					   \\usepackage{amsmath}  %% extended mathematics
					   \\usepackage{booktabs} %% book-quality tables
					   \\usepackage{units}    %% non-stacked fractions and better unit spacing
					   \\usepackage{multicol} %% multiple column layout facilities
					   \\RequirePackage[many]{tcolorbox}
					   \\usepackage{fancyvrb} %% extended verbatim environments
					     \\fvset{fontsize=\\normalsize}%% default font size for fancy-verbatim environments

			    \\definecolor{g1}{HTML}{077358}
			    \\definecolor{g2}{HTML}{00b096}

			    %%section format
			    \\titleformat{\\section}
			    {\\normalfont\\Large\\itshape\\color{g1}}%% format applied to label+text
			    {\\llap{\\colorbox{g1}{\\parbox{1.5cm}{\\hfill\\color{white}\\thesection}}}}%% label
			    {1em}%% horizontal separation between label and title body
			    {}%% before the title body
			    []%% after the title body

			    %% subsection format
			    \\titleformat{\\subsection}%%
			    {\\normalfont\\large\\itshape\\color{g2}}%% format applied to label+text
			    {\\llap{\\colorbox{g2}{\\parbox{1.5cm}{\\hfill\\color{white}\\thesubsection}}}}%% label
			    {1em}%% horizontal separation between label and title body
			    {}%% before the title body
			    []%% after the title body

							  \\newtheorem{note}{Note}[section]

							  \\tcolorboxenvironment{note}{
							   boxrule=0pt,
							   boxsep=2pt,
							   colback={green!10},
							   enhanced jigsaw, 
							   borderline west={2pt}{0pt}{Green},
							   sharp corners,
							   before skip=10pt,
							   after skip=10pt,
							   breakable,
						    }"

		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (org-babel-do-load-languages
     'org-babel-load-languages '((C . t)
				 (shell . t)
				 (python .t)
				 (emacs-lisp . t)
				 (org . t)
				 (gnuplot . t)
				 (latex . t)
				 (scheme . t)
				 (lisp . t)
				 (haskell . t)
				 (R . t))))

  (use-package org-wild-notifier
    :ensure t
    :custom
    (org-wild-notifier-notification-title "Org agenda reminder")
    (org-wild-notifier-alert-times-property "NOTIFY_BEFORE")
    :config
    (org-wild-notifier-mode))

  (use-package org-fc
    :ensure nil
    :bind (("C-c o f n" . org-fc-type-normal-init)
	   ("C-c o f r" . org-fc-review))
    :custom
    (org-fc-directories "~/Vault/pkm")
    :config
    (require 'org-fc))

  (use-package ox-hugo
    :ensure t
    :after ox)
#+end_src

**** Encrypting

Enabling =org-crypt= support as it is automatically installed with =org-mode= itself.

#+begin_src emacs-lisp
  ;; enable and set org-crypt
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))

  ;; GPG key to use for encryption
  (setq org-crypt-key nil)
#+end_src

**** Org-noter

Install org-noter to deal with PDF notes.

#+begin_src emacs-lisp
  (use-package org-noter
    :bind ("C-c r" . org-noter)
    :ensure t
    :custom
    (org-noter-auto-save-last-location t))
#+end_src

*** PKM utils

Functions and utilities I do heavily use when working on pkm pages.

#+begin_src emacs-lisp
  (defun mg/pkm-clean ()
    "execute the pkm clean script directly from emacs"
    (interactive)
    (progn
      (start-process "" nil "~/.scripts/pkm-clean")
      (message "pkm clean executed")))

  (defun mg/check-and-toggle-deepwork-mode ()
    "Check if deepwork-mode is enable, if so disable it, otherwise enable it"
    (interactive)
    (save-excursion
      (with-current-buffer (find-file-noselect "/etc/hosts")
	(goto-char (point-min))
	(let ((default-directory "/sudo::/home/claudio/.scripts"))
	  (progn
	    (shell-command (concat "./deepwork_mode" (when (search-forward "#gsd" nil t)
						       " --play")))))))
    (kill-buffer "hosts")
    (mg/check-deepwork-mode))

  (defun mg/check-deepwork-mode ()
    "Check if deepwork-mode is enable, if so disable it, otherwise enable it"
    (interactive)
    (save-excursion
      (with-current-buffer (find-file-noselect "/etc/hosts")
	(goto-char (point-min))
	(if (search-forward "#gsd" nil t)
	    (message "Deep work mode is enabled")
	  (message "Deep work mode is disabled"))))
    (kill-buffer "hosts"))

  (defun mg/toggle-pdf-presentation-mode ()
    (interactive)
    (toggle-frame-fullscreen)
    (hide-mode-line-mode)
    (pdf-view-fit-page-to-window))
#+end_src

*** Contacts management

Managing contacts with the ~bbdb~ package.

#+begin_src emacs-lisp
  (use-package bbdb
  :commands bbdb
  :bind (("C-x c b" . bbdb)
	 ("C-x c c" . bbdb-create))
  :custom
  (bbdb-mua-pop-up-window-size 1)
  (bbdb-file "~/Repositories/knock-files-private/bbdb/.bbdb")
  (bbdb-mail-user-agent (quote message-user-agent))
  (mu4e-view-mode-hook (quote (bbdb-mua-auto-update visual-line-mode)))
  (mu4e-compose-complete-addresses t)
  (bbdb-mua-pop-up t)
  (bbdb-mua-pop-up-window-size 5)
  :config
  (autoload 'bbdb-insinuate-mu4e "bbdb-mu4e"))
#+end_src

*** Note taking system

#+begin_src emacs-lisp
  (use-package denote
    :ensure t
    :bind (("C-c n n" . denote)
	   ("C-c n x" . denote-region)
	   ("C-c n N" . denote-type)
	   ("C-c n d" . denote-date)
	   ("C-c n f" . mg/denote-find)
	   ("C-c n y f" . denote-org-dblock-insert-files)
	   ("C-c n y l" . denote-org-dblock-insert-links)
	   ("C-c n y b" . denote-org-dblock-insert-backlinks)
	   ("C-c n z" . denote-signature)
	   ("C-c n s" . denote-sort-dired)
	   ("C-c n t" . denote-template)
	   ("C-c n i" . denote-link)
	   ("C-c n I" . denote-add-links)
	   ("C-c n b" . denote-backlinks)
	   ("C-c n g f" . denote-find-link)
	   ("C-c n g b" . denote-finxd-backlink)
	   ("C-c n r" . denote-rename-file)
	   ("C-c n R" . denote-rename-file-using-front-matter)
	   ("C-c n j n" . denote-journal-extras-new-entry))
    :custom
    (denote-directory (expand-file-name "~/Vault/pkm"))
    (denote-known-keywords '("emacs" "security" "kernel" "mathematics" "algorithms"))
    (denote-infer-keywords t)
    (denote-sort-keywords t)
    (denote-file-type nil)
    (denote-prompts '(title keywords file-type template signature))
    (denote-excluded-directories-regexp nil)
    (denote-excluded-keywords-regexp nil)
    (denote-date-prompt-use-org-read-date t)
    (denote-date-format nil)
    (denote-backlinks-show-context t)
    (denote-dired-directories
     (list denote-directory
	   (thread-last denote-directory (expand-file-name "assets"))
	   (thread-last denote-directory (expand-file-name "journal"))))
    (denote-templates
     '((plain . "")
       (course . "* Course details\n- *Lecturer*:\n- *University*:\n- *Academic year*:\n- *Resources*:\n- *Description*:\n* Lecture notes\n* COMMENT Flashcards\n")
       (journal . "* Daily log\n:PROPERTIES:\n:CATEGORY: SCHEDULE\n:END:\n** Morning deep work\n*** ...\n** Afternoon deep work\n*** ...\n** Afternoon shallow work\n*** ...\n* Learning and research\n** Resources found today\n** Key takeaways\n* Ideas vault\n\n#+BEGIN: denote-backlinks :sort-by-component nil :reverse-sort nil :id-only nil\n\n#+END:")
       (place . "* Details\n- *Link*:\n- *Visited*:\n* Notes\n")
       (contact . "* Contact details\n- *E-mail*:\n- *Company*:\n- *Phone number*:\n- *Website*:\n- *Twitter*:\n- *BBDB entry*:\n* Additional information\n- ")))
    (denote-journal-extras-title-format 'day-date-month-year-24h)
    (denote-date-prompt-use-org-read-date t)
    :config
    (defun mg/denote-find ()
      "Find files interactively starting from the denote-directory."
      (interactive)
      (let ((default-directory (concat denote-directory "/")))
	(call-interactively 'find-file)))
    (add-hook 'find-file-hook #'denote-link-buttonize-buffer)
    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
    (require 'denote-journal-extras)
    (denote-rename-buffer-mode 1))

  (use-package denote-menu
    :after (denote)
    :ensure t
    :bind (("C-c n m" . list-denotes)))
#+end_src

**** Citar

Using the superior citation manager.

#+begin_src emacs-lisp
  (use-package citar
    :ensure t
    :custom
    (org-cite-global-bibliography '("~/Vault/library/org/main/main.bib"))
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography org-cite-global-bibliography)
    :bind
    (("C-c n c o" . citar-open)
     (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))
    :config
    (setq citar-templates
	  '((main . "${author editor:30}     ${date year issued:4}     ${title:48}")
	    (suffix . "          ${=key= id:15}    ${=type=:12}")
	    (preview . "${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher}.\n")
	    (note . "@${author editor}, ${title}")))
    (setq citar-file-notes-extensions '("org")
	  citar-notes-paths '("~/Vault/pkm/reference"))
    (setq citar-symbol-separator "  "))

  (use-package citar-denote
    :custom
    (citar-open-always-create-notes nil)
    (citar-denote-file-type 'org)
    (citar-denote-subdir nil)
    (citar-denote-keyword "bib")
    (citar-denote-use-bib-keywords nil)
    (citar-denote-title-format "title")
    (citar-denote-title-format-authors 1)
    (citar-denote-title-format-andstr "and")
    :init
    (citar-denote-mode)
    :bind (("C-c n c c" . citar-create-note)
	   ("C-c n c n" . citar-denote-open-note)
	   ("C-c n c d" . citar-denote-dwim)
	   ("C-c n c e" . citar-denote-open-reference-entry)
	   ("C-c n c a" . citar-denote-add-citekey)
	   ("C-c n c k" . citar-denote-remove-citekey)
	   ("C-c n c r" . citar-denote-find-reference)
	   ("C-c n c f" . citar-denote-find-citation)
	   ("C-c n c l" . citar-denote-link-reference)))
#+end_src

*** Markdown mode

I also modify files in markdown format.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
#+end_src
	
*** Spellchecking

Enabling spellchecking by default.

#+begin_src emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+end_src

** Bookmarks with ebuku

I use buku as my bookmarks manager.

#+begin_src emacs-lisp
  (use-package ebuku
    :ensure t
    :custom
    (ebuku-buku-path "/usr/bin/buku"))
#+end_src

** Finance

I use ledger to track my finances.

#+begin_src emacs-lisp
  (use-package ledger-mode
    :ensure t)
#+end_src

** Email

Using ~mu4e~ as e-mail client.

#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :commands (mu4e)
    :after (org)
    :bind (("C-c m" . mu4e))
    :config
    (add-hook 'mu4e-compose-mode-hook
          (lambda () (setq fill-column 75)
                      (auto-fill-mode 1)))
    (define-key mu4e-headers-mode-map (kbd "C-c c") 'mu4e-org-store-and-capture)
    (define-key mu4e-view-mode-map    (kbd "C-c c") 'mu4e-org-store-and-capture)
    (defun mg/org-capture-mail ()
      (interactive)
      (call-interactively 'org-store-link)
      (org-capture nil "im"))
    (define-key mu4e-headers-mode-map (kbd "C-c i") 'mg/org-capture-mail)
    (define-key mu4e-view-mode-map    (kbd "C-c i") 'mg/org-capture-mail)
    (setq mu4e-maildir (expand-file-name "~/Maildir")
	  mu4e-use-fancy-chars nil
	  mu4e-attachment-dir  "~/Downloads"
	  message-send-mail-function 'message-send-mail-with-sendmail
	  sendmail-program "/usr/bin/msmtp"
	  message-kill-buffer-on-exit t
	  mu4e-get-mail-command "mbsync -a"
	  mu4e-compose-signature "\tClaudio\n"
	  mu4e-update-interval 300
	  mu4e-context-policy 'pick-first
	  mu4e-headers-auto-update t
	  mu4e-contexts
	  `(,(make-mu4e-context
	      :name "polimi"
	      :enter-func (lambda () (mu4e-message "Switch to the polimi context"))
	      :match-func (lambda (msg)
			    (when msg
			      (mu4e-message-contact-field-matches msg
								  :to "claudio.migliorelli@mail.polimi.it")))
	      :vars '((mu4e-sent-folder       . "/polimi/sent")
		      (mu4e-drafts-folder     . "/polimi/drafts")
		      (mu4e-trash-folder      . "/polimi/trash")
		      (user-mail-address	   . "claudio.migliorelli@mail.polimi.it")
		      (user-full-name	   . "Claudio Migliorelli" )
		      (mu4e-maildir-shortcuts . (("/polimi/INBOX" . ?i)
						 ("/polimi/sent" . ?s)
						 ("/polimi/drafts" . ?d)
						 ("/polimi/trash" . ?t)))
		      (mu4e-sent-messages-behavior . delete)))))
    (setq mu4e-headers-thread-single-orphan-prefix '("└>" . " ")
	  mu4e-headers-thread-child-prefix '("└> " . " ")
	  mu4e-headers-thread-last-child-prefix '("└> " . " ")
	  mu4e-headers-thread-connection-prefix '("│ " . " ")
	  mu4e-headers-thread-orphan-prefix '("└>" . " ")
	  mu4e-headers-thread-root-prefix '("> " . " "))
    (with-eval-after-load "mm-decode"
      (add-to-list 'mm-discouraged-alternatives "text/html")
      (add-to-list 'mm-discouraged-alternatives "text/richtext"))
    (defun mg/message-insert-citation-line ()
      "Based off `message-insert-citation-line`."
      (when message-reply-headers
	(insert "On " (format-time-string "%a, %d %b %Y %H:%M:%S %z" (date-to-time (mail-header-date message-reply-headers))) " ")
	(insert (mail-header-from message-reply-headers) " wrote:")
	(newline)
	(newline)))
    (setq message-citation-line-function 'mg/message-insert-citation-line))
#+end_src

** EXWM

Using EXWM as window manager. Enabling the power of Emacs everywhere around X.

#+begin_src emacs-lisp
  (defun mg/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (use-package exwm
    :config
    (setq exwm-workspace-number 6)
    (add-hook 'exwm-update-class-hook #'mg/exwm-update-class)

    (require 'exwm-systemtray)
    (exwm-systemtray-enable)
    (setq exwm-systemtray-height 15)

    (require 'exwm-randr)
    (exwm-randr-enable)

    (setq exwm-randr-workspace-monitor-plist '(2 "HDMI1" 5 "HDMI1"))

    (defun mg/starter ()
      "Choose the application to run"
      (interactive)
      (let* ((candidates (split-string
			  (shell-command-to-string "xstarter -P")
			  "\n"
			  t))
	     (application-path (completing-read
				"Application to launch: "
				candidates)))
	(start-process "" nil application-path)))

    ;; these keys should always pass through emacs
    (setq exwm-input-prefix-keys
	  '(?\C-x
	    ?\C-u
	    ?\C-n
	    ?\C-t
	    ?\C-h
	    ?\C-p
	    ?\C-g
	    ?\M-x
	    ?\M-`
	    ?\M-&
	    ?\M-:
	    ?\C-\M-j  ;; buffer list
	    ?\C-\ ))  ;; ctrl+space

    ;; map sequences to be sent to X applications using emacs kebindings
    (setq exwm-input-simulation-keys
	  '(([?\C-b] . [left])
	    ([?\C-f] . [right])
	    ([?\C-p] . [up])
	    ([?\C-n] . [down])
	    ([?\C-a] . [home])
	    ([?\C-e] . [end])
	    ([?\M-v] . [prior])
	    ([?\C-v] . [next])
	    ([?\C-d] . [delete])
	    ([?\C-k] . [S-end delete])))

    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    (setq exwm-layout-show-all-buffers t)
    (setq exwm-workspace-show-all-buffers t)

    (exwm-input-set-key
     (kbd "<XF86MonBrightnessUp>")
     (lambda ()
       (interactive)
       (start-process-shell-command
	"xbacklight" nil "xbacklight -inc 5")))

    (exwm-input-set-key
     (kbd "<XF86MonBrightnessDown>")
     (lambda ()
       (interactive)
       (start-process-shell-command
	"xbacklight" nil "xbacklight -dec 5")))

    ;; set up global key bindings
    ;; keep in mind that changing this list after EXWM initializes has no effect
    (setq exwm-input-global-keys
	  `(
	    ;; reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
	    ([?\s-r] . exwm-reset)

	    ;; delete window
	    ([?\s-k]
	     . delete-window)

	    ;; move between windows
	    ([s-left] . windmove-left)
	    ([s-right] . windmove-right)
	    ([s-up] . windmove-up)
	    ([s-down] . windmove-down)

	    ;; move window to another workspace
	    ([?\s-m] . exwm-workspace-move-window)

	    ;; launch applications via shell command
	    ([?\s-\ ] .
	     (lambda ()
	       (interactive)
	       (mg/starter)))

	    ;; switch workspace
	    ([?\s-w] . exwm-workspace-switch)
	    ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

	    ;; utilities
	    ([?\s-b] .
	     (lambda ()
	       (interactive)
	       (start-process "" nil "/usr/bin/firefox")))
	    ([?\s-i] .
	     (lambda ()
	       (interactive)
	       (start-process "" nil "/usr/bin/setxkbmap" "it")))
	    ([?\s-u] .
	     (lambda ()
	       (interactive)
	       (start-process "" nil "/usr/bin/setxkbmap" "us")))
	    ([?\s-p] .
	     (lambda ()
	       (interactive)
	       (start-process "" nil "/usr/bin/shutdown" "now")))
	    ([?\s-f] .
	     (lambda ()
	       (interactive)
	       (mg/check-and-toggle-deepwork-mode)))
	    ([?\s-c] .
	     (lambda ()
	       (interactive)
	       (start-process "" nil "/usr/bin/scrot" "-s /home/claudio/Vault/pkm/assets/$(date +%Y-%m-%d-%H-%M-%S)_screenshot.png")))

	    ,@(mapcar (lambda (i)
			`(,(kbd (format "s-%d" i)) .
			  (lambda ()
			    (interactive)
			    (exwm-workspace-switch-create ,i))))
		      (number-sequence 0 9))))
    (add-hook 'exwm-init-hook
	      (lambda ()
		(progn
		  (start-process "blueberry-tray" nil "blueberry-tray")
		  (start-process "xset" nil "xset" "s 300 5")
		  (start-process "nm-applet" nil "nm-applet")
		  (start-process "redshift" nil "redshift")
		  (start-process "x-on-resize" nil "x-on-resize" "-c /home/claudio/Repositories/knock-files/cli-utils/monitor_hotplug.sh"))) t)
    (exwm-enable))

  (use-package exwm-modeline
    :ensure t
    :config
    (add-hook 'exwm-init-hook #'exwm-modeline-mode))

  (use-package desktop-environment
    :ensure t
    :after (exwm)
    :config
    (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>") #'desktop-environment-volume-increment)
    (exwm-input-set-key (kbd "<XF86AudioLowerVolume>") #'desktop-environment-volume-decrement)
    (exwm-input-set-key (kbd "<XF86AudioMute>") #'desktop-environment-toggle-mute)
    (exwm-input-set-key (kbd "s-l") #'desktop-environment-lock-screen)
    (exwm-input-set-key (kbd "<XF86AudioPlay>") #'desktop-environment-toggle-music)
    (exwm-input-set-key (kbd "<XF86AudioPause>") #'desktop-environment-toggle-music)
    (exwm-input-set-key (kbd "<XF86AudioNext>") #'desktop-environment-music-next)
    (exwm-input-set-key (kbd "s-s") #'desktop-environment-screenshot-part)
    :custom
    (desktop-environment-volume-get-command "pamixer --get-volume")
    (desktop-environment-volume-set-command "pamixer %s")
    (desktop-environment-volume-toggle-regexp nil)
    (desktop-environment-volume-get-regexp "\\([0-9]+\\)")
    (desktop-environment-volume-normal-increment "-i 5 --allow-boost")
    (desktop-environment-volume-normal-decrement "-d 5")
    (desktop-environment-volume-toggle-command "pamixer -t")
    (desktop-environment-screenshot-directory "/home/claudio/Vault/pkm/assets")
    (desktop-environment-screenshot-command "scrot -s")
    (desktop-environment-screenshot-delay-argument nil)
    (desktop-environment-screenshot-partial-command "import png:- | xclip -selection c -t image/png -verbose")
    (desktop-environment-screenlock-command "xsecurelock"))

  (use-package bluetooth)

  (use-package time
    :ensure t
    :after (exwm)
    :custom
    (display-time-format "[%d/%b %H:%M]")
    :config
    (display-time-mode)
    (display-battery-mode))
#+end_src

** Browser

I use eww for quick search in a text-based format. Then, I also use engine-mode to quickly search stuff directly in emacs.

#+begin_src emacs-lisp
  (use-package w3m
    :ensure t
    :bind
    (("C-c w" . w3m)))

  (use-package engine-mode
    :ensure t
    :config
    (engine/set-keymap-prefix (kbd "C-c s"))
    (defun mg/engine-mode-exact-phrase-transform (search-term)
      (if current-prefix-arg
	  (concat "\"" search-term "\"")
	search-term))
    (defengine archwiki
	       "https://wiki.archlinux.org/index.php?search=%s"
	       :keybinding "a")
    (defengine google
		 "http://www.google.com/search?hl=en&ie=utf-8&oe=utf-8&q=%s"
		 :keybinding "g"
		 :term-transformation-hook mg/engine-mode-exact-phrase-transform)
    (defengine google-maps
	       "https://www.google.com/maps/search/%s/"
	       :keybinding "M")
    (defengine openstreetmap
	       "https://www.openstreetmap.org/search?query=%s"
	       :keybinding "m")
    (defengine wordreference-iten
	       "https://www.wordreference.com/iten/%s"
	       :keybinding "i")
    (defengine wordreference-enit
	       "https://www.wordreference.com/enit/%s"
	       :keybinding "e")
    (defengine wikipedia
	     "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
	     :keybinding "w")
    (defengine youtube
	       "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
	       :keybinding "y")
    (engine-mode t))
#+end_src

** RSS reader

Using elfeed as my preferred RSS feed manager.

#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :bind (("C-c e" . elfeed))
    :custom
    (elfeed-feeds
     '("https://news.ycombinator.com/rss"
       "https://seclists.org/rss/fulldisclosure.rss"
       "https://ournextlife.com/feed/"
       "https://www.frugalwoods.com/feed/"
       "https://moretothat.com/feed/"
       "https://calnewport.com/feed/"
       "https://xkcd.com/atom.xml"
       "https://feeds.feedburner.com/TheHackersNews?format=xml"
       "https://www.kernel.org/feeds/kdist.xml"
       "https://9to5linux.com/feed/atom"
       "https://fs.blog/feed/"
       "https://www.phoronix.com/rss.php"
       "https://www.schneier.com/feed/")))
#+end_src

** Coding stuff
*** Git

Using ~magit~ as git client for Emacs.

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :config
    (setq magit-refresh-status-buffer t)
    (setq git-commit-fill-column 75))
#+end_src

*** Utilities

These are useful tweaks I use when coding.

#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (require 'smartparens-config)
    (smartparens-global-mode))
#+end_src

*** Snippets

Using some snippets to make my writing experience faster.

#+begin_src emacs-lisp
  (use-package abbrev
    :ensure nil
    :bind
    (("C-x \"" . unexpand-abbrev))
    :config
    (setq-default abbrev-mode t)
    (setq save-abbrevs nil)
    (clear-abbrev-table global-abbrev-table)
    (define-abbrev-table 'global-abbrev-table
      '(
	("arg" "argument" )
	("bc" "because" )
	("bg" "background" )
	("bt" "between" )

	("cnt" "can't" )
	("ddnt" "didn't" )
	("dnt" "don't" )

	("afaik" "as far as I know" )
	("atm" "at the moment" )
	("ty" "thank you" )
	("btw" "by the way" )
	("wfh" "working from home")

	("cfg" "context-free grammar" )
	("cs" "computer science" )

	("ipa" "IP address" )
	("jvm" "Java Virtual Machine" )
	("subdir" "subdirectory" )
	("db" "database" )

	("envp" "environment variable" )
	("gui" "graphical user interface" )
	("oop" "object oriented programming" )
	("os" "operating system" )

	("utf8" "-*- coding: utf-8 -*-" )

	("rgaz" "\\([A-Za-z0-9]+\\)")
	("rgshy" "\\(?:xx\\)")
	("rgbracket" "\\[\\([^]]+?\\)\\]")
	("rgcurly" "“\\([^”]+?\\)”")
	("rgdigits" "\\([0-9]+\\)")
	("rgdate" "\\([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\\)")
	("rgdot" "\\(.\\)")
	("rgstr" "\\([^\"]+?\\)")
	("rgtag" "\\([</>=\" A-Za-z0-9]+\\)")
	)))

  (define-abbrev-table 'org-mode-abbrev-table
    '(
      ("lle" "** \n:PROPERTIES:\n:TOPICS: \n:LECTURER: \n:DATE: \n:RESOURCES: \n:END:")
      ("bbk" "** \n:PROPERTIES:\n:TITLE:\n:AUTHOR:\n:YEAR:\n:PAGES:\n:RATING:\n:LINK:\n:END:")
      ("prop" ":PROPERTIES:\n...\n:END:")
      ("eqn" "\\begin{equation}\n\n\\end{equation}")
      ("eqnc" "\\begin{equation}\n\\begin{cases}\n\n\\end{cases}\n\\end{equation}")
      ))

  (define-abbrev-table 'lisp-mode-abbrev-table
    '(
      ("monitor" "(setq exwm-randr-workspace-monitor-plist '(2 \"HDMI1\" 5 \"HDMI1\"))\n(exwm-randr--refresh)")
      ))

  (define-abbrev-table 'ledger-mode-abbrev-table
    '(
      ("esse" " * Esselunga | Grocery shopping\nExpenses:Food:Supermarket\nAssets:Cards:N26")
      ("parents" " * Income from parents\nIncome:Parents:Salary\nAssets:Cards:N26")
      ("spoti" " * Spotify | Student monthly subscription\nExpenses:Leisure:Tech 5.99 EUR\nAssets:Cards:N26")
      ("trenord" " * Trenord | Ticket to Milan\nExpenses:Transport:Public\nAssets:Cards:N26")
      ("atm" " * ATM | Metro ticket @Milan\"\nExpenses:Transport:Public\nAssets:Cards:N26")
      ("n26smart" " * N26 | Smart monthly subscription\nExpenses:Taxes:Bank\nAssets:Cards:N26")
      ))
#+end_src

*** CTAGS

Using CTAGS for kernel development.

#+begin_src emacs-lisp
  (use-package citre
    :ensure t
    :config
    (add-to-list 'load-path "~/Repositories/citre")
    (citre-auto-enable-citre-mode-modes '(prog-mode)))
#+end_src

*** Tramp term

Using tramp term to connect to ssh instances and edit files.

#+begin_src emacs-lisp
  (use-package tramp
    :ensure t
    :init
    (setq tramp-default-method "ssh"))
#+end_src

*** LSP

Setting up Emacs as an IDE, for the most comprehensive experience as possible.

#+begin_src emacs-lisp

  (setq tab-always-indent 'complete)

  (use-package dockerfile-mode
    :ensure t
    :mode "\\.docker.file\\'" "\\Dockerfile\\'")

  (use-package haskell-mode
    :ensure t
    :mode "\\.hs\\'")

  (use-package racket-mode
    :ensure t
    :mode "\\.rkt\\'")

  (use-package python-mode
    :ensure t
    :mode "\\.py\\'")

  (use-package cc-mode
    :ensure nil
    :mode "\\.c\\'" "\\.h\\'" "\\.cpp\\'")

  (use-package gnuplot
    :ensure t)

  (use-package eglot
    :ensure nil
    :config
    (add-to-list 'eglot-server-programs
		 '((c-mode c++-mode)
		   . ("clangd")))
    (add-to-list 'eglot-server-programs
		 '((racket-mode)
		   . ("racket")))
    (add-hook 'c-mode-hook 'eglot-ensure)
    (add-hook 'haskell-mode-hook 'eglot-ensure)
    (add-hook 'python-mode-hook 'eglot-ensure))
#+end_src

*** Which key

Using which key to remind what keybinds to use to perform actions.

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

*** Terminal

I use ~vterm~ as terminal inside Emacs.

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)

  (use-package multi-vterm
    :ensure t
    :bind (("C-c v" . multi-vterm)))
#+end_src
* Misc custom functions

Adding some custom functions I use to make my life easier.

#+begin_src emacs-lisp
  ;; copy file name to clipboard
  (defun mg/copy-file-name-to-clipboard ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
			default-directory
		      (buffer-file-name))))
      (when filename
	(kill-new filename)
	(message "Copied buffer file name '%s' to the clipboard." filename))))

  ;; enable pdf presentation mode
  (use-package hide-mode-line
    :ensure t)

  (defun mg/display-machine-info()
    (interactive)
    (message "System-level info => %s" (concat
					(format "BAT: %s- " (shell-command-to-string "~/.config/scripts/battery.sh"))
					(format "CPU: %s - " (shell-command-to-string "~/.config/scripts/cpu.sh"))			    
					(format "MEM: %s - " (shell-command-to-string "~/.config/scripts/ram.sh"))
					(format "DSK: %s - " (shell-command-to-string "~/.config/scripts/disk.sh"))
					(format "VOL: %s " (shell-command-to-string "~/.config/scripts/volume.sh")))))

  (defun mg/find-docker-and-enter-in-assets ()
    "Find the running docker container and enter into the assets folder"
    (interactive)
    (let ((docker-id (replace-regexp-in-string "\n$" "" (shell-command-to-string "docker container ls | awk 'NR > 1 {print $1}' "))))
      (find-file (concat "/docker:claudio@" docker-id ":/assets"))))

  (defun mg/insert-current-timestamp ()
    "Insert current y-m-d timestamp"
    (interactive)
    (insert "[" (format-time-string "%y-%m-%d" (current-time)) "] "))
#+end_src
* Keybindings

This is the list of keybindings I use.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c p d") #'mg/open-pages-dir)
  (global-set-key (kbd "C-c p f") #'mg/find-page)
  (global-set-key (kbd "C-c p l c") #'mg/search-store-link-contact-and-paste)
  (global-set-key (kbd "C-c p l p") #'mg/search-store-link-place-and-paste)
  (global-set-key (kbd "C-c p l l") #'mg/search-store-link-course-and-paste)
  (global-set-key (kbd "C-c p c") #'mg/pkm-clean)

  ;; utils related bindings
  (global-set-key (kbd "C-c u p") #'mg/toggle-pdf-presentation-mode)
  (global-set-key (kbd "C-c u d t") #'mg/check-and-toggle-deepwork-mode)
  (global-set-key (kbd "C-c u d c") #'mg/check-deepwork-mode)
  (global-set-key (kbd "C-c u f") #'mg/copy-file-name-to-clipboard)
  (global-set-key (kbd "C-c u s") #'mg/display-machine-info)
  (global-set-key (kbd "C-c u r s") #'replace-string)
  (global-set-key (kbd "C-c u r q") #'query-replace-regexp)
  (global-set-key (kbd "C-c u r r") #'query-replace)
  (global-set-key (kbd "C-c u r c") #'comment-region)
  (global-set-key (kbd "C-c u r u") #'uncomment-region)
  (global-set-key (kbd "C-c u r i") #'indent-region)
  (global-set-key (kbd "C-c u c d") #'mg/find-docker-and-enter-in-assets)
  (global-set-key (kbd "C-c u m") #'compile)
  (global-set-key (kbd "C-c u t") #'mg/insert-current-timestamp)
#+end_src
