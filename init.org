#+TITLE: GNU Emacs configuration file
#+AUTHOR: Claudio Migliorelli (@miglio)
#+PROPERTY: header-args:emacs-lisp :tangle init.el
* Init work

I want to start the server when opening Emacs. This is crucial because I want a single instance of Emacs running in the background. Given that I use it even as window manager, thus this is somehow mandatory). Even in cases when it is not the window manager of choice (shame on me!), I can use the neat feature of ~emacsclient~.

#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+end_src

* Package management

First of all, let's initialize the package management setting up ELPA, MELPA and org package repositories. After that, I want Emacs loading =use-package= to manage package configuration. From [2024-01-30 Tue], I started to use ~straight.el~ in conjunction with ~use-package~, therefore there will be two consecutive bootstrap sections for each of th two.

** Bootstrapping ~use-package~
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (unless package--initialized (package-initialize))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)
#+end_src
** Bootstrapping ~straight~

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

* Keep emacs.d clean
** Customization settings
   
Let's have a better organized folder, with relevant files only.

#+begin_src emacs-lisp
  ;; change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
	url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; keep customization settings in a temporary file
  (setq custom-file
	(if (boundp 'server-socket-dir)
	    (expand-file-name "custom.el" server-socket-dir)
	  (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)
#+end_src

* General configuration
** Useful defaults

Clean the Emacs interface making it as minimal as possible, without getting rid of useful improvements. Adding some defaults on indentation, etc.

#+begin_src emacs-lisp
  (use-package emacs
    :init
    (setq completion-cycle-threshold 3)
    (setq tab-always-indent 'complete)
    (require 'epa-file)
    (epa-file-enable)
    (if (display-graphic-p)
        (dolist (mode
  	       '(tool-bar-mode
  		 scroll-bar-mode
  		 menu-bar-mode
  		 tooltip-mode
  		 blink-cursor-mode))
  	(funcall mode 0)))
    (dolist (mode
  	   '(global-visual-line-mode
  	     show-paren-mode))
      (funcall mode 1))
    (setq-default inhibit-startup-screen t
  		initial-scratch-message ""
  		frame-title-format '("%b")
  		ring-bell-function 'ignore
  		tab-width 8
  		c-basic-offset 8
  		c-default-style "linux"
  		frame-resize-pixelwise t	      
  		linum-format "%4d "
  		use-short-answers t
  		make-backup-files nil
  		native-comp-async-report-warnings-errors nil
  		global-auto-revert-mode t
  		confirm-kill-processes nil
  		process-connection-type nil
  		org-src-fontify-natively t
  		;; warning-minimum-level :emergency
  		set-language-environment "UTF-8"
  		system-time-locale "C")

    (add-hook 'window-setup-hook 'toggle-frame-maximized t)
    (add-to-list 'yank-excluded-properties 'face)

    (define-minor-mode mg/line-numbers-highlight-line-mode
      "Shows line numbers in relative mode and highlights the current line"
      :initial nil
      (if mg/line-numbers-highlight-line-mode
  	(progn
  	  (display-line-numbers-mode 1)
  	  (hl-line-mode 1)
  	  (setq display-line-numbers-type 'relative))
        (progn
  	(display-line-numbers-mode 0)
  	(hl-line-mode 0))))
    ;; enable some modes when programming
    (add-hook 'prog-mode-hook
  	    #'mg/line-numbers-highlight-line-mode)
    (when (eq system-type 'darwin)
      (setq mac-option-modifier 'meta)
      (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
      (add-to-list 'default-frame-alist '(ns-appearance . dark))
      (setq ns-use-proxy-icon nil)
      (setq frame-title-format nil)))
#+end_src

** Emacs auto-save

Put Emacs auto-save and backup files to /tmp/.

#+begin_src emacs-lisp
  (defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))
  (setq
   backup-by-copying t
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t
   auto-save-list-file-prefix emacs-tmp-dir
   auto-save-file-name-transforms `((".*" ,emacs-tmp-dir t))
   backup-directory-alist `((".*" . ,emacs-tmp-dir)))
#+end_src

** Window management and desktop environment

Using EXWM as window manager. Enabling the power of Emacs everywhere around X. I've been using it as daily driver since around [2023-02-12 Sun], and I have never regretted this choice. No crap, no additional requirements, it just works.

#+begin_src emacs-lisp
  (when (and (display-graphic-p) (not (eq system-type 'darwin)))
    (defun mg/exwm-update-class ()
      (exwm-workspace-rename-buffer exwm-class-name))
    (use-package exwm
      :straight t
      :config
      (setq exwm-workspace-number 6)
      (add-hook 'exwm-update-class-hook #'mg/exwm-update-class)
      (require 'exwm-systemtray)
      (exwm-systemtray-enable)
      (setq exwm-systemtray-height 15)
      (require 'exwm-randr)
      (exwm-randr-enable)
      (defun mg/starter ()
        "Choose the application to run"
        (interactive)
        (let* ((candidates (split-string
  			  (shell-command-to-string "xstarter -P")
  			  "\n"
  			  t))
  	     (application-path (completing-read
  				"Application to launch: "
  				candidates)))
  	(start-process "" nil application-path)))
      ;; these keys should always pass through emacs
      (setq exwm-input-prefix-keys
  	  '(?\C-x
  	    ?\C-u
  	    ?\C-n
  	    ?\C-t
  	    ?\C-h
  	    ?\C-p
  	    ?\C-g
  	    ?\M-x
  	    ?\M-`
  	    ?\M-&
  	    ?\M-:
  	    ?\C-\M-j  ;; buffer list
  	    ?\C-\ ))  ;; ctrl+space
      ;; map sequences to be sent to X applications using emacs kebindings
      (setq exwm-input-simulation-keys
  	  '(([?\C-b] . [left])
  	    ([?\C-f] . [right])
  	    ([?\C-p] . [up])
  	    ([?\C-n] . [down])
  	    ([?\C-a] . [home])
  	    ([?\C-e] . [end])
  	    ([?\M-v] . [prior])
  	    ([?\C-v] . [next])
  	    ([?\C-d] . [delete])
  	    ([?\C-k] . [S-end delete])))
      (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
      (setq exwm-layout-show-all-buffers t)
      (setq exwm-workspace-show-all-buffers t)
      (exwm-input-set-key
       (kbd "<XF86MonBrightnessUp>")
       (lambda ()
         (interactive)
         (start-process-shell-command
  	"xbacklight" nil "xbacklight -inc 5")))
      (exwm-input-set-key
       (kbd "<XF86MonBrightnessDown>")
       (lambda ()
         (interactive)
         (start-process-shell-command
  	"xbacklight" nil "xbacklight -dec 5")))
      ;; set up global key bindings
      ;; keep in mind that changing this list after EXWM initializes has no effect
      (setq exwm-input-global-keys
  	  `(
  	    ;; reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
  	    ([?\s-r] . exwm-reset)
  	    ;; delete window
  	    ([?\s-k]
  	     . delete-window)
  	    ;; move between windows
  	    ([s-left] . windmove-left)
  	    ([s-right] . windmove-right)
  	    ([s-up] . windmove-up)
  	    ([s-down] . windmove-down)
  	    ;; move window to another workspace
  	    ([?\s-m] . exwm-workspace-move-window)
  	    ;; launch applications via shell command
  	    ([?\s-\ ] .
  	     (lambda ()
  	       (interactive)
  	       (mg/starter)))
  	    ;; switch workspace
  	    ([?\s-w] . exwm-workspace-switch)
  	    ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))
  	    ;; utilities
  	    ([?\s-b] .
  	     (lambda ()
  	       (interactive)
  	       (start-process "" nil "/usr/bin/brave")))
  	    ([?\s-i] .
  	     (lambda ()
  	       (interactive)
  	       (start-process "" nil "/usr/bin/setxkbmap" "it")))
  	    ([?\s-u] .
  	     (lambda ()
  	       (interactive)
  	       (start-process "" nil "/usr/bin/setxkbmap" "us")))
  	    ([?\s-f] .
  	     (lambda ()
  	       (interactive)
  	       (mg/check-and-toggle-deepwork-mode)))
  	    ([?\s-c] .
  	     (lambda ()
  	       (interactive)
  	       (start-process "" nil "/usr/bin/scrot" "-s /home/claudio/Vault/pkm/assets/$(date +%Y-%m-%d-%H-%M-%S)_screenshot.png")))
  	    ,@(mapcar (lambda (i)
  			`(,(kbd (format "s-%d" i)) .
  			  (lambda ()
  			    (interactive)
  			    (exwm-workspace-switch-create ,i))))
  		      (number-sequence 0 9))))
      (add-hook 'exwm-init-hook
  	      (lambda ()
  		(progn
  		  (if (equal (system-name) "nano")
  		      (start-process "blueman-applet" nil "blueman-applet")
  		    (start-process "blueberry-tray" nil "blueberry-tray"))
  		  (start-process "xset" nil "xset" "s 300 5")
  		  (start-process "nm-applet" nil "nm-applet")
  		  (start-process "redshift" nil "redshift")
  		  (when (not (equal (system-name) "nano"))
  		    (start-process "x-on-resize" nil "x-on-resize" "-c /home/claudio/Repositories/knock-files/cli-utils/monitor_hotplug.sh"))) t)))

    (use-package exwm-modeline
      :straight t
      :after (exwm)
      :config
      (add-hook 'exwm-init-hook #'exwm-modeline-mode))

    (use-package desktop-environment
      :straight t
      :after (exwm)
      :config
      (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>") #'desktop-environment-volume-increment)
      (exwm-input-set-key (kbd "<XF86AudioLowerVolume>") #'desktop-environment-volume-decrement)
      (exwm-input-set-key (kbd "<XF86AudioMute>") #'desktop-environment-toggle-mute)
      (exwm-input-set-key (kbd "s-l") #'desktop-environment-lock-screen)
      (exwm-input-set-key (kbd "<XF86AudioPlay>") #'desktop-environment-toggle-music)
      (exwm-input-set-key (kbd "<XF86AudioPause>") #'desktop-environment-toggle-music)
      (exwm-input-set-key (kbd "<XF86AudioNext>") #'desktop-environment-music-next)
      (exwm-input-set-key (kbd "s-s") #'desktop-environment-screenshot-part)
      :custom
      (desktop-environment-volume-get-command "pamixer --get-volume")
      (desktop-environment-volume-set-command "pamixer %s")
      (desktop-environment-volume-toggle-regexp nil)
      (desktop-environment-volume-get-regexp "\\([0-9]+\\)")
      (desktop-environment-volume-normal-increment "-i 5 --allow-boost")
      (desktop-environment-volume-normal-decrement "-d 5")
      (desktop-environment-volume-toggle-command "pamixer -t")
      (desktop-environment-screenlock-command "xsecurelock"))

    (use-package bluetooth :after (exwm) :straight t)

    (use-package time
      :straight t
      :after (exwm)
      :custom
      (display-time-format "[%d/%b %H:%M]")
      :config
      (display-time-mode)
      (display-battery-mode)))
#+end_src

** User interface
*** Theme

Loading the preferred theme.

#+begin_src emacs-lisp
  (use-package minions
    :straight t
    :config
    (minions-mode 1))

  (if (display-graphic-p)
      (progn
        (if (equal system-type 'darwin)
  	  (set-frame-font "Lilex 17" nil t)
        	(set-frame-font "Lilex 14" nil t))
        (load-theme 'modus-vivendi t)
        (set-face-attribute 'mode-line nil :box nil)
        (set-face-attribute 'mode-line-inactive nil :box nil)
        (set-fringe-mode 0))
    (set-face-background 'default "undefined"))
#+end_src

** Completion

Trying some in-buffer completion framework that is not broken.

#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :config
    (vertico-mode)
    (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy))

  (use-package marginalia
    :straight t
    :init
    (marginalia-mode))

  (use-package savehist
    :straight t
    :init
    (savehist-mode))

  (use-package orderless
    :straight t
    :custom
    (completion-styles '(orderless basic)))

  (use-package corfu
    :straight (corfu :type git :host github :repo "minad/corfu" :commit "24dccafeea114b1aec7118f2a8405b46aa0051e0")
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    :init
    (global-corfu-mode)
    (corfu-popupinfo-mode))
#+end_src

** Files navigation

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :bind
    (("C-x C-d" . dired))
    :custom
    (ls-lisp-use-insert-directory-program nil)
    (ls-lisp-dirs-first t)
    (default-directory "~/"))

  (use-package dired-x
    :ensure nil
    :custom
    (dired-omit-files "^\\...+$")
    (dired-dwim-target t)
    (delete-by-moving-to-trash t)
    (dired-omit-files "^\\.[^.].+$")
    :init
    (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1))))

  ;; toggle disk usage
  (use-package disk-usage)  
#+end_src

** Files visualization
*** Open with

I want to open some files with external programs and =open-with= addresses this problem.

#+begin_src emacs-lisp
  (use-package openwith
    :straight t
    :config
    (setq openwith-associations '(
				  ("\\.mp4\\'" "mpv" (file))
				  ("\\.webm\\'" "mpv" (file))								
				  ("\\.mkv\\'" "mpv" (file))
				  ("\\.m4a\\'" "mpv --force-window" (file))
				  ("\\.ppt\\'" "libreoffice" (file))
				  ("\\.pptx\\'" "libreoffice" (file))
				  ("\\.doc\\'" "libreoffice" (file))
				  ("\\.docx\\'" "libreoffice" (file))
				  ))
    (openwith-mode t))
#+end_src
	
*** PDFs

I want to use =pdf-tools= to view and edit PDFs in a much better way.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :straight t
    :config
    (add-hook 'pdf-view-mode-hook #'pdf-links-minor-mode)
    (define-key pdf-view-mode-map (kbd "f") #'pdf-links-isearch-link)
    (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-tools-install))
    (add-hook 'pdf-view-mode-hook
  	      (lambda () (setq header-line-format nil))))
#+end_src
   
** Text editing
*** Undo tree

I really love the ~undo-tree~ mode visualization, so I'm going to enable it.

#+begin_src emacs-lisp
  (use-package undo-tree
    :straight t
    :custom
    (undo-tree-auto-save-history nil)
    (undo-tree-visualizer-relative-timestamps nil)
    :config
    (global-undo-tree-mode 1))
#+end_src

*** Avy

Move the cursor around like a velociraptor.

#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :after org
    :init
    (eval-after-load 'org
      (progn
	(define-key org-mode-map (kbd "C-c ,") nil)
	(define-key org-mode-map (kbd "C-c ;") nil)))
    :bind
    (("C-c ;" . avy-goto-line)
     ("C-c ," . avy-goto-char)))
#+end_src

** Personal knowledge management
*** Org mode

Org mode is the single most used package of my Emacs workflow.

#+begin_src emacs-lisp
  (use-package writeroom-mode
    :straight t
    :bind (("C-c w" . writeroom-mode)))
    
  (use-package org
    :straight t
    :bind (("C-c a" . org-agenda)
  	   ("C-c C-;" . org-insert-structure-template)
  	   ("C-c c" . org-capture)
  	   ("C-c C-z" . org-add-note)
  	   ("C-c o p" . org-do-promote)
  	   ("C-c o d" . org-do-demote)	   
  	   ("C-c l" . org-store-link))
    :custom
    (org-agenda-files (list "~/Vault/pkm/20240209T084736--journal__archive_personal.org" "~/Vault/pkm/20231210T220334--work-and-study-projects__personal_project.org" "~/Vault/pkm/20231210T220139--personal-projects__personal_project.org" "~/Vault/pkm/20231210T224321--agenda__personal.org" "~/Vault/pkm/20231211T145832--inbox__gtd_personal.org" "~/Vault/pkm/20231213T172757--capture-notes__gtd_personal.org"))
    (org-archive-location "~/Vault/pkm/archive/archive.org::* From %s")
    (org-export-backends '(beamer html latex ascii ox-hugo))
    (org-startup-folded t)
    (org-log-into-drawer t)
    (org-export-with-drawers nil)
    (org-clock-clocked-in-display 'mode-line)
    (org-clock-idle-time nil)
    (org-todo-keywords
     '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)")))
    (org-stuck-projects '("+project/" ("NEXT" "TODO") ("course") "\\(Details\\|Artifacts\\|Resources\\)\\>"))
    (org-log-done 'time)
    (org-agenda-hide-tags-regexp ".")
    (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
    (org-refile-use-outline-path 'file)
    (org-outline-path-complete-in-steps nil)
    (org-clock-sources '(agenda))
    :config
    ;; handle links with IDs
    (require 'subr-x)  ; Required for string-trim function
    (defun mg/extract-heading-name (heading)
      "Extract the heading name, handling text before links, links, and task indicators."
      ;; Remove task progress indicators like [1/1] and trim trailing spaces
      (setq heading (string-trim (replace-regexp-in-string "\\[\\([0-9]+\\)/\\([0-9]+\\)\\]\\s-*" "" heading)))
      ;; Function to extract and concatenate text before the link and the link description
      (let ((start 0) (parts '()))
  	(while (string-match "\\(.*?\\)\\(\\[\\[.*?\\]\\[\\(.*?\\)\\]\\]\\)" heading start)
  	  (push (match-string 1 heading) parts)  ; Text before the link
  	  (push (match-string 3 heading) parts)  ; Link description
  	  (setq start (match-end 0)))
  	(push (substring heading start) parts)  ; Remaining text after last link
  	(string-join (reverse parts) "")))
    ;; The function below works fine but it is deprecated in my workflow since Protesialos implemented it
    ;; directly in denote.
    (defun mg/org-create-or-store-id ()
      "Create an ID for the Org heading at point. If already existent, simply copy it."
      (interactive)
      (save-excursion
  	(org-back-to-heading)
  	(let* ((id (org-id-get-create))
  	       (heading-title (mg/extract-heading-name (org-get-heading t t t)))
  	       (link (format "[[id:%s][%s]]" id heading-title)))
  	  (kill-new link))))
    (defun mg/get-today-timestamp ()
      "Helper function to get today's timestamp with the abbreviated day name"
      (format-time-string "%Y-%m-%d %a"))
    (setq org-capture-templates
  	  '(("i" "Inbox")
  	    ("it" "Todo entry" entry (file "~/Vault/pkm/20231211T145832--inbox__gtd_personal.org")
  	     "* TODO %? :inbox:\n:PROPERTIES:\n:CATEGORY: INBOX\n:END:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:")
  	    ("im" "Mail entry" entry (file "~/Vault/pkm/20231211T145832--inbox__gtd_personal.org")
  	     "* TODO Process \"%a\" %? :inbox:\n:PROPERTIES:\n:CATEGORY: INBOX\n:END:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:")
  	    ("in" "Notes entry" entry (file "~/Vault/pkm/20231213T172757--capture-notes__gtd_personal.org")
  	     "* %U (%a) :inbox:\n:PROPERTIES:\n:CATEGORY: INBOX\n:END:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:")
  	    ("a" "Agenda")
  	    ("am" "Meeting entry" entry (file+headline "~/Vault/pkm/20231210T224321--agenda__personal.org" "Future")
  	     "* Meeting with %? :meeting:\n:PROPERTIES:\n:LOCATION:\n:NOTIFY_BEFORE:\n:CATEGORY: %^{Category}\n:END:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:\n%^T\n")
  	    ("ae" "Event entry" entry (file+headline "~/Vault/pkm/20231210T224321--agenda__personal.org" "Future")
  	     "* %? :event:\n:PROPERTIES:\n:LOCATION:\n:CATEGORY:\n:NOTES:\n:NOTIFY_BEFORE:\n:END:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:\n%^T\n")
  	    ("ac" "Call entry" entry (file+headline "~/Vault/pkm/20231210T224321--agenda__personal.org" "Future")
  	     "* Call with %? :call:\n:PROPERTIES:\n:CATEGORY:\n:NOTIFY_BEFORE:\n:END:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:\n%^T\n")
  	    ("j" "Journal")
  	    ("jt" "Journal time blocking entry" plain (file+datetree "~/Vault/pkm/20240209T084736--journal__archive_personal.org") "**** %U: time blocking\t\t:timeblocking:\n- Day plans :: \n- Main challenges :: \n- Work check-in/check-out :: \n***** Deep work morning session\n<%(concat (mg/get-today-timestamp) \" 07:00-11:00\")>\n- [ ] Task :: <link>\n- Outcome :: \n***** Deep work afternoon session\n<%(concat (mg/get-today-timestamp) \" 13:30-15:30\")>\n- [ ] Task :: <link>\n- Outcome :: \n***** Shallow work afternoon session\n<%(concat (mg/get-today-timestamp) \" 15:30-17:00\")>\n- [ ] Task :: <link>\n- Outcome :: \n%?")
  	    ("je" "Journal general entry" plain (file+datetree+prompt "~/Vault/pkm/20240209T084736--journal__archive_personal.org") "**** %U: %?\n")
  	    ("r" "Resources")
  	    ("ra" "Conference attendance" entry
  	     (file "~/Vault/pkm/20231210T222135--conferences__personal_research.org")
  	     "* %^{Conference name}\n:PROPERTIES:\n:WHERE: %?\n:WEBSITE: %?\n:END:\n")
  	    ("P" "Planning")
  	    ("Py" "Year plan" plain (file "~/Vault/pkm/20240104T191508--planning__personal_planning.org")
  	     "* %^{Year} %U\n- Overview ::\n- Feelings :: %^{Feelings|good|neutral|bad}\n- Milestones ::\n- Values and life philosophy ::\n- 5 years vision(s) ::\n- Financial goals ::\n- [ ] Review ::\n")
  	    ("Pq" "Quarter plan" plain (file "~/Vault/pkm/20240104T191508--planning__personal_planning.org")
  	     "** %^{Quarter} %U\n- Overview ::\n- Feelings :: %^{Feelings|good|neutral|bad}\n- Long-term projects ::\n- Financial/expenses planning ::\n- [ ] Review ::\n")
  	    ("Pm" "Month plan" plain (file "~/Vault/pkm/20240104T191508--planning__personal_planning.org")
  	     "*** %^{Month} %U\n- Overview ::\n- Feelings :: %^{Feelings|good|neutral|bad}\n- Short-term projects ::\n- [ ] Review ::\n")
  	    ("f" "Flashcards")
  	    ("fc" "Computer science flashcard" entry (file+headline "~/Vault/pkm/20240220T165813--flashcards__learning_personal.org" "Computer science") "* %^{Heading title}\n:PROPERTIES:\n:ANKI_DECK: Computer science\n:ANKI_NOTE_TYPE: %^{Anki note type}\n:END:\n** Front\n%?\n** Back\n")
  	    ("fs" "Security flashcard" entry (file+headline "~/Vault/pkm/20240220T165813--flashcards__learning_personal.org" "Security") "* %^{Heading title}\n:PROPERTIES:\n:ANKI_DECK: Security\n:ANKI_NOTE_TYPE: %^{Anki note type}\n:END:\n** Front\n%?\n** Back\n")
  	    ("fm" "Mathematics flashcard" entry (file+headline "~/Vault/pkm/20240220T165813--flashcards__learning_personal.org" "Mathematics") "* %^{Heading title}\n:PROPERTIES:\n:ANKI_DECK: Mathematics\n:ANKI_NOTE_TYPE: %^{Anki note type}\n:END:\n** Front\n%?\n** Back\n")  	    
  	    ("fe" "English flashcard" entry (file+headline "~/Vault/pkm/20240220T165813--flashcards__learning_personal.org" "English") "* %^{Heading title}\n:PROPERTIES:\n:ANKI_DECK: English\n:ANKI_NOTE_TYPE: %^{Anki note type}\n:END:\n** Front\n%?\n** Back\n")  	    
  	    ("p" "Projects")
  	    ("pl" "Learning project" plain (file+headline "~/Vault/pkm/20231210T220139--personal-projects__personal_project.org" "Learning")
  	     "** %^{Project name} [/]\n:PROPERTIES:\n:WHAT: %?\n:REPOSITORY:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")
  	    ("ph" "Home project" plain (file+headline "~/Vault/pkm/20231210T220139--personal-projects__personal_project.org" "Home")
  	     "** %^{Project name} [/]\n:PROPERTIES:\n:WHAT: %?\n:REPOSITORY:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")
  	    ("pm" "Misc project" plain (file+headline "~/Vault/pkm/20231210T220139--personal-projects__personal_project.org" "Misc")
  	     "** %^{Project name} [/]\n:PROPERTIES:\n:WHAT: %?\n:REPOSITORY:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")
  	    ("pw" "Work project" plain (file+headline "~/Vault/pkm/20231210T220334--work-and-study-projects__personal_project.org" "Work")
  	     "** %? [/]\n:PROPERTIES:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")
  	    ("ps" "Study project" plain (file+headline "~/Vault/pkm/20231210T220334--work-and-study-projects__personal_project.org" "Study")
  	     "** %? [/]\n:PROPERTIES:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")))
    ;; setting up org-refile
    (setq org-refile-targets '(("~/Vault/pkm/20231210T220334--work-and-study-projects__personal_project.org" :regexp . "\\(?:\\(?:Log\\|Task\\)s\\)")
  			       ("~/Vault/pkm/20231210T220139--personal-projects__personal_project.org" :regexp . "\\(?:\\(?:Log\\|Task\\)s\\)")
  			       ("~/Vault/pkm/20231210T224321--agenda__personal.org" :regexp . "\\(?:Past\\)")))
    (define-key global-map (kbd "C-c i") 'mg/org-capture-inbox)
    ;; Org-agenda custom commands
    (setq org-agenda-block-separator "==============================================================================")
    (setq org-agenda-custom-commands
  	  '(("a" "Agenda"
  	     ((agenda ""
  		      ((org-agenda-span 1)
  		       (org-agenda-skip-function
  			(lambda ()
  			  (or (org-agenda-skip-entry-if 'regexp ":framework:")
  			      (org-agenda-skip-entry-if 'done))))
  		       (org-deadline-warning-days 0)
  		       (org-scheduled-past-days 14)
  		       (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
  		       (org-agenda-format-date "%A %-e %B %Y")
  		       (org-agenda-overriding-header "Today's schedule:\n")))
  	      (agenda ""
  		      ((org-agenda-span 1)
  		       (org-agenda-skip-function
  			(lambda ()
  			  (or (org-agenda-skip-entry-if 'notregexp ":framework:")
  			      (org-agenda-skip-entry-if 'done))))
  		       (org-deadline-warning-days 0)
  		       (org-scheduled-past-days 14)
  		       (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
  		       (org-agenda-format-date "%A %-e %B %Y")			
  		       (org-agenda-overriding-header "Today's framework:\n")))
  	      (todo "NEXT"
  		    ((org-agenda-skip-function
  		      '(org-agenda-skip-entry-if 'deadline))
  		     (org-agenda-prefix-format "  %i %-12:c [%e] ")
  		     (org-agenda-overriding-header "\nNEXT Tasks:\n")))
  	      (agenda "" ((org-agenda-time-grid nil)
  			  (org-agenda-start-day "+1d")
  			  (org-agenda-start-on-weekday nil)
  			  (org-agenda-span 30)
  			  (org-agenda-show-all-dates nil)
  			  (org-deadline-warning-days 0)
  			  (org-agenda-entry-types '(:deadline))
  			  (org-agenda-skip-function '(org-agenda-skip-entry-if 'done))
  			  (org-agenda-overriding-header "\nUpcoming deadlines (+30d):\n")))
  	      (tags-todo "inbox"
  			 ((org-agenda-prefix-format "  %?-12t% s")
  			  (org-agenda-overriding-header "\nInbox:\n")))
  	      (tags "CLOSED>=\"<today>\""
  		    ((org-agenda-overriding-header "\nCompleted today:\n")))
  	      (agenda ""
  		      ((org-agenda-start-on-weekday nil)
  		       (org-agenda-skip-function
  			(lambda ()
  			  (or (org-agenda-skip-entry-if 'regexp ":framework:")
  			      (org-agenda-skip-entry-if 'done))))
  		       (org-agenda-start-day "+1d")
  		       (org-agenda-span 5)
  		       (org-deadline-warning-days 0)
  		       (org-scheduled-past-days 0)
  		       (org-agenda-overriding-header "\nWeek at a glance:\n")))
  	      ))))
    (when (display-graphic-p)
      (progn
  	(require 'oc-biblatex)
  	(setq org-cite-export-processors
  	      '((latex biblatex)))
  	(setq org-latex-pdf-process (list
  				     "latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f"))
  	))
    (setq org-format-latex-options
  	  (plist-put org-format-latex-options :scale 1.5))
    (setq org-format-latex-options
  	  (plist-put org-format-latex-options :background "Transparent"))
    (setq org-latex-create-formula-image-program 'dvisvgm)
    (require 'ox-latex)
    (add-to-list 'org-latex-classes
  		 '("res"
  		   "\\documentclass[margin]{res}\n
  \\setlength{\textwidth}{5.1in}"
  		   ("\\section{%s}" . "\\section*{%s}")
  		   ("\\subsection{%s}" . "\\subsection*{%s}")
  		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
  		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
  		 '("memoir"
  		   "\\documentclass[article]{memoir}\n
  \\usepackage{color}
  \\usepackage{amssymb}
  \\usepackage{gensymb}
  \\usepackage{nicefrac}
  \\usepackage{units}"
  		   ("\\section{%s}" . "\\section*{%s}")
  		   ("\\subsection{%s}" . "\\subsection*{%s}")
  		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
  		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
  		 '("letter"
  		   "\\documentclass{letter}\n"
  		   ("\\section{%s}" . "\\section*{%s}")
  		   ("\\subsection{%s}" . "\\subsection*{%s}")
  		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
  		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes	       
  		 '("tuftebook"
  		   "\\documentclass{tufte-book}\n
  \\usepackage{color}
  \\usepackage{amssymb}
  \\usepackage{gensymb}
  \\usepackage{nicefrac}
  \\usepackage{units}"
  		   ("\\section{%s}" . "\\section*{%s}")
  		   ("\\subsection{%s}" . "\\subsection*{%s}")
  		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
  		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
  		 '("tuftehandout"
  		   "\\documentclass{tufte-handout}
  \\usepackage{color}
  \\usepackage{amssymb}
  \\usepackage{amsmath}
  \\usepackage{gensymb}
  \\usepackage{nicefrac}
  \\usepackage{units}"
  		   ("\\section{%s}" . "\\section*{%s}")
  		   ("\\subsection{%s}" . "\\subsection*{%s}")
  		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
  		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
  		 '("tufnotes"
  		   "\\documentclass{tufte-handout}
  				     \\usepackage{xcolor}
  					   \\usepackage{graphicx} %% allow embedded images
  					   \\setkeys{Gin}{width=\\linewidth,totalheight=\\textheight,keepaspectratio}
  					   \\usepackage{amsmath}  %% extended mathematics
  					   \\usepackage{booktabs} %% book-quality tables
  					   \\usepackage{units}    %% non-stacked fractions and better unit spacing
  					   \\usepackage{multicol} %% multiple column layout facilities
  					   \\RequirePackage[many]{tcolorbox}
  					   \\usepackage{fancyvrb} %% extended verbatim environments
  					     \\fvset{fontsize=\\normalsize}%% default font size for fancy-verbatim environments

  			    \\definecolor{g1}{HTML}{077358}
  			    \\definecolor{g2}{HTML}{00b096}

  			    %%section format
  			    \\titleformat{\\section}
  			    {\\normalfont\\Large\\itshape\\color{g1}}%% format applied to label+text
  			    {\\llap{\\colorbox{g1}{\\parbox{1.5cm}{\\hfill\\color{white}\\thesection}}}}%% label
  			    {1em}%% horizontal separation between label and title body
  			    {}%% before the title body
  			    []%% after the title body

  			    %% subsection format
  			    \\titleformat{\\subsection}%%
  			    {\\normalfont\\large\\itshape\\color{g2}}%% format applied to label+text
  			    {\\llap{\\colorbox{g2}{\\parbox{1.5cm}{\\hfill\\color{white}\\thesubsection}}}}%% label
  			    {1em}%% horizontal separation between label and title body
  			    {}%% before the title body
  			    []%% after the title body

  							  \\newtheorem{note}{Note}[section]

  							  \\tcolorboxenvironment{note}{
  							   boxrule=0pt,
  							   boxsep=2pt,
  							   colback={green!10},
  							   enhanced jigsaw, 
  							   borderline west={2pt}{0pt}{Green},
  							   sharp corners,
  							   before skip=10pt,
  							   after skip=10pt,
  							   breakable,
  						    }"

  		   ("\\section{%s}" . "\\section*{%s}")
  		   ("\\subsection{%s}" . "\\subsection*{%s}")
  		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
  		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (org-babel-do-load-languages
     'org-babel-load-languages '((C . t)
  				 (shell . t)
  				 (python .t)
  				 (emacs-lisp . t)
  				 (org . t)
  				 (gnuplot . t)
  				 (latex . t)
  				 (scheme . t)
  				 (lisp . t)
  				 (haskell . t)
  				 (R . t))))

  (use-package org-wild-notifier
    :straight t
    :custom
    (org-wild-notifier-notification-title "Org agenda reminder")
    (org-wild-notifier-alert-times-property "NOTIFY_BEFORE")
    :config
    (org-wild-notifier-mode))

  (use-package org-timeblock
    :bind (("C-c p t" . org-timeblock))
    :straight t)
#+end_src

**** Encrypting

Enabling =org-crypt= support as it is automatically installed with =org-mode= itself.

#+begin_src emacs-lisp
  ;; enable and set org-crypt
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))

  ;; GPG key to use for encryption
  (setq org-crypt-key nil)
#+end_src

**** Org-noter

Install org-noter to deal with PDF notes.

#+begin_src emacs-lisp
  (use-package org-noter
    :bind ("C-c r" . org-noter)
    :straight t
    :custom
    (org-noter-auto-save-last-location t))
#+end_src

*** PKM utils

Functions and utilities I do heavily use when working on pkm pages.

#+begin_src emacs-lisp
  (defun mg/pkm-clean ()
    "execute the pkm clean script directly from emacs"
    (interactive)
    (progn
      (start-process "" nil "~/.scripts/pkm-clean")
      (message "pkm clean executed")))

  (defun mg/check-and-toggle-deepwork-mode ()
    "Check if deepwork-mode is enable, if so disable it, otherwise enable it"
    (interactive)
    (save-excursion
      (with-current-buffer (find-file-noselect "/etc/hosts")
	(goto-char (point-min))
	(let ((default-directory "/sudo::/home/claudio/.scripts"))
	  (progn
	    (shell-command (concat "./deepwork_mode" (when (search-forward "#gsd" nil t)
						       " --play")))))))
    (kill-buffer "hosts")
    (mg/check-deepwork-mode))

  (defun mg/check-deepwork-mode ()
    "Check if deepwork-mode is enable, if so disable it, otherwise enable it"
    (interactive)
    (save-excursion
      (with-current-buffer (find-file-noselect "/etc/hosts")
	(goto-char (point-min))
	(if (search-forward "#gsd" nil t)
	    (message "Deep work mode is enabled")
	  (message "Deep work mode is disabled"))))
    (kill-buffer "hosts"))

  (defun mg/toggle-pdf-presentation-mode ()
    (interactive)
    (toggle-frame-fullscreen)
    (hide-mode-line-mode)
    (pdf-view-fit-page-to-window))
#+end_src

*** Contacts management

Managing contacts with the ~bbdb~ package.

#+begin_src emacs-lisp
  (if (not (equal (system-name) "nano"))
      (use-package bbdb
        :straight t
        :commands bbdb
        :bind (("C-x c b" . bbdb)
  	     ("C-x c c" . bbdb-create))
        :custom
        (bbdb-mua-pop-up-window-size 1)
        (bbdb-file "~/Repositories/knock-files-private/bbdb/.bbdb")
        (bbdb-mua-pop-up t)
        (bbdb-mua-pop-up-window-size 5)
        :config
        (autoload 'bbdb-insinuate-mu4e "bbdb-mu4e")))
#+end_src

*** Note taking system

#+begin_src emacs-lisp
  (use-package denote
    :straight (denote :type git :host github :repo "protesilaos/denote" :branch "main")
    :bind (("C-c n n" . denote)
  	 ("C-c n x" . denote-region)
  	 ("C-c n N" . denote-type)
  	 ("C-c n d" . denote-date)
  	 ("C-c n f" . mg/denote-find)
  	 ("C-c n z f" . mg/denote-find-zettel)
  	 ("C-c n z i" . mg/denote-insert-zettel-link)
  	 ("C-c n y f" . denote-org-extras-dblock-insert-files)
  	 ("C-c n y l" . denote-org-extras-dblock-insert-links)
  	 ("C-c n y b" . denote-org-extras-dblock-insert-backlinks)
  	 ("C-c n y h" . denote-org-extras-link-to-heading)
  	 ("C-c n s" . denote-sort-dired)
  	 ("C-c n e n" . denote-silo-extras-create-note)
  	 ("C-c n e f" . denote-silo-extras-open-or-create)
  	 ("C-c n t" . denote-template)
  	 ("C-c n i" . denote-link)
  	 ("C-c n I" . denote-add-links)
  	 ("C-c n b" . denote-backlinks)
  	 ("C-c n g f" . denote-find-link)
  	 ("C-c n g b" . denote-finxd-backlink)
  	 ("C-c n r" . denote-rename-file)
  	 ("C-c n R" . denote-rename-file-using-front-matter))
    :init
    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
    :custom
    (denote-directory (expand-file-name "~/Vault/pkm"))
    (denote-known-keywords '("emacs" "security" "kernel" "mathematics" "algorithms"))
    (denote-infer-keywords t)
    (denote-sort-keywords t)
    (denote-file-type nil)
    (denote-prompts '(title keywords file-type template signature))
    (denote-excluded-directories-regexp nil)
    (denote-excluded-keywords-regexp nil)
    (denote-date-prompt-use-org-read-date t)
    (denote-date-format nil)
    (denote-backlinks-show-context t)
    (denote-silo-extras-directories
     (list denote-directory "/home/claudio/Vault/wpkm"))
    (denote-dired-directories
     (list denote-directory "/home/claudio/Vault/wpkm"
  	 (thread-last denote-directory (expand-file-name "assets"))))
    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
    (denote-templates
     '((plain . "")
       (course . "#+include: \"/home/claudio/Repositories/knock-files/org-headers/header_notes_document_small.org\"\n* Course details\n- Lecturer ::\n- University ::\n- Academic year ::\n- Resources ::\n- Description ::\n* Lecture notes\n* COMMENT Flashcards\n")
       (zettel . "#+references: \n\n\n-----\n")
       (place . "* Details\n- Link ::\n- Visited ::\n- Description ::\n* Notes\n")
       (contact . "* Contact details\n- E-mail ::\n- Company ::\n- Phone number ::\n- Website ::\n- Twitter ::\n- BBDB entry ::\n- Additional information ::\n* Notes")))
    (denote-date-prompt-use-org-read-date t)
    :config
    ;; (custom-set-variables '(org-link-parameters (quote (("store" . denote-link-ol-store)))))
    (defun mg/denote-find ()
      "Find files interactively starting from the denote-directory."
      (interactive)
      (let ((default-directory (concat denote-directory "/")))
        (call-interactively 'find-file)))
    (defun mg/get-zettel ()
      "Get a zettel file from `denote-directory` interactively"
      (let* ((candidates (directory-files denote-directory nil "==[0-9|a-b]*--"))
  	   (file-name (completing-read
  		       "Choose zettel: "
  		       candidates))
  	   (file-path (concat (concat denote-directory "/") file-name)))
        file-path))
    (defun mg/denote-find-zettel ()
      "Find zettels interactively starting from the denote-directory."
      (interactive)
      (find-file (mg/get-zettel)))
    (defun mg/denote-insert-zettel-link ()
      "Select a zettel from denote directory and insert its link at current point"
      (interactive)
      (let* ((file-path (mg/get-zettel))
  	   (file-description (denote--link-get-description file-path)))
        (denote-link file-path 'org file-description))))

  (use-package denote-menu
    :after (denote)
    :straight t
    :bind (("C-c n m" . list-denotes)))
#+end_src

**** Citar

Using the superior citation manager.

#+begin_src emacs-lisp
  (use-package citar
    :straight t
    :custom
    (org-cite-global-bibliography '("~/Vault/library/org/main/main.bib"))
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography org-cite-global-bibliography)
    :bind
    (("C-c n c o" . citar-open)
     (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))
    :config
    (setq citar-templates
  	  '((main . "${author editor:30}     ${date year issued:4}     ${title:48}")
  	    (suffix . "          ${=key= id:15}    ${=type=:12}")
  	    (preview . "${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher}.\n")
  	    (note . "@${author editor}, ${title}")))
    (setq citar-symbol-separator "  "))

  (use-package citar-denote
    :straight t
    :custom
    (citar-open-always-create-notes nil)
    (citar-denote-file-type 'org)
    (citar-denote-subdir nil)
    (citar-denote-keyword "bib")
    (citar-denote-use-bib-keywords nil)
    (citar-denote-title-format "title")
    (citar-denote-title-format-authors 1)
    (citar-denote-title-format-andstr "and")
    :init
    (citar-denote-mode)
    :bind (("C-c n c c" . citar-create-note)
  	   ("C-c n c n" . citar-denote-open-note)
  	   ("C-c n c d" . citar-denote-dwim)
  	   ("C-c n c e" . citar-denote-open-reference-entry)
  	   ("C-c n c a" . citar-denote-add-citekey)
  	   ("C-c n c k" . citar-denote-remove-citekey)
  	   ("C-c n c r" . citar-denote-find-reference)
  	   ("C-c n c f" . citar-denote-find-citation)
  	   ("C-c n c l" . citar-denote-link-reference)))
#+end_src

*** Spaced repetition learning

Spaced repetition is perhaps the only scientific approach to the learning process that has been discovered in the last years. Its effects are tangible and widely studied (see [[https://gwern.net/spaced-repetition]]). To this end, I use a connection between org-mode and [[https://apps.ankiweb.net/][Anki]] to conveniently write and review cards. I have used other org-centered alternatives (e.g., [[https://github.com/l3kn/org-fc][org-fc]] and [[https://orgmode.org/worg/org-contrib/org-drill.html][org-drill]]), but I think reviewing cards also /"on-the-go"/ through a mobile up is a potential speedup in the learning process. I take the use of Anki instead of org-centered alternatives as a test: in case it doesn't provide measurable benefits, I'll turn back.

#+begin_src emacs-lisp
  (use-package anki-editor
    :straight t
    :bind
    (("C-c o a i" . anki-editor-insert-note)
     ("C-c o a p" . anki-editor-push-notes)))
#+end_src

*** Markdown mode

I also modify files in markdown format.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
#+end_src
	
*** Spellchecking

Enabling spellchecking by default.

#+begin_src emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+end_src

** Finance

I use ledger to track my finances.

#+begin_src emacs-lisp
  (use-package ledger-mode
    :straight t)
#+end_src

** Email

Using ~mu4e~ as e-mail client.

#+begin_src emacs-lisp
  (unless (or (eq system-type 'darwin) (equal (system-name) "nano"))
    (use-package mu4e
      :straight t
      :commands (mu4e)
      :after (org)
      :bind (("C-x m" . mu4e))
      :init
      (global-set-key (kbd "C-x m") nil)
      :config
      (setq mu4e-compnose-complete-addresses t)
      (add-hook 'mu4e-compose-mode-hook
  	      (lambda () (setq fill-column 75)
  		(auto-fill-mode 1)))
      (define-key mu4e-headers-mode-map (kbd "C-c c") 'mu4e-org-store-and-capture)
      (define-key mu4e-view-mode-map    (kbd "C-c c") 'mu4e-org-store-and-capture)
      (defun mg/org-capture-mail ()
        (interactive)
        (call-interactively 'org-store-link)
        (org-capture nil "im"))
      (define-key mu4e-headers-mode-map (kbd "C-c i") 'mg/org-capture-mail)
      (define-key mu4e-view-mode-map    (kbd "C-c i") 'mg/org-capture-mail)
      (setq mu4e-maildir (expand-file-name "~/Maildir")
  	  mu4e-use-fancy-chars nil
  	  mu4e-attachment-dir  "~/Downloads"
  	  message-send-mail-function 'message-send-mail-with-sendmail
  	  sendmail-program "/usr/bin/msmtp"
  	  message-kill-buffer-on-exit t
  	  mu4e-get-mail-command "mbsync -a"
  	  mu4e-compose-signature "\tClaudio\n"
  	  mu4e-update-interval 300
  	  mu4e-context-policy 'pick-first
  	  mu4e-headers-auto-update t
  	  mu4e-contexts
  	  `(,(make-mu4e-context
  	      :name "polimi"
  	      :enter-func (lambda () (mu4e-message "Switch to the polimi context"))
  	      :match-func (lambda (msg)
  			    (when msg
  			      (mu4e-message-contact-field-matches msg
  								  :to "claudio.migliorelli@mail.polimi.it")))
  	      :vars '((mu4e-sent-folder       . "/polimi/sent")
  		      (mu4e-drafts-folder     . "/polimi/drafts")
  		      (mu4e-trash-folder      . "/polimi/trash")
  		      (user-mail-address	   . "claudio.migliorelli@mail.polimi.it")
  		      (user-full-name	   . "Claudio Migliorelli" )
  		      (mu4e-maildir-shortcuts . (("/polimi/INBOX" . ?i)
  						 ("/polimi/sent" . ?s)
  						 ("/polimi/drafts" . ?d)
  						 ("/polimi/trash" . ?t)))
  		      (mu4e-sent-messages-behavior . delete)))))
      (setq mu4e-headers-thread-single-orphan-prefix '("└>" . " ")
  	  mu4e-headers-thread-child-prefix '("└> " . " ")
  	  mu4e-headers-thread-last-child-prefix '("└> " . " ")
  	  mu4e-headers-thread-connection-prefix '("│ " . " ")
  	  mu4e-headers-thread-orphan-prefix '("└>" . " ")
  	  mu4e-headers-thread-root-prefix '("> " . " "))
      (with-eval-after-load "mm-decode"
        (add-to-list 'mm-discouraged-alternatives "text/html")
        (add-to-list 'mm-discouraged-alternatives "text/richtext"))
      (defun mg/message-insert-citation-line ()
        "Based off `message-insert-citation-line`."
        (when message-reply-headers
  	(insert "On " (format-time-string "%a, %d %b %Y %H:%M:%S %z" (date-to-time (mail-header-date message-reply-headers))) " ")
  	(insert (mail-header-from message-reply-headers) " wrote:")
  	(newline)
  	(newline)))
      (setq message-citation-line-function 'mg/message-insert-citation-line)))
#+end_src

** Browser

I use eww for quick search in a text-based format. Then, I also use engine-mode to quickly search stuff directly in emacs.

#+begin_src emacs-lisp
  (use-package engine-mode
    :straight t
    :config
    (engine/set-keymap-prefix (kbd "C-c u e"))
    (defun mg/engine-mode-exact-phrase-transform (search-term)
      (if current-prefix-arg
  	(concat "\"" search-term "\"")
        search-term))
    (defengine archwiki
      "https://wiki.archlinux.org/index.php?search=%s"
      :keybinding "a")
    (defengine google
      "http://www.google.com/search?hl=en&ie=utf-8&oe=utf-8&q=%s"
      :keybinding "g"
      :term-transformation-hook mg/engine-mode-exact-phrase-transform)
    (defengine elixir
      "https://elixir.bootlin.com/linux/latest/A/ident/%s"
      :keybinding "k")
    (defengine kernel-documentation
      "https://www.kernel.org/doc/html/v4.12/core-api/kernel-api.html#c.%s"
      :keybinding "d")
    (defengine syscall-table
      "https://syscalls.mebeim.net/?table=x86/64/x64/latest"
      :keybinding "s")
    (defengine google-maps
      "https://www.google.com/maps/search/%s/"
      :keybinding "M")
    (defengine openstreetmap
      "https://www.openstreetmap.org/search?query=%s"
      :keybinding "m")
    (defengine wordreference-iten
      "https://www.wordreference.com/iten/%s"
      :keybinding "i")
    (defengine wordreference-enit
      "https://www.wordreference.com/enit/%s"
      :keybinding "e")
    (defengine wikipedia
      "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
      :keybinding "w")
    (defengine youtube
      "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
      :keybinding "y")
    (engine-mode t))
#+end_src

** RSS reader

Using elfeed as my preferred RSS feed manager.

#+begin_src emacs-lisp
  (use-package elfeed
    :straight t
    :bind (("C-c e" . elfeed))
    :custom
    (elfeed-feeds
     '("https://news.ycombinator.com/rss"
       "https://seclists.org/rss/fulldisclosure.rss"
       "https://ournextlife.com/feed/"
       "https://www.frugalwoods.com/feed/"
       "https://moretothat.com/feed/"
       "https://calnewport.com/feed/"
       "https://xkcd.com/atom.xml"
       "https://feeds.feedburner.com/TheHackersNews?format=xml"
       "https://www.kernel.org/feeds/kdist.xml"
       "https://9to5linux.com/feed/atom"
       "https://fs.blog/feed/"
       "https://www.phoronix.com/rss.php"
       "https://www.schneier.com/feed/")))
#+end_src

** Coding stuff
*** Git

Using ~magit~ as git client for Emacs. I think it is, along with ~org-mode~, the most impactful Emacs package ever. There is nothing more to add I think. Besides ~magit~, I used ~git-email~, which is a simple package that allows to send e-mails with git patches directly in Emacs. Starting from Emacs 29, they introduced ~vc-prepare-patch~ natively, which basically covers the same features of ~git-email~ (see [[https://lists.sr.ht/~yoctocell/git-email-devel/%3Ccc4a1b8b-9a1d-46cf-9b04-466c85ebcd44%40riseup.net%3E]]).

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :config
    (setf (alist-get 'unpushed magit-section-initial-visibility-alist) 'show)
    (setq magit-refresh-status-buffer t)
    (setq git-commit-fill-column 75))
#+end_src

*** Paraphernalia

These are useful tweaks I use when coding. I plan not to divide this into further subcategories, rather they we'll be all grouped together. I use a cool package that helps me writing/editing code efficiently? Well, it will be placed here for sure.

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :after (org)
    :straight t
    :bind (
  	 ("C-c m >" . #'mc/mark-next-like-this)
  	 ("C-c m <" . #'mc/mark-previous-like-this)
  	 ("C-c m -" . #'mc/mark-next-like-this-word)
  	 ("C-c m e" . 'mc/mark-more-like-this-extended)
  	 ("C-c m s" . 'mc/mark-all-dwim)
  	 ("C-c m a" . mc/mark-all-like-this)
  	 ("C-c m r" . mc/mark-all-in-region)
  	 ("C-c m d" . mc/mark-all-like-this-dwim)
  	 ("C-c m w" . mc/mark-all-words-like-this))
    :config
    (define-key mc/keymap (kbd "<return>") nil)
    (multiple-cursors-mode 1))

  (use-package ztree
    :straight t)

  (use-package deadgrep
    :straight t
    :bind
    (("M-g r" . deadgrep)))

  (use-package hl-todo
    :straight t
    :hook ((prog-mode . hl-todo-mode)
  	 (org-mode . hl-todo-mode))
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold))))

  (use-package xcscope
    :straight t
    :bind
    (("C-c s s" . cscope-find-this-symbol)
     ("C-c s d" . cscope-find-global-definition)
     ("C-c s c" . cscope-find-functions-calling-this-function)
     ("C-c s x" . cscope-set-initial-directory)
     ("C-c s f" . cscope-find-this-file))
    :config
    (cscope-setup))
#+end_src

*** Snippets

Using some snippets to make my writing experience faster. I used ~abbrev-mode~ in the past, but I think ~yasnippet~ has an overall better experience and functionality. I have been looking at [[https://github.com/minad/tempel][Tempel]] for quite some time now: it is simpler and this is a big plus for me. However, ~yasnippet~ has a very well built integration with ~eglot~, which is the LSP package that I use (natively shipped with Emacs 29).

#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    :custom
    (yas-snippet-dirs (list "~/.emacs.d/.snippets"))
    :config
    (yas-global-mode 1))
#+end_src

*** Tramp term

Using tramp term to connect to ssh instances and edit files. This is a crucial package since I use Docker containers extensively, and it allows to smoothly connect to a Docker container, edit files in it directly through Emacs and quickly spawn a terminal if needed (in my setting, with just ~"C-c v"~ thanks to ~multi-vterm~, to be reviewed after in this configuration file). Note that ~tramp~ has a known bug with Emacs 29.1, so it shouldn't be installed in that case.

#+begin_src emacs-lisp
  (unless (string-equal emacs-version "29.1")
    (use-package tramp
      :straight t
      :init
      (setq tramp-default-method "ssh")))
#+end_src

*** LSP

Setting up Emacs as an IDE, for the most comprehensive experience as possible. The only thing I think I'm missing is a decent client for ~gdb~, which is something I plan to do in the next months (@[2024-02-18 Sun 11:30]). The code below is basically a setup of some configuration options for ~eglot~ (already shipped with Emacs 29) and the declarations for some programming modes. I used ~lsp-mode~ in the past, but I think ~eglot~ has the perfect balance between simplicity and feature-richness.

#+begin_src emacs-lisp
  (setq tab-always-indent 'complete)

  (use-package dockerfile-mode
    :straight t
    :mode "\\.docker.file\\'" "\\Dockerfile\\'")

  (use-package haskell-mode
    :straight t
    :mode "\\.hs\\'")

  (use-package racket-mode
    :straight t
    :mode "\\.rkt\\'")

  (use-package python-mode
    :straight t
    :mode "\\.py\\'")

  (use-package edts
    :straight t)

  (use-package erlang-mode
    :ensure nil
    :after (edts)
    :mode "\\.erl\\'")

  (use-package nasm-mode
    :straight t)

  (use-package gnuplot
    :straight t)

  (use-package eglot
    :ensure nil
    :config
    (add-to-list 'eglot-server-programs
  		 '((c-mode c++-mode)
  		   . ("clangd")))
    (add-to-list 'eglot-server-programs
  		 '((racket-mode)
  		   . ("racket")))
    (add-hook 'c-mode-hook 'eglot-ensure)
    (add-hook 'bison-mode-hook 'eglot-ensure)
    (add-hook 'haskell-mode-hook 'eglot-ensure)
    (add-hook 'erlang-mode-hook 'eglot-ensure)  
    (add-hook 'python-mode-hook 'eglot-ensure))
#+end_src

*** Which key

Using which key to remind what keybinds to use to perform actions. This is convenient because I often forget some keybindings that are not constantly part of my workflow. The idea of ~which-key~ is to pop a small list in the minibuffer showing pairs of ~(<next_key>, <emacs-command>)~ to facilitate the choice of pressing the next key in the sequence of keys for launching a certain Emacs command.

#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

*** Terminal

I use ~vterm~ as terminal inside Emacs. I always used it and never felt the need to move to some other terminal emulator. To spawn multiple instance of ~vtem~ easily I use ~multi-vterm~ and bit it to ~C-c v~, which is quite convenient.

#+begin_src emacs-lisp
  (use-package vterm
    :straight t)

  (use-package multi-vterm
    :straight t
    :bind (("C-c v" . multi-vterm)))
#+end_src
* Misc custom functions

Adding some custom functions I use to make my life easier.

#+begin_src emacs-lisp
  (defun mg/new-empty-buffer ()
     "Create a new empty buffer"
     (interactive)
     (let ((mbuf (generate-new-buffer "untitled")))
       (switch-to-buffer mbuf)
       (funcall initial-major-mode)
       mbuf
       ))

  (defun mg/shutdown-with-confirmation ()
    "Ask for confirmation and shut down the system if confirmed."
    (interactive)
    (when (yes-or-no-p "Are you sure you want to shut down the system? ")
      (shell-command "/usr/sbin/shutdown now")))

  (defun mg/take-screenshot ()
    "Take a screenshot using 'scrot'"
    (interactive)
    ;; Generate the screenshot filename with a timestamp
    (let ((screenshot-name (format-time-string "/home/claudio/Vault/pkm/assets/%Y-%m-%d-%H-%M_screenshot_RENAME.png")))
      ;; Take the screenshot
      (shell-command (concat "/usr/bin/scrot -s " screenshot-name))))

  (defun mg/split-on-ultrawide ()
    "Utility function used to quickly split the workspace in 3 buffers, convenient for ultrawide monitors"
    (interactive)
    (save-excursion
      (progn
  	(split-window-horizontally)
  	(split-window-vertically)
  	)))

  (defun mg/copy-file-name-to-clipboard ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
  			default-directory
  		      (buffer-file-name))))
      (when filename
  	(kill-new filename)
  	(message "Copied buffer file name '%s' to the clipboard." filename))))

  ;; enable pdf presentation mode
  (use-package hide-mode-line
    :straight t)

  (defun mg/display-machine-info()
    (interactive)
    (message "System-level info => %s" (concat
  					(format "BAT: %s- " (shell-command-to-string "~/.config/scripts/battery.sh"))
  					(format "CPU: %s - " (shell-command-to-string "~/.config/scripts/cpu.sh"))			    
  					(format "MEM: %s - " (shell-command-to-string "~/.config/scripts/ram.sh"))
  					(format "DSK: %s - " (shell-command-to-string "~/.config/scripts/disk.sh"))
  					(format "VOL: %s " (shell-command-to-string "~/.config/scripts/volume.sh")))))

  (defun mg/find-docker-and-enter-in-assets ()
    "Find the running docker container and enter into the assets folder"
    (interactive)
    (let ((docker-id (replace-regexp-in-string "\n$" "" (shell-command-to-string "docker container ls | awk 'NR > 1 {print $1}' "))))
      (find-file (concat "/docker:claudio@" docker-id ":/assets"))))

  (defun mg/insert-current-timestamp ()
    "Insert current y-m-d timestamp"
    (interactive)
    (insert "[" (format-time-string "%y-%m-%d" (current-time)) "] "))
#+end_src
* Keybindings

This is the list of keybindings I use.

#+begin_src emacs-lisp
  ;; pkm custom functions
  (global-set-key (kbd "C-c p l") #'mg/org-create-or-store-id)
  (global-set-key (kbd "C-c p e") #'mg/pkm-clean)
  (global-set-key (kbd "C-c p c") #'mg/org-capture-notes)
  (global-set-key (kbd "C-c p s") #'mg/take-screenshot)

  ;; utils related bindings
  (global-set-key (kbd "M-n") #'forward-paragraph)
  (global-set-key (kbd "M-p") #'backward-paragraph)
  (global-set-key (kbd "C-c u p") #'mg/toggle-pdf-presentation-mode)
  (global-set-key (kbd "C-c u d t") #'mg/check-and-toggle-deepwork-mode)
  (global-set-key (kbd "C-c u d c") #'mg/check-deepwork-mode)
  (global-set-key (kbd "C-c u f") #'mg/copy-file-name-to-clipboard)
  (global-set-key (kbd "C-c u s i") #'mg/display-machine-info)
  (global-set-key (kbd "C-c u s s") #'mg/shutdown-with-confirmation)
  (global-set-key (kbd "C-c u r s") #'replace-string)
  (global-set-key (kbd "C-c u r q") #'query-replace-regexp)
  (global-set-key (kbd "C-c u r r") #'query-replace)
  (global-set-key (kbd "C-c u r c") #'comment-region)
  (global-set-key (kbd "C-c u r u") #'uncomment-region)
  (global-set-key (kbd "C-c u r i") #'indent-region)
  (global-set-key (kbd "C-c u r a r") #'align-regexp)
  (global-set-key (kbd "C-c u r a e") #'align-entire)
  (global-set-key (kbd "C-c u n") #'mg/new-empty-buffer)
  (global-set-key (kbd "C-c u c d") #'mg/find-docker-and-enter-in-assets)
  (global-set-key (kbd "C-c u c w") #'whitespace-mode)
  (global-set-key (kbd "C-c u m") #'compile)
  (global-set-key (kbd "C-c u w u") #'mg/split-on-ultrawide)
  (global-set-key (kbd "C-c u w f") #'toggle-frame-fullscreen)
  (global-set-key (kbd "C-c u w m") #'toggle-frame-maximized)
  (global-set-key (kbd "C-c u t") #'mg/insert-current-timestamp)

  (global-set-key (kbd "C-x C-n") nil)
  (global-set-key (kbd "C-x C-p") nil)
  (global-set-key (kbd "C-x C-n") #'next-buffer)
  (global-set-key (kbd "C-x C-p") #'previous-buffer)
#+end_src
