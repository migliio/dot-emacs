:PROPERTIES:
:ID:       58382C3C-DCDE-4B47-A066-C40A5F131D1D
:END:
#+TITLE: Emacs configuration
#+AUTHOR: Claudio Migliorelli <claudio.migliorelli@mail.polimi.it>
#+macro: latest-export-date (eval (format-time-string "%Y-%m-%d, %A @ %I:%M %p"))
#+macro: word-count (eval (count-words (point-min) (point-max)))
#+macro: lines-count (eval (count-lines (point-min) (point-max)))
#+macro: file-creation-date (eval (file-attributes (f-this-file)))
#+options: toc:nil
*This file was revised and exported on {{{latest-export-date}}}, with a word count of {{{word-count}}} and a line count of {{{lines-count}}}.*

This is a literate GNU Emacs configuration file. It doesn't serve as an actual configuration file, but as a commentary on the configuration itself and generates all the source files used to modify and tweak the Emacs text editor. This file is therefore verbose, with prose describing each and every piece of code listed in it. This serves as a future reference for me to have a clue on why some design choices have been preferred with respect to others.
As of {{{latest-export-date}}}, the structure of this directory is organized as follows:
#+begin_src bash :wrap example :exports results
  tree -aF -L 2 -I 'straight|edts|elpa|.git|eln-cache|.headers|.gitignore|.gitmodules|.snippets|.locks|auto-save-list|url'
#+end_src

#+RESULTS:
#+begin_example
| ./  |                           |                                |       |
| ├── | .mg-emacs.org.~undo-tree~ |                                |       |
| ├── | LICENSE.md                |                                |       |
| ├── | init.el                   |                                |       |
| ├── | mg-custom-modules/        |                                |       |
| │   | ├──                       | mg-citar-denote.el             |       |
| │   | ├──                       | mg-defaults-extensions.el      |       |
| │   | ├──                       | mg-denote.el                   |       |
| │   | ├──                       | mg-emacs.el                    |       |
| │   | ├──                       | mg-exwm.el                     |       |
| │   | ├──                       | mg-kernel.el                   |       |
| │   | ├──                       | mg-macos.el                    |       |
| │   | ├──                       | mg-modeline.el                 |       |
| │   | ├──                       | mg-notmuch.el                  |       |
| │   | ├──                       | mg-org-gtd.el                  |       |
| │   | ├──                       | mg-org.el                      |       |
| │   | ├──                       | mg-pkm-utils.el                |       |
| │   | └──                       | mg-utils.el                    |       |
| ├── | mg-emacs-modules/         |                                |       |
| │   | ├──                       | mg-emacs-ai.el                 |       |
| │   | ├──                       | mg-emacs-bib.el                |       |
| │   | ├──                       | mg-emacs-browsing.el           |       |
| │   | ├──                       | mg-emacs-buffers-completion.el |       |
| │   | ├──                       | mg-emacs-buffers.el            |       |
| │   | ├──                       | mg-emacs-coding.el             |       |
| │   | ├──                       | mg-emacs-defaults.el           |       |
| │   | ├──                       | mg-emacs-denote.el             |       |
| │   | ├──                       | mg-emacs-exwm.el               |       |
| │   | ├──                       | mg-emacs-files.el              |       |
| │   | ├──                       | mg-emacs-flashcards.el         |       |
| │   | ├──                       | mg-emacs-git.el                |       |
| │   | ├──                       | mg-emacs-languages.el          |       |
| │   | ├──                       | mg-emacs-layouts.el            |       |
| │   | ├──                       | mg-emacs-ledger.el             |       |
| │   | ├──                       | mg-emacs-markup.el             |       |
| │   | ├──                       | mg-emacs-notmuch.el            |       |
| │   | ├──                       | mg-emacs-org.el                |       |
| │   | ├──                       | mg-emacs-package-managers.el   |       |
| │   | └──                       | mg-emacs-themes.el             |       |
| └── | mg-emacs.org              |                                |       |
|     |                           |                                |       |
| 3   | directories,              | 37                             | files |
#+end_example

In general, this configuration is organized using modules, each designed to introduce a set of packages for a specific purpose. The objective is to minimize the number of packages introduced within a single module to ensure a clear separation of concerns. Introducing too many packages at once reduces clarity.

I started using GNU Emacs at ~ [2020-04-30 Thu], and I've been tweaking and extensively using it since then. This will become quite evident when you go through this configuration file. Since I even use it as a window manager for X, it's not an exaggeration to say that I /very rarely/ exit Emacs. Each section of this document serves as introduction to a single module, and subsections focus on different core packages/configurations inside that module. Hope this becomes pretty self-explanatory throughout the document.

Therefore, the structure of this configuration file can be summarized as follows:
- The ~init.el~ source file :: This is the main point of entry for the entire configuration, and it is the source file read when Emacs is starting up. This file then loads the Emacs modules, which enable packages and functionalities for the editor;
- The ~mg-emacs-modules~ :: These are modules that loads Emacs packages, without introducing any custom functionalities. The only tweaking activity done by those source files is simple package configuration. Those source files may load custom libraries (see next entry);
- The ~mg-custom-modules~ :: These are custom modules written by me. Their goal is to introduce new functionalities, extend packages and tweak the Emacs editor. In other words, while ~mg-emacs-modules~ only "load" the packages and tweak their variables and options, ~mg-custom-modules~ modify and extend the behavior of both Emacs and its loaded packages.


#+toc: headlines 5

* The ~init.el~ source file

This file deals with the early initialization of the GNU Emacs editor. It is, indeed, the main source file that is loaded by Emacs when performing the startup. What it does is to activate ~emacs-server~ and then load all the other modules. There is a ~require~ statement for each module to load into the editor. There are several conditions to discriminate whether a module should be loaded based on which system Emacs is executing.

Just to mention it, I want a single instance of Emacs running in the background. This is even more important when I run it as the window manager for X [fn:1].

#+begin_src emacs-lisp :tangle "init.el"
  (require 'server)
  (unless (server-running-p)
    (server-start))

  (add-to-list 'load-path (expand-file-name
  			 "~/.emacs.d/mg-emacs-modules/"))
  (add-to-list 'load-path (expand-file-name
  			 "~/.emacs.d/mg-custom-modules/"))

  (require 'mg-emacs-package-managers)
  (require 'mg-emacs-defaults)
  (when (eq system-type 'gnu/linux)
    (require 'mg-emacs-exwm))
  (require 'mg-emacs-themes)
  (require 'mg-emacs-layouts)
  (require 'mg-emacs-buffers-completion)
  (require 'mg-emacs-files)
  (require 'mg-emacs-buffers)
  (require 'mg-emacs-markup)
  (require 'mg-emacs-org)
  (require 'mg-emacs-denote)
  (require 'mg-emacs-bib)
  (require 'mg-emacs-ledger)
  (require 'mg-emacs-flashcards)
  (require 'mg-emacs-notmuch)
  (require 'mg-emacs-languages)
  (require 'mg-emacs-browsing)
  (require 'mg-emacs-git)
  (require 'mg-emacs-coding)
  (when (eq system-type 'darwin)
    (require 'mg-emacs-ai))
#+end_src

* The ~mg-emacs-modules~
** The ~mg-emacs-package-managers.el~ module

The idea of this module is to initialize the package managers that I use. In my system, ~use-package~ and ~straight.el~ are used in conjunction, and I think that the flexibility they provide is simply amazing. I started using ~straight.el~ from [2024-01-30 Tue] and never regret that decision.

Thus, this module provides the bootstrapping phase for both the two package managers. From Emacs 29, ~use-package~ doesn't need to be installed anymore, it is built into Emacs. The code below just adds ~melpa~ as the list of sources and do ~package-initialize~. Just a required clarification: ~use-package~ is not a package manager, it is just a set of macros. For the sake of clarity, I called this module ~mg-emacs-package-managers.el~, although both ~use-package~ and ~straight.el~ are not strictly "package managers". In general, I don't care, and that's why I'll use this slight abuse of notation from now on.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-package-managers.el" :mkdirp yes
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (unless package--initialized (package-initialize))
#+end_src

Then, the module handles the bootstrapping phase of ~straight.el~ as well. The code below downloads the bootstrap file for ~straight.el~, in case it hasn't been already downloaded, and executes that file using ~load~. The more I use this editor extensively, the more it happens that I'd like to have features on "develop" branches for some packages, and having a declarative way to pull the package directly from its repository, specifying which branch we're interested in (or even which commit), feels very appealing.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-package-managers.el"

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
  	"straight/repos/straight.el/bootstrap.el"
  	(or (bound-and-true-p straight-base-dir)
  	    user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	(url-retrieve-synchronously
  	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  	 'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (provide 'mg-emacs-package-managers)
#+end_src

** The ~mg-emacs-defaults.el~ module

This module contains the initialization of some useful defaults that I use within Emacs.

When going through the module, you'll see that there is a condition checking if I'm running on MacOS, and, if that's the case, it loads a custom library, called ~mg-macos.el~ (see [[id:93f60f28-3019-4010-9012-f7897dc3b873][The ~mg-macos~ library]]). In fact, mainly when on laptops for work, I use Emacs also on MacOS and, thus, I needed some code to make the system work flawlessly on that operating system.

The code below is used to disable some boring modes like ~scroll-bar-mode~ and ~tool-bar-mode~, menus and the like, and to enable others that I find particularly useful, such as ~visual-mode~ and ~show-paren-mode~. Moreover, I have the definition of some defaults for locales and encoding.
Historically, this module enclosed a bunch of other customizations for variables related to specific modes (e.g., ~org-mode~, ~c-mode~). I found it confusing and even wrong in some cases. That's why now the idea is to tweak emacs-specific variables *only*.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-defaults.el"
  (use-package emacs
    :bind (("M-n" . forward-paragraph)
  	 ("M-p" . backward-paragraph)
  	 ("C-c u r s" . replace-string)
  	 ("C-c u r q" . query-replace-regexp)
  	 ("C-c u r r" . query-replace)
  	 ("C-c u r c" . comment-region)
  	 ("C-c u r u" . uncomment-region)
  	 ("C-c u r i" . indent-region)
  	 ("C-c u r a r" . align-regexp)
  	 ("C-c u r a e" . align-entire)
  	 ("C-c u c w" . whitespace-mode)
  	 ("C-c u m" . compile)
  	 ("C-c u x" . async-shell-command)
  	 ("C-c u w f" . toggle-frame-fullscreen)
  	 ("C-c u w m" . toggle-frame-maximized)
  	 ("C-x C-n" . next-buffer)
  	 ("C-x C-p" . previous-buffer))
    :init
    (global-set-key (kbd "C-x C-n") nil)
    (global-set-key (kbd "C-x C-p") nil)
    (defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))
    (defconst mg-dot-private-file "~/Repositories/knock-files-private")
    (defconst mg-emacs-root "~/.emacs.d")
    (defconst mg-sendmail-bin "/usr/bin/msmtp")
    (setq inhibit-startup-screen t
  	completion-cycle-threshold 3
  	tab-always-indent 'complete
  	create-lockfiles nil
  	user-emacs-directory (expand-file-name "~/.cache/emacs/")
  	url-history-file (expand-file-name "url/history" user-emacs-directory)
  	custom-file (if (boundp 'server-socket-dir)
  			(expand-file-name "custom.el" server-socket-dir)
  		      (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory))
  	backup-by-copying t
  	delete-old-versions t
  	kept-new-versions 6
  	kept-old-versions 2
  	message-send-mail-function 'message-send-mail-with-sendmail
  	sendmail-program mg-sendmail-bin
  	version-control t
  	auto-save-list-file-prefix emacs-tmp-dir
  	auto-save-file-name-transforms `((".*" ,emacs-tmp-dir t))
  	backup-directory-alist `((".*" . ,emacs-tmp-dir)))
    (setq-default frame-title-format '("%b")
  		ring-bell-function 'ignore
  		tab-width 8
  		frame-resize-pixelwise t
  		linum-format "%4d "
  		use-short-answers t
  		electric-indent-mode nil
  		make-backup-files nil
  		global-auto-revert-mode t
  		confirm-kill-processes nil
  		process-connection-type nil
  		org-src-fontify-natively t
  		;; warning-minimum-level :emergency
  		set-language-environment "UTF-8"
  		system-time-locale "C"
  		native-comp-async-report-warnings-errors nil)
    (load custom-file t)
    (add-hook 'window-setup-hook 'toggle-frame-maximized t)
    (add-to-list 'yank-excluded-properties 'face)
    (if (display-graphic-p)
        (dolist (mode
  	       '(tool-bar-mode
  		 scroll-bar-mode
  		 menu-bar-mode
  		 tooltip-mode
  		 blink-cursor-mode))
  	(funcall mode 0)))
    (dolist (mode
  	   '(global-visual-line-mode
  	     show-paren-mode))
      (funcall mode 1)))

  (use-package mg-macos
    :if (eq system-type 'darwin)
    :ensure nil
    :config
    (mg-macos-support-enable))

  (use-package mg-emacs
    :ensure nil
    :bind (("C-c p s" . mg-take-screenshot)
  	 ("C-c u f" . mg-add-current-file-name-to-killring)
  	 ("C-c u s i" . mg-show-machine-info)
  	 ("C-c u s s" . mg-shutdown-machine-with-confirmation)
  	 ("C-c u t" . mg-insert-today-timestamp-formatted)))

  (use-package mg-defaults-extensions
    :ensure nil
    :config
    (add-hook 'prog-mode-hook
  	    #'mg-line-numbers-highlight-line-mode))

  (use-package mg-utils
    :ensure nil)
#+end_src

The ~mg-line-numbers-highlight-line-mode~ minor mode is only used when the ~prog-mode~ major mode is enabled. There is no reason for my specific use cases to have line numbers outside of coding. However, I use this feature quite extensively when programming. In text editors like Emacs, relative line numbers add a 10x speed in the way you insert/remove/modify text.

Next, I enable ~which-key~ to remind me what keybinds to use to perform some actions. This is convenient because I often forget some keybindings that are not constantly part of my workflow. The idea of which-key is to pop a small list in the minibuffer showing pairs of ~(<next_key>, <emacs-command>)~ to facilitate the choice of pressing the next key in the sequence of keys for launching a certain Emacs command.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-defaults.el"
  (use-package which-key
    :straight t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

Starting from [2024-04-14 Sun], I decided to implement my own mode-line to keep things simple and under control. I thought there was so much wasted space in the default one, and most of the information were not completely clear. Now, I can immediately see whether I'm editing a local or remote file (i.e., by looking at either ~"@"~ or ~"^"~ characters on the left-hand side of the modeline), which derived mode I'm in, and whether the current buffer is in read-only mode. Those are all information already specified by the default modeline, but their arrangement and syntax was unclear to me. The below snippet flows into the ~mg-custom-modeline.el~ module.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-defaults.el"

  (use-package mg-modeline
    :ensure nil)

  (provide 'mg-emacs-defaults)
#+end_src

** The ~mg-emacs-exwm.el~ module
:PROPERTIES:
:ID:       f027d45b-3a55-450b-8d24-98e3a9530809
:END:

I use EXWM as X window manager on every Linux machine I own. I started using it ~ [2023-10-07 Sat] and never went back since then. The reason that moved me in adopting it is somehow trivial: I know Emacs, I know its keybindings, and I know how to tweak it. Having other tiling window manages, such as i3, bspwn, and the like, forces you to learn new, inconsistent and sometimes complex languages to configure them.

To give you an example, I tried AwesomeWM for a while. I was quite happy with it and I really enjoyed some of its minimalistic features and good flexibility. However, I was quite unhappy with Lua and I felt I was not really mastering the language the way I wanted to. Therefore, switching to an environment and language I knew was indeed a reasonable choice.

EXWM just works. There are no additional requirements needed, just Emacs and a couple of third-party tools for the system tray. Besides that, nothing else. This is exactly what I look for when adopting a new tool.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-exwm.el"
  (when (and (display-graphic-p) (not (eq system-type 'darwin)))
    (defun mg-exwm-update-class ()
      (exwm-workspace-rename-buffer exwm-class-name))
    (use-package exwm
      :straight t
      :config

      ;; Custom tools and applications that I use
      (defconst mg-browser "/usr/bin/firefox")
      (defconst mg-keyboard-layout-changer "/usr/bin/setxkbmap")

      ;; Custom application started that leverages on `xstarter'
      (defun mg-starter ()
        "Choose the application to run from a list generated with
  `xstarter', which is, then, a prerequisite for this function to
  work."
        (interactive)
        (let* ((candidates (split-string
  			  (shell-command-to-string "xstarter -P")
  			  "\n"
  			  t))
  	     (application-path (completing-read
  				"Application to launch: "
  				candidates)))
  	(start-process "" nil application-path)))

      (setq exwm-workspace-number 6)
      (add-hook 'exwm-update-class-hook #'mg-exwm-update-class)
      (require 'exwm-randr)
      (exwm-randr-enable)
      (setq exwm-input-prefix-keys
  	  '(?\C-x
  	    ?\C-u
  	    ?\C-n
  	    ?\C-t
  	    ?\C-h
  	    ?\C-p
  	    ?\C-g
  	    ?\M-x
  	    ?\M-`
  	    ?\M-&
  	    ?\M-:
  	    ?\C-\M-j
  	    ?\C-\ ))
      (setq exwm-input-simulation-keys
  	  '(([?\C-b] . [left])
  	    ([?\C-f] . [right])
  	    ([?\C-p] . [up])
  	    ([?\C-n] . [down])
  	    ([?\C-a] . [home])
  	    ([?\C-e] . [end])
  	    ([?\M-v] . [prior])
  	    ([?\C-v] . [next])
  	    ([?\C-d] . [delete])
  	    ([?\C-k] . [S-end delete])))
      (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
      (setq exwm-layout-show-all-buffers t)
      (setq exwm-workspace-show-all-buffers t)
      (exwm-input-set-key
       (kbd "<XF86MonBrightnessUp>")
       (lambda ()
         (interactive)
         (start-process-shell-command
  	"light" nil "light -A 10")))
      (exwm-input-set-key
       (kbd "<XF86MonBrightnessDown>")
       (lambda ()
         (interactive)
         (start-process-shell-command
  	"light" nil "light -U 10")))
      (setq exwm-input-global-keys
  	  `(
  	    ([?\s-r] . exwm-reset)
  	    ([?\s-k]
  	     . delete-window)
  	    ([s-left] . windmove-left)
  	    ([s-right] . windmove-right)
  	    ([s-up] . windmove-up)
  	    ([s-down] . windmove-down)
  	    ([?\s-m] . exwm-workspace-move-window)
  	    ([?\s-\ ] .
  	     (lambda ()
  	       (interactive)
  	       (mg-starter)))
  	    ([?\s-w] . exwm-workspace-switch)
  	    ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))
  	    ([?\s-b] .
  	     (lambda ()
  	       (interactive)
  	       (start-process "" nil mg-browser)))
  	    ([?\s-i] .
  	     (lambda ()
  	       (interactive)
  	       (start-process "" nil mg-keyboard-layout-changer "it")))
  	    ([?\s-u] .
  	     (lambda ()
  	       (interactive)
  	       (start-process "" nil mg-keyboard-layout-changer "us")))
  	    ([?\s-f] .
  	     (lambda ()
  	       (interactive)
  	       (mg-check-and-toggle-deepwork-mode)))))
      (setq exwm-workspace-index-map 
  	  (lambda (index) (number-to-string (1+ index))))
      (add-hook 'exwm-init-hook
  	      (lambda ()
  		(progn
  		  (start-process "dbus-update-activation-environment" nil "dbus-update-activation-environment" "DISPLAY")
  		  (when (not (equal (system-name) mg-work-laptop-hostname))
  		    (start-process "x-on-resize" nil "x-on-resize" "-c /home/claudio/Repositories/knock-files/cli-utils/monitor_hotplug.sh"))) t)))

    (use-package desktop-environment
      :straight t
      :after (exwm)
      :config
      (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>") #'desktop-environment-volume-increment)
      (exwm-input-set-key (kbd "<XF86AudioLowerVolume>") #'desktop-environment-volume-decrement)
      (exwm-input-set-key (kbd "<XF86AudioMute>") #'desktop-environment-toggle-mute)
      (exwm-input-set-key (kbd "s-l") #'desktop-environment-lock-screen)
      (exwm-input-set-key (kbd "<XF86AudioPlay>") #'desktop-environment-toggle-music)
      (exwm-input-set-key (kbd "<XF86AudioPause>") #'desktop-environment-toggle-music)
      (exwm-input-set-key (kbd "<XF86AudioNext>") #'desktop-environment-music-next)
      (exwm-input-set-key (kbd "s-s") #'desktop-environment-screenshot-part)
      :custom
      (desktop-environment-volume-get-command "pamixer --get-volume")
      (desktop-environment-volume-set-command "pamixer %s")
      (desktop-environment-volume-toggle-regexp nil)
      (desktop-environment-volume-get-regexp "\\([0-9]+\\)")
      (desktop-environment-volume-normal-increment "-i 5 --allow-boost")
      (desktop-environment-volume-normal-decrement "-d 5")
      (desktop-environment-volume-toggle-command "pamixer -t")
      (desktop-environment-screenlock-command "xsecurelock"))

    (use-package time
      :straight t
      :after (exwm)
      :custom
      (display-time-format "[%d/%b %H:%M]")
      :config
      (display-time-mode)
      (display-battery-mode))

    (use-package mg-exwm
      :ensure nil
      :bind (("C-c u w l z" . mg-exwm-trigger-zurich-layout)
  	   ("C-c u w l d" . mg-exwm-trigger-default-layout)
  	   ("C-c u w l w" . mg-exwm-trigger-workstation-layout))))

  (provide 'mg-emacs-exwm)
#+end_src

** The ~mg-emacs-themes.el~ module

I typically prefer simple and highly legible themes. Back in the days, I used to change theme quite often. The theme I've been enjoying the most is likely [[https://github.com/bbatsov/zenburn-emacs][Zenburn]], because it is also the one I used for the longest period of time without switching to any other theme. After some time though, I switched to ~modus-vivendi~, because of its simplicity and legibility. I'm finding it better than the one I was using before, and I think I'll stick with it for years to come. However, the Emacs standard theme is even more legible and plain, so it should be worth trying it.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-themes.el"
  (defun mg-init-macos-theme ()
    "Enable the theme environment of choice for darwin."
    (set-frame-font "Liberation Mono 17" nil t)
    (use-package standard-themes :straight t :config
      (load-theme 'standard-dark t)))

  (defun mg-init-linux-theme ()
    "Enable the theme enviroment of choice for linux."
    (set-frame-font "Iosevka Comfy 14" nil t)
    (use-package ef-themes :straight t :config
      (load-theme 'ef-autumn t)))

  (if (display-graphic-p)
      (progn
        (if (equal system-type 'darwin)
  	  (mg-init-macos-theme)
  	(mg-init-linux-theme))
        (set-fringe-mode 0))
    (set-face-background 'default "undefined"))
#+end_src

The following piece of code introduces ~hide-mode-line~ mode, which is used in a custom function of mine to enable PDF presentation mode (not technically an Emacs mode, rather a custom layout).

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-themes.el"
  (use-package hide-mode-line
    :straight t)

  (provide 'mg-emacs-themes)
#+end_src

The only other feature that needs some clarification for the above code is the conditional statement on the ~display-graphic-p~. When not on the GUI version of Emacs (i.e., from CLI), I prefer not to select any theme and just stick with the one used in the terminal emulator. I find this way to go way less confusing, and surely lowers cognitive overhead for me.

** The ~mg-emacs-layouts.el~ module
:PROPERTIES:
:ID:       3B58B914-77A7-4942-A229-1A639C6B9287
:END:

In this module I enable some other packages I use to visually customize buffers and text within Emacs. For instance, I use ~olivetti~ and ~logos~ in conjunction for conveniently display text to avoid distractions. This comes into play when I need to write huge wall of texts without switching back and forth to code listings (moving from a full-width piece of code to the ~olivetti-logos~ layout is indeed confusing to me, and raises cognitive overload).

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-layouts.el"
  (use-package olivetti
    :straight t)

  (use-package logos
    :bind (("C-c p f" . logos-focus-mode))
    :straight t
    :custom
    (logos-outlines-are-pages t)
    :config
    (setq-default logos-hide-cursor nil
  		logos-hide-mode-line t
  		logos-hide-header-line t
  		logos-hide-buffer-boundaries t
  		logos-hide-fringe t
  		logos-variable-pitch nil
  		logos-buffer-read-only nil
  		logos-scroll-lock nil
  		logos-olivetti t)
    (let ((map global-map))
      (define-key map [remap narrow-to-region] #'logos-narrow-dwim)
      (define-key map [remap forward-page] #'logos-forward-page-dwim)
      (define-key map [remap backward-page] #'logos-backward-page-dwim)))

  (provide 'mg-emacs-layouts)
#+end_src

** The ~mg-emacs-buffers-completion.el~ module

Buffer management and buffer/minibuffer completion are unified in this configuration. I switch and manage (e.g., kill) buffers mainly through ~consult-ibuffer~ (to be described later), but sometimes I find useful to have a grouping and management that I find similar to ~dired~. That's why I use ~ibuffer~, which provides these features out-of-the-box, and it is part of Emacs since version 22.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-buffers-completion.el"
  (use-package ibuffer
    :ensure nil
    :bind
    (("C-x C-b" . ibuffer))
    :config
    (setq ibuffer-expert t)
    (setq ibuffer-saved-filter-groups
  	(quote (("default"
  		 ("org" (mode . org-mode))
  		 ("dired" (mode . dired-mode))
  		 ("magit" (name . "^magit"))
  		 ("c-src" (mode . c-mode))
  		 ("python-src" (mode . python-mode))
  		 ("virt-manager" (name . "^Virt-manager"))
  		 ("brave" (name . "^Brave"))
  		 ("jabber" (name . "^*-jabber"))
  		 ("vterminal" (name . "^\\*vterminal"))
  		 ("emacs" (or
  			   (name . "^\\*scratch\\*$")
  			   (name . "^\\*Messages\\*$")))
  		 ))))
    (setq ibuffer-default-sorting-mode 'alphabetic)
    (add-hook 'ibuffer-mode-hook
  	    (lambda ()
  	      (ibuffer-switch-to-saved-filter-groups "default")
  	      )))
#+end_src

For completion in both standard buffers and minibuffers, I employ a popular stack of packages: Vertico, Orderless, Marginalia, Consult, and Corfu. I particularly appreciate the modular nature of this setup. For instance, if a user doesn't favor Consult, they can easily retain the default completion system while still benefiting from the other packages. Personally, I find these packages highly effective in their default configurations, so I've rarely felt the need to customize them extensively.

For ~corfu~, I stick to a specific commit: I experienced a bug a while ago when using it in conjunction with EXWM (see [[id:f027d45b-3a55-450b-8d24-98e3a9530809][The ~mg-emacs-exwm.el~ module]]), which is always the case for me. I've frozen the package to a specific commit, before that bug was introduced.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-buffers-completion.el"

  (use-package vertico
    :straight t
    :config
    (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
    (vertico-mode))

  (use-package marginalia
    :straight t
    :config
    (marginalia-mode))

  (use-package savehist
    :straight t
    :config
    (savehist-mode))

  (use-package orderless
    :straight t
    :custom
    (completion-styles '(orderless basic)))

  (use-package consult
    :straight t
    :bind (
  	 ("C-c M-x" . consult-mode-command)
  	 ("C-c h" . consult-history)
  	 ("C-c k" . consult-kmacro)
  	 ("C-c M-m" . consult-man)
  	 ("C-c i" . consult-info)
  	 ([remap Info-search] . consult-info)

  	 ("C-x b" . consult-buffer)
  	 ("C-x r b" . consult-bookmark)
  	 ("C-x p b" . consult-project-buffer)

  	 ("M-#" . consult-register-load)
  	 ("M-'" . consult-register-store)
  	 ("C-M-#" . consult-register)

  	 ("M-y" . consult-yank-pop)

  	 ("M-g e" . consult-compile-error)
  	 ("M-g f" . consult-flymake)
  	 ("M-g g" . consult-goto-line)
  	 ("M-g M-g" . consult-goto-line)
  	 ("M-g o" . consult-outline)
  	 ("M-g m" . consult-mark)
  	 ("M-g k" . consult-global-mark)
  	 ("M-g i" . consult-imenu)
  	 ("M-g I" . consult-imenu-multi)

  	 ("M-s d" . consult-find)
  	 ("M-s c" . consult-locate)
  	 ("M-s g" . consult-grep)
  	 ("M-s G" . consult-git-grep)
  	 ("M-s r" . consult-ripgrep)
  	 ("M-s l" . consult-line)
  	 ("M-s L" . consult-line-multi)
  	 ("M-s k" . consult-keep-lines)
  	 ("M-s u" . consult-focus-lines)

  	 ("M-s e" . consult-isearch-history)
  	 :map isearch-mode-map
  	 ("M-e" . consult-isearch-history)
  	 ("M-s e" . consult-isearch-history)
  	 ("M-s l" . consult-line)
  	 ("M-s L" . consult-line-multi)

  	 :map minibuffer-local-map
  	 ("M-s" . consult-history)
  	 ("M-r" . consult-history))
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    (setq xref-show-xrefs-function #'consult-xref
  	xref-show-definitions-function #'consult-xref)
    :config
    (consult-customize consult-buffer
  		     :preview-key "M-.")
    (setq consult-narrow-key ">"))

  (use-package corfu
    :straight (corfu :type git :host github :repo "minad/corfu" :commit "24dccafeea114b1aec7118f2a8405b46aa0051e0")
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    :config
    (global-corfu-mode)
    (corfu-popupinfo-mode))

  (provide 'mg-emacs-buffers-completion)
#+end_src

** The ~mg-emacs-files.el~ module

This module deals with file management. It includes packages to list, manage and open files (and some specific file types).

The ~dired~ file manager is likely one of the most useful and game changing features provided by the Emacs editor. Files, through their listing - e.g., as output of the ~ls~ command -, are managed as they were written into a standard Emacs buffer. This means that every buffer convention still suffices when managing files. I usually omit dot files when listing with ~dired~ (when needed I can always make them appear again by disabling ~dired-omit-mode~).

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-files.el"
  (use-package dired
    :ensure nil
    :custom
    (ls-lisp-use-insert-directory-program nil)
    (ls-lisp-dirs-first t)
    (default-directory "~/"))

  (use-package dired-x
    :ensure nil
    :custom
    (dired-omit-files "^\\...+$")
    (dired-dwim-target t)
    (delete-by-moving-to-trash t)
    (dired-omit-files "^\\.[^.].+$")
    :init
    (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1))))
#+end_src

There are cases when I need to open a file with an external program (e.g., video files with ~mpv~). For this use-case, there is a useful package called ~openwith~ that let us associate file extensions with external programs to open them.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-files.el"
  (use-package openwith
    :straight t
    :config
    (setq openwith-associations '(
  				("\\.mp4\\'" "mpv" (file))
  				("\\.webm\\'" "mpv" (file))
  				("\\.mkv\\'" "mpv" (file))
  				("\\.m4a\\'" "mpv --force-window" (file))
  				("\\.mov\\'" "mpv" (file))
  				("\\.ppt\\'" "libreoffice" (file))
  				("\\.pptx\\'" "libreoffice" (file))
  				("\\.doc\\'" "libreoffice" (file))
  				("\\.docx\\'" "libreoffice" (file))
  				))
    (openwith-mode t))
#+end_src

When dealing with PDFs, I leverage upon the ~pdf-tools~ suite, which does a pretty good job when it comes to view and annotate PDFs. There are better PDFs viewers out there (some of them have features that could really benefit my use-cases - e.g., [[https://sioyek.info/][Sioyek]]), but my strict requirement is to have one that lies into Emacs and is perfectly integrated with other Emacs packages (e.g., ~org-mode~, ~denote~, ~citar-denote~). That's why I'm using it.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-files.el"
  (use-package pdf-tools
    :straight t
    :config
    (add-hook 'pdf-view-mode-hook #'pdf-links-minor-mode)
    (define-key pdf-view-mode-map (kbd "f") #'pdf-links-isearch-link)
    (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-tools-install))
    (add-hook 'pdf-view-mode-hook
  	    (lambda () (setq header-line-format nil))))

  (provide 'mg-emacs-files)
#+end_src

** The ~mg-emacs-buffers.el~ module

This module handles various buffer editing packages. The concept of buffer is key in Emacs, it is like a sheet of paper in a notebook. Therefore, having packages that, for instance, allow us to move faster in a buffer, or efficiently undo a recent change, I think is of a great value.

The ~vundo~ package is my way to go when it comes to undo changes. I was using ~undo-tree~ before, and I still think it is a valid alternative to what I'm using now. However, I really enjoy ~vundo~'s simplicity and low visual overhead. However, on [2024-10-29 Tue 15:51] I decided to go back to ~undo-tree~ because ~vundo~ is buggy: sometimes I get weird errors when going substantially back in time with the changes, and I also got some ~"No possible route"~ bugs several times.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-buffers.el"
  (use-package undo-tree
    :straight t
    :init
    (global-undo-tree-mode)
    :custom
    (undo-tree-auto-save-history nil))
#+end_src

My typing skills improved consistently in these years of Emacs usage. Thus, I needed a way to also move the cursor faster in the buffers. That's why I started using ~avy~, whose functionality could be a bit cumbersome at first, but after one gets used to it, is a 10x improvement in speed.
I find convenient to use the ~C-c ;~ and ~C-c ,~ keybindings (they are easily accessible), but they are reserved to ~org~. Hence, ~avy~ is loaded after ~org~ and the two keybindings are first removed from the ~org-mode~ keymap, and then reassigned to the main ~avy~ commands.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-buffers.el"
  (use-package avy
    :straight t
    :after org
    :init
    (eval-after-load 'org
      (progn
        (define-key org-mode-map (kbd "C-c ,") nil)
        (define-key org-mode-map (kbd "C-c ;") nil)))
    :bind
    (("C-c ;" . avy-goto-line)
     ("C-c ," . avy-goto-char)))

  (provide 'mg-emacs-buffers)
#+end_src

** The ~mg-emacs-markup.el~ module

This module loads some packages to handle markup languages as ~outline~ (which is Emacs specific) and Markdown. Although I do not use it extensively, I find ~outline-mode~ pretty useful to divide Emacs Lisp code into outlines (through comments starting with ~;;;~) to easily navigate throughout the file. I use Markdown to mainly write stuff to be later sent as Slack messages: I open a temporary buffer, toggle ~markdown-mode~, write the text with formatting and copy-paste it into Slack.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-markup.el"
  (use-package outline
    :ensure nil
    :bind
    ("C-c u c o" . outline-minor-mode)
    :custom
    (outline-minor-mode-highlight nil)
    (outline-minor-mode-cycle t)
    (outline-minor-mode-use-buttons nil)
    (outline-minor-mode-use-margins nil))

  (use-package markdown-mode
    :straight t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))

  (provide 'mg-emacs-markup)
#+end_src

** The ~mg-emacs-org.el~ module
:PROPERTIES:
:ID:       6f7d6bb3-7e70-4a0b-ae3f-54b55086c35d
:END:

If I would be ever asked about the single most life changing Emacs package that I use, that would surely be ~org~. To its core, ~org-mode~ is just an Emacs major mode to edit files written according to a markup language (called, indeed, Org). As Emacs is just a Lisp interpreter at its core, but with many other implications coming from this, ~org-mode~ has a huge amount of useful, simple and effective features that I use every single day of my life. I use ~org-mode~ to take notes (in conjunction with ~denote~ - see [[id:64ce0bed-fefc-4603-91ef-24b4fd102795][The ~mg-emacs-denote.el~ module]]), manage appointments, handle todos, create flashcards (in conjunction to ~anki-editor~ - see [[id:93af5e84-4396-4994-9804-3edc69d8a070][The ~mg-emacs-flashcards.el~ module]]), store contact information, do literate programming, organize projects, manage expenses (in conjunction with ~ledger~ - see [[id:5fb29d20-1803-4301-80ff-d05d53397166][The ~mg-emacs-ledger.el~ module]]), and many others. It would be unrealistic to list all the needs I satisfy because of ~org-mode~'s existence.

Anyway, the important aspects of my ~org-mode~ configuration can be summarized with some key points. I use ~org-capture~ a lot, so my workflow revolves around writing code or notes, have some idea and trigger ~org-capture~ to write a reminder (or a TODO entry) to be later processed. Events, meetings, calls and the like are all tracked down by means of a ~org-capture~ template to write an entry in some ~org-agenda~ file. Thus, another key aspect of my ~org-mode~ workflow is to heavily used the agenda, tweaked to have a comprehensive view of what matter the most for me:
- Today's time grid, i.e., what is today's situation like? Did I have some meetings scheduled, or some deep work sessions either?
- What task am I working on? What is the next task to be handled? These two comes from a variation of the GTD system I implemented myself;
- What are the upcoming deadlines for the month?
- What is the state of my inbox? What are those tasks/reminders I captured but not clarified yet? Still some GTD-like feature that I adapted to my use-cases;
- What have I accomplished today?
- How is next week going to be like?


Those questions are all answered by just looking at the agenda, fired up with just a simple keystroke. That's how effective ~org-mode~ is to me. The other huge use-case for ~org-mode~ is note-taking, which I'll be addressing in the ~denote~ section (see [[id:64ce0bed-fefc-4603-91ef-24b4fd102795][The ~mg-emacs-denote.el~ module]]).

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-org.el"
  (use-package mg-org
    :ensure nil
    :bind (("C-c o c d" . mg-org-compute-deep-work-minutes)
  	 ("C-c o b" . mg-org-block-time)))

  (use-package org
    :straight t
    :bind (("C-c a" . org-agenda)
  	 ("C-c C-;" . org-insert-structure-template)
  	 ("C-c c" . org-capture)
  	 ("C-c C-z" . org-add-note)
  	 ("C-c o p" . org-do-promote)
  	 ("C-c o d" . org-do-demote)
  	 ("C-c p o r" . org-clock-report)
  	 ("C-c l" . org-store-link))
    :custom
    (org-src-tab-acts-natively t)
    (org-agenda-files (list mg-work-projects-file mg-personal-projects-file mg-agenda-file mg-inbox-file mg-capture-notes-file))
    (org-archive-location "~/Vault/pkm/.archive/archive.org::* From %s")
    (org-export-backends '(beamer html latex icalendar ascii))
    (org-structure-template-alist
     '(("a" . "export ascii")
       ("c" . "center")
       ("C" . "comment")
       ("e" . "example")
       ("E" . "export")
       ("h" . "export html")
       ("l" . "export latex")
       ("q" . "quote")
       ("s" . "src")
       ("L" . "src emacs-lisp")
       ("t" . "src emacs-lisp :tangle FILENAME")
       ("T" . "src emacs-lisp :tangle FILENAME :mkdirp yes")))
    (org-startup-folded nil)
    (org-log-into-drawer t)
    (org-export-with-drawers nil)
    (org-clock-clocked-in-display 'mode-line)
    (org-clock-idle-time nil)
    (org-todo-keywords
     '((sequence "TODO(t)" "NEXT(n)" "DOING(p@/!)" "HOLD(h)" "|" "DONE(d)")))
    (org-stuck-projects '("+project/" ("NEXT" "TODO") ("course") "\\(Details\\|Artifacts\\|Resources\\)\\>"))
    (org-log-done 'time)
    (org-agenda-hide-tags-regexp ".")
    (org-id-link-to-org-use-id t)
    (org-refile-use-outline-path 'file)
    (org-outline-path-complete-in-steps nil)
    (org-clock-sources '(agenda))
    (org-capture-templates
     '(("i" "Inbox")
       ("it" "Todo entry" entry (file mg-inbox-file)
  	"* TODO %? :inbox:\n:PROPERTIES:\n:CATEGORY: INBOX\n:END:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:")
       ("im" "Mail entry" entry (file mg-inbox-file)
  	"* TODO Process \"%a\" %? :inbox:\n:PROPERTIES:\n:CATEGORY: INBOX\n:END:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:")
       ("in" "Notes entry" entry (file mg-capture-notes-file)
  	"* %U (%a) :inbox:\n:PROPERTIES:\n:CATEGORY: INBOX\n:END:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:")
       ("a" "Agenda")
       ("am" "Meeting entry" entry (file+headline mg-agenda-file "Future")
  	"* Meeting with %? :meeting:\n:PROPERTIES:\n:LOCATION:\n:CATEGORY: %^{Category}\n:END:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:\n%^T\n")
       ("ae" "Event entry" entry (file+headline mg-agenda-file "Future")
  	"* %? :event:\n:PROPERTIES:\n:LOCATION:\n:CATEGORY:\n:END:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:\n%^T\n")
       ("ac" "Call entry" entry (file+headline mg-agenda-file "Future")
  	"* Call with %? :call:\n:PROPERTIES:\n:CATEGORY:\n:END:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:\n%^T\n")
       ("ap" "Coaching session with Prot entry" entry (file+headline mg-agenda-file "[[denote:20240510T212918][Protesilaos Stavrou]]")
  	"* Coaching session :@home:@personal:\n:PROPERTIES:\n:LOCATION: @home\n:CATEGORY: PROT\n:LINK:\n:END:\n:LOGBOOK:\n- Entry inserted on %U \\\\\n:END:\n%^T\n** Topics to discuss\n** Questions from last time\n")
       ("r" "Resources")
       ("ra" "Conference attendance" entry (file mg-conferences-file)
  	"* %^{Conference name}\n:PROPERTIES:\n:WHERE: %?\n:WEBSITE: %?\n:END:\n")
       ("rb" "Book archiving" entry (file+headline mg-books-file "Inbox")
  	"* %^{Book title}\n:PROPERTIES:\n:TITLE: %^{Book title}\n:AUTHOR: %^{Author}\n:YEAR: %^{Year}\n:PAGES: %^{Pages}\n:RATING: %^{Rating (From * to *****)}\n:LINK: %^{Book link}\n:END:\n")
       ("P" "Planning")
       ("Py" "Year plan" plain (file mg-planning-file)
  	"* %^{Year} %U\n- Overview ::\n- Feelings :: %^{Feelings|good|neutral|bad}\n- Milestones ::\n- Values and life philosophy ::\n- 5 years vision(s) ::\n- Financial goals ::\n- [ ] Review ::\n")
       ("Pq" "Quarter plan" plain (file mg-planning-file)
  	"** %^{Quarter} %U\n- Overview ::\n- Feelings :: %^{Feelings|good|neutral|bad}\n- Long-term projects ::\n- Financial/expenses planning ::\n- [ ] Review ::\n")
       ("Pm" "Month plan" plain (file mg-planning-file)
  	"*** %^{Month} %U\n- Overview ::\n- Feelings :: %^{Feelings|good|neutral|bad}\n- Short-term projects ::\n- [ ] Review ::\n")
       ("f" "Flashcards")
       ("fp" "Physics flaschard" entry (file+headline mg-flashcards-file "Physics") "* %(mg-org-capture-generate-flash-header)\n:PROPERTIES:\n:ANKI_DECK: Physics\n:ANKI_NOTE_TYPE: Basic\n:END:\n** Front\n%?\n** Back\n")
       ("fc" "Computer science flashcard" entry (file+headline mg-flashcards-file "Computer science") "* %(mg-org-capture-generate-flash-header)\n:PROPERTIES:\n:ANKI_DECK: Computer science\n:ANKI_NOTE_TYPE: Basic\n:END:\n** Front\n%?\n** Back\n")
       ("fk" "Kernel flashcard" entry (file+headline mg-flashcards-file "Kernel") "* %(mg-org-capture-generate-flash-header)\n:PROPERTIES:\n:ANKI_DECK: Kernel\n:ANKI_NOTE_TYPE: Basic\n:END:\n** Front\n%?\n** Back\n")
       ("fs" "Security flashcard" entry (file+headline mg-flashcards-file "Security") "* %(mg-org-capture-generate-flash-header)\n:PROPERTIES:\n:ANKI_DECK: Security\n:ANKI_NOTE_TYPE: Basic\n:END:\n** Front\n%?\n** Back\n")
       ("fm" "Mathematics flashcard" entry (file+headline mg-flashcards-file "Mathematics") "* %(mg-org-capture-generate-flash-header)\n:PROPERTIES:\n:ANKI_DECK: Mathematics\n:ANKI_NOTE_TYPE: Basic\n:END:\n** Front\n%?\n** Back\n")
       ("fe" "English flashcard" entry (file+headline mg-flashcards-file "English") "* %(mg-org-capture-generate-flash-header)\n:PROPERTIES:\n:ANKI_DECK: English\n:ANKI_NOTE_TYPE: Basic\n:END:\n** Front\n%?\n** Back\n")
       ("p" "Projects")
       ("pl" "Learning project" plain (file+headline mg-personal-projects-file "Learning")
  	"** %^{Project name} [/]\n:PROPERTIES:\n:WHAT: %?\n:REPOSITORY:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")
       ("ph" "Home project" plain (file+headline mg-personal-projects-file "Home")
  	"** %^{Project name} [/]\n:PROPERTIES:\n:WHAT: %?\n:REPOSITORY:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")
       ("pp" "Productivity and tooling project" plain (file+headline mg-personal-projects-file "Productivity and tooling")
  	"** %^{Project name} [/]\n:PROPERTIES:\n:WHAT: %?\n:REPOSITORY:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")
       ("pw" "Work project" plain (file+headline mg-work-projects-file "Work")
  	"** %? [/]\n:PROPERTIES:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")
       ("pb" "Blogging project" plain (file+headline mg-personal-projects-file "Blogging")
  	"** %? [/]\n:PROPERTIES:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")
       ("ps" "Study project" plain (file+headline mg-work-projects-file "Study")
  	"** %? [/]\n:PROPERTIES:\n:VISIBILITY: hide\n:COOKIE_DATA: recursive todo\n:END:\n*** Details\n*** Tasks\n*** Resources\n*** Artifacts\n*** Logs\n")))
    (org-refile-targets '((mg-work-projects-file :regexp . "\\(?:\\(?:Log\\|Task\\)s\\)")
  			(mg-personal-projects-file :regexp . "\\(?:\\(?:Log\\|Task\\)s\\)")
  			(mg-books-file :regexp . "\\(?:\\(?:2023\\|2024\\)s\\)")
  			(mg-agenda-file :regexp . "\\(?:Past\\)")))
    (org-agenda-block-separator "==============================================================================")
    (org-agenda-custom-commands
     '(("a" "Agenda"
  	((agenda ""
  	       ((org-agenda-span 1)
  		(org-agenda-skip-function
  		 (lambda ()
  		   (org-agenda-skip-entry-if 'done)))
  		(org-deadline-warning-days 0)
  		(org-scheduled-past-days 14)
  		(org-agenda-day-face-function (lambda (date) 'org-agenda-date))
  		(org-agenda-format-date "%A %-e %B %Y")
  		(org-agenda-overriding-header "Today's schedule:\n")))
  	 (todo "DOING"
  	     ((org-agenda-skip-function
  	       '(org-agenda-skip-entry-if 'deadline))
  	      (org-agenda-prefix-format "  %i %-12:c [%e] ")
  	      (org-agenda-overriding-header "\nDOING Tasks:\n")))
  	 (todo "NEXT"
  	     ((org-agenda-skip-function
  	       '(org-agenda-skip-entry-if 'deadline))
  	      (org-agenda-prefix-format "  %i %-12:c [%e] ")
  	      (org-agenda-overriding-header "\nNEXT Tasks:\n")))
  	 (agenda "" ((org-agenda-time-grid nil)
  		   (org-agenda-start-day "+1d")
  		   (org-agenda-start-on-weekday nil)
  		   (org-agenda-span 30)
  		   (org-agenda-show-all-dates nil)
  		   (org-deadline-warning-days 0)
  		   (org-agenda-entry-types '(:deadline))
  		   (org-agenda-skip-function '(org-agenda-skip-entry-if 'done))
  		   (org-agenda-overriding-header "\nUpcoming deadlines (+30d):\n")))
  	 (tags-todo "inbox"
  		  ((org-agenda-prefix-format "  %?-12t% s")
  		   (org-agenda-overriding-header "\nInbox:\n")))
  	 (tags "CLOSED>=\"<today>\""
  	     ((org-agenda-overriding-header "\nCompleted today:\n")))
  	 (agenda ""
  	       ((org-agenda-start-on-weekday nil)
  		(org-agenda-skip-function
  		 (lambda ()
  		   (org-agenda-skip-entry-if 'done)))
  		(org-agenda-start-day "+1d")
  		(org-agenda-span 5)
  		(org-deadline-warning-days 0)
  		(org-scheduled-past-days 0)
  		(org-agenda-overriding-header "\nWeek at a glance:\n")))
  	 ))))
    :config
    (when (display-graphic-p)
      (progn
  	(require 'oc-biblatex)
  	(setq org-cite-export-processors
  	    '((latex biblatex))
  	    org-latex-pdf-process mg-latex-cmds)))
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5)
  	org-format-latex-options (plist-put org-format-latex-options :background "Transparent")
  	org-latex-create-formula-image-program 'dvisvgm)
    (require 'ox-latex)
    (add-to-list 'org-latex-classes
  	       '("res"
  		 "\\documentclass[margin]{res}\n
    \\setlength{\textwidth}{5.1in}"
  		 ("\\section{%s}" . "\\section*{%s}")
  		 ("\\subsection{%s}" . "\\subsection*{%s}")
  		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
  		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
  	       '("memoir"
  		 "\\documentclass[article]{memoir}\n
    \\usepackage{color}
    \\usepackage{amssymb}
    \\usepackage{gensymb}
    \\usepackage{nicefrac}
    \\usepackage{units}"
  		 ("\\section{%s}" . "\\section*{%s}")
  		 ("\\subsection{%s}" . "\\subsection*{%s}")
  		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
  		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
  	       '("letter"
  		 "\\documentclass{letter}\n"
  		 ("\\section{%s}" . "\\section*{%s}")
  		 ("\\subsection{%s}" . "\\subsection*{%s}")
  		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
  		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
  	       '("tuftebook"
  		 "\\documentclass{tufte-book}\n
    \\usepackage{color}
    \\usepackage{amssymb}
    \\usepackage{gensymb}
    \\usepackage{nicefrac}
    \\usepackage{units}"
  		 ("\\section{%s}" . "\\section*{%s}")
  		 ("\\subsection{%s}" . "\\subsection*{%s}")
  		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
  		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
  	       '("tuftehandout"
  		 "\\documentclass{tufte-handout}
    \\usepackage{color}
    \\usepackage{amssymb}
    \\usepackage{amsmath}
    \\usepackage{gensymb}
    \\usepackage{nicefrac}
    \\usepackage{units}"
  		 ("\\section{%s}" . "\\section*{%s}")
  		 ("\\subsection{%s}" . "\\subsection*{%s}")
  		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
  		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
  	       '("tufnotes"
  		 "\\documentclass{tufte-handout}
  					 \\usepackage{xcolor}
  					       \\usepackage{graphicx} %% allow embedded images
  					       \\setkeys{Gin}{width=\\linewidth,totalheight=\\textheight,keepaspectratio}
  					       \\usepackage{amsmath}  %% extended mathematics
  					       \\usepackage{booktabs} %% book-quality tables
  					       \\usepackage{units}    %% non-stacked fractions and better unit spacing
  					       \\usepackage{multicol} %% multiple column layout facilities
  					       \\RequirePackage[many]{tcolorbox}
  					       \\usepackage{fancyvrb} %% extended verbatim environments
  						 \\fvset{fontsize=\\normalsize}%% default font size for fancy-verbatim environments

  				\\definecolor{g1}{HTML}{077358}
  				\\definecolor{g2}{HTML}{00b096}

  				%%section format
  				\\titleformat{\\section}
  				{\\normalfont\\Large\\itshape\\color{g1}}%% format applied to label+text
  				{\\llap{\\colorbox{g1}{\\parbox{1.5cm}{\\hfill\\color{white}\\thesection}}}}%% label
  				{1em}%% horizontal separation between label and title body
  				{}%% before the title body
  				[]%% after the title body

  				%% subsection format
  				\\titleformat{\\subsection}%%
  				{\\normalfont\\large\\itshape\\color{g2}}%% format applied to label+text
  				{\\llap{\\colorbox{g2}{\\parbox{1.5cm}{\\hfill\\color{white}\\thesubsection}}}}%% label
  				{1em}%% horizontal separation between label and title body
  				{}%% before the title body
  				[]%% after the title body

  							      \\newtheorem{note}{Note}[section]

  							      \\tcolorboxenvironment{note}{
  							       boxrule=0pt,
  							       boxsep=2pt,
  							       colback={green!10},
  							       enhanced jigsaw,
  							       borderline west={2pt}{0pt}{Green},
  							       sharp corners,
  							       before skip=10pt,
  							       after skip=10pt,
  							       breakable,
  							}"

  		 ("\\section{%s}" . "\\section*{%s}")
  		 ("\\subsection{%s}" . "\\subsection*{%s}")
  		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
  		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (org-babel-do-load-languages
     'org-babel-load-languages '((C . t)
  			       (shell . t)
  			       (python .t)
  			       (emacs-lisp . t)
  			       (org . t)
  			       (gnuplot . t)
  			       (latex . t)
  			       (scheme . t)
  			       (lisp . t)
  			       (haskell . t)
  			       (R . t))))

  ;; Enable and set org-crypt
  (use-package org-crypt
    :ensure nil
    :config
    (org-crypt-use-before-save-magic)
    (setq org-tags-exclude-from-inheritance (quote (crypt)))
    ;; GPG key to use for encryption
    (setq org-crypt-key nil))

  (use-package mg-pkm-utils
    :ensure nil
    :bind (("C-c p c d" . mg-org-compute-deep-work-minutes))
    ("C-c p p" . mg-toggle-pdf-presentation-mode))

  (provide 'mg-emacs-org)
#+end_src

** The ~mg-emacs-denote.el~ module
:PROPERTIES:
:ID:       64ce0bed-fefc-4603-91ef-24b4fd102795
:END:

The second fundamental package that I use for (networked) note-taking is ~denote~. As stated in its README, at its core, it is just an efficient file naming scheme. Clearly, the author built plenty of features on top of this core concept. The package is clean, it reuses a lot of already well-established Emacs features (e.g., ~xref~), and is *extremely* well documented. Moreover, ~denote~ is regularly updated and maintained, so I use the git repository directly with ~straight.el~ to get the bleeding-edge features of it. Shout-out to Prot, who's really the diamond tip of the Emacs community nowadays. I extend ~denote~ on a regular basis, so there is also a custom library I created that is full of features (see [[id:cf17aa34-cd6c-4eea-be80-c111b00f5f3e][The ~mg-denote.el~ library]]).

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-denote.el"
  (use-package denote
    :straight (denote :type git :host github :repo "protesilaos/denote" :branch "main")
    :bind (("C-c n n" . denote)
  	 ("C-c n x" . denote-region)
  	 ("C-c n N" . denote-type)
  	 ("C-c n d" . denote-date)
  	 ("C-c n y f" . denote-org-extras-dblock-insert-files)
  	 ("C-c n y l" . denote-org-extras-dblock-insert-links)
  	 ("C-c n y b" . denote-org-extras-dblock-insert-backlinks)
  	 ("C-c n y h" . denote-org-extras-link-to-heading)
  	 ("C-c n s" . denote-sort-dired)
  	 ("C-c n e n" . denote-silo-extras-create-note)
  	 ("C-c n e f" . denote-silo-extras-open-or-create)
  	 ("C-c n t" . denote-template)
  	 ("C-c n i" . denote-link)
  	 ("C-c n I" . denote-add-links)
  	 ("C-c n b" . denote-backlinks)
  	 ("C-c n j n" . denote-journal-extras-new-entry)
  	 ("C-c n j l" . denote-journal-extras-link-or-create-entry)
  	 ("C-c n j j" . denote-journal-extras-new-or-existing-entry)
  	 ("C-c n h" . denote-org-extras-backlinks-for-heading)
  	 ("C-c n g f" . denote-find-link)
  	 ("C-c n g b" . denote-find-backlink)
  	 ("C-c n r" . denote-rename-file)
  	 ("C-c n R" . denote-rename-file-using-front-matter))
    :init
    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
    :custom
    (denote-known-keywords '("emacs" "security" "kernel" "mathematics" "algorithms"))
    (denote-infer-keywords t)
    (denote-sort-keywords t)
    (denote-file-type nil)
    (denote-prompts '(title keywords file-type template signature))
    (denote-excluded-directories-regexp nil)
    (denote-excluded-keywords-regexp nil)
    (denote-date-prompt-use-org-read-date t)
    (denote-date-format nil)
    (denote-rename-buffer-format "[D] %s %t (%k)")
    (denote-backlinks-show-context t)
    (denote-dired-directories
     (list denote-directory
  	 (thread-last denote-directory (expand-file-name "assets"))))
    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
    (denote-templates
     '((plain . "")
       (course . "#+include: \"/home/claudio/Repositories/knock-files/org-headers/header_notes_document_small.org\"\n* Course details\n- Lecturer ::\n- University ::\n- Academic year ::\n- Resources ::\n- Description ::\n* Lecture notes\n* COMMENT Flashcards\n")
       (zettel . "#+references: \n\n\n-----\n")
       (place . "* Details\n- Link ::\n- Visited ::\n- Description ::\n* Notes\n")
       (contact . "* Contact details\n- E-mail ::\n- Company ::\n- Phone number ::\n- Website ::\n- Twitter ::\n- Additional information ::\n* Notes")))
    (denote-date-prompt-use-org-read-date t)
    :config
    (denote-rename-buffer-mode 1)
    ;; Due to an org-mode bug, some ~dblock~ functions are not loaded automatically
    (require 'denote-org-extras)
    ;; (custom-set-variables '(org-link-parameters (quote (("store" . denote-link-ol-store)))))
    )

  (use-package mg-denote
    :ensure nil
    :bind
    (("C-c n f f" . mg-denote-find-file)
     ("C-c n z f" . mg-denote-find-zettel)
     ("C-c n z g" . mg-denote-grep-on-zettels)
     ("C-c n u" . mg-denote-copy-timestamp-to-killring)
     ("C-c n o r" . mg-denote-get-references-in-dired)
     ("C-c n z i" . mg-denote-insert-zettel-link)))

  (use-package denote-explore
    :straight t
    :custom
    (denote-explore-network-directory (concat denote-directory "/.graphs"))
    (denote-explore-network-filename "denote-network")
    (denote-explore-network-format 'gexf)
    (denote-explore-network-graphviz-filetype "gexf"))

  (use-package denote-menu
    :straight t
    :config
    :bind (("C-c n m l" . list-denotes)
  	 ("C-c n m f" . denote-menu-filter-by-keyword)))

  (use-package consult-denote
    :straight (consult-denote :type git :host github :repo "protesilaos/consult-denote" :branch "main")
    :bind (("C-c n f g" . consult-denote-grep)
  	 ("C-c n f c" . consult-denote-find)))

  (provide 'mg-emacs-denote)
#+end_src

** The ~mg-emacs-bib.el~ module

This module introduces several packages that I use to manage bibliographic entries and references in general. In my research work, is super important to have a tidied, smooth and efficient way of managing these things. I use ~citar~ as the main bibliography manager, and the I use ~citar-denote~ and ~citar-embark~ on top of it. The former is actually extremely convenient for people like me using ~denote~ (see [[id:64ce0bed-fefc-4603-91ef-24b4fd102795][The ~mg-emacs-denote.el~ module]]) as their note-taking tool of choice: it allows to link reference notes to bibliography entries, and have a convenient way to search notes and open associated artifacts (e.g., PDF files or web pages).

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-bib.el"
  (use-package citar
    :straight t
    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-templates
     '((main . "${author editor:30}     ${date year issued:4}     ${title:48}")
       (suffix . "          ${=key= id:15}    ${=type=:12}")
       (preview . "${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher}.\n")
       (note . "@${author editor}, ${title}")))
    (citar-symbol-separator "  ")
    :bind
    (("C-c n c o" . citar-open)
     ("C-c n c b" . citar-open-entry)
     (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))
    :config
    (setq citar-bibliography (list mg-bibliography-path)))

  (use-package citar-denote
    :straight t
    :custom
    (citar-open-always-create-notes nil)
    (citar-denote-file-type 'org)
    (citar-denote-subdir nil)
    (citar-denote-keyword "bib")
    (citar-denote-use-bib-keywords nil)
    (citar-denote-title-format "title")
    (citar-denote-title-format-authors 1)
    (citar-denote-title-format-andstr "and")
    :init
    (citar-denote-mode)
    :bind (("C-c n c c" . citar-create-note)
  	 ("C-c n c n" . citar-denote-open-note)
  	 ("C-c n c d" . citar-denote-dwim)
  	 ("C-c n c e" . citar-denote-open-reference-entry)
  	 ("C-c n c a" . citar-denote-add-citekey)
  	 ("C-c n c k" . citar-denote-remove-citekey)
  	 ("C-c n c r" . citar-denote-find-reference)
  	 ("C-c n c f" . citar-denote-find-citation)
  	 ("C-c n c l" . citar-denote-link-reference)))

  (use-package embark
    :straight t)

  (use-package citar-embark
    :straight t
    :config (citar-embark-mode))

  (use-package mg-bib
    :ensure nil
    :bind (("C-c p b r" . mg-bib-search-add-to-reading-list)))

  (provide 'mg-emacs-bib)
#+end_src

** The ~mg-emacs-ledger.el~ module
:PROPERTIES:
:ID:       5fb29d20-1803-4301-80ff-d05d53397166
:END:

I use the ~hledger~ CLI tool to track my finances. I tried both ~ledger~ and ~hledger~, and I find the latter more sophisticated and feature-rich. The documentation is also significantly better, which played a huge role in picking between the two. They belong to the plain-text and double-entry type of accounting software, widely used and proved to reduce inconsistencies and errors (see also [[https://hledger.org/accounting.html]]). I do the whole finance tracking with an ~org-mode~ file and ~babel~ to then export is as a ~ledger~ journal. In this way, I can later parse it with ~hledger~ and run queries on it.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-ledger.el"
  (use-package ledger-mode
    :straight t
    :init
    (defconst mg-ledger-bin "/usr/bin/hledger")
    :mode ("\\.journal\\'" "\\.ledger\\'" "\\.hledger\\'")
    :custom
    (ledger-binary-path mg-ledger-bin)
    (ledger-mode-should-check-version nil)
    (ledger-report-auto-width nil)
    (ledger-report-use-native-highlighting nil))

  (provide 'mg-emacs-ledger)
#+end_src

** The ~mg-emacs-flashcards.el~ module
:PROPERTIES:
:ID:       93af5e84-4396-4994-9804-3edc69d8a070
:END:

Spaced repetition is perhaps the only scientific approach to the learning process that has been discovered in the last years. Its effects are tangible and widely studied (see [[https://gwern.net/spaced-repetition]]). To this end, I use a connection between org-mode and [[https://apps.ankiweb.net/][Anki]] to conveniently write and review cards. I have used other org-centered alternatives (e.g., [[https://github.com/l3kn/org-fc][org-fc]] and [[https://orgmode.org/worg/org-contrib/org-drill.html][org-drill]]), but I think reviewing cards also /"on-the-go"/ through a mobile up is a potential speedup in the learning process. I take the use of Anki instead of org-centered alternatives as a test: in case it doesn't provide measurable benefits, I'll go back.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-flashcards.el"
  (use-package anki-editor
    :straight (:type git :host github :repo "anki-editor/anki-editor" :branch "master")
    :bind
    (("C-c o a i" . anki-editor-insert-note)
     ("C-c o a p" . anki-editor-push-notes)))

  (provide 'mg-emacs-flashcards)
#+end_src

** The ~mg-emacs-notmuch.el~ module

I started using ~notmuch~ not so long ago. During a conversation with [[https://protesilaos.com/][Protesilaos Stavrou]], I realized that ~notmuch~ was far better than ~mu4e~, given the specific use cases and needs I had. Therefore, after ~ 2 years of me using ~mu4e~, I gave ~notmuch~ a try. Most of the configuration is done outside Emacs, by tweaking tools as ~msmtp~ and ~mbsync~, and ~notmuch~ itself, which is basically a CLI e-mail indexer. The following piece of code tweaks a couple of important options, and then it is mainly cosmetics.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-notmuch.el"
  (use-package notmuch
    :straight t
    :bind (
  	 :map global-map
  	 ("C-x m" . nil)
  	 ("C-x m o" . notmuch)
  	 :map notmuch-search-mode-map
  	 ("a" . nil)
  	 ("A" . nil)
  	 ("/" . notmuch-search-filter)
  	 ("r" . notmuch-search-reply-to-thread)
  	 ("R" . notmuch-search-reply-to-thread-sender)
  	 :map notmuch-show-mode-map
  	 ("a" . nil)
  	 ("A" . nil)
  	 ("r" . notmuch-show-reply)
  	 ("R" . notmuch-show-reply-sender))
    :custom
    (notmuch-show-logo nil)
    (notmuch-archive-tags nil
  			notmuch-message-replied-tags '("+replied")
  			notmuch-message-forwarded-tags '("+forwarded")
  			notmuch-show-mark-read-tags '("-unread")
  			notmuch-draft-tags '("+draft")
  			notmuch-draft-folder "drafts"
  			notmuch-draft-save-plaintext 'ask)
    (notmuch-show-relative-dates t)
    (notmuch-show-all-multipart/alternative-parts nil)
    (notmuch-show-indent-messages-width 0)
    (notmuch-show-indent-multipart nil)
    (notmuch-show-part-button-default-action 'notmuch-show-view-part)
    (notmuch-show-text/html-blocked-images ".") ; block everything
    (notmuch-wash-wrap-lines-length 120)
    (notmuch-unthreaded-show-out nil)
    (notmuch-message-headers '("To" "Cc" "Subject" "Date"))
    (notmuch-message-headers-visible t)
    :config
    (let ((count most-positive-fixnum)) ; I don't like the buttonisation of long quotes
      (setq notmuch-wash-citation-lines-prefix count
  	  notmuch-wash-citation-lines-suffix count)))

  (use-package ol-notmuch
    :straight (ol-notmuch :type git :host github :repo "tarsius/ol-notmuch")
    :after notmuch)

  (use-package mg-notmuch
    :ensure nil
    :after notmuch
    :bind (("C-x m u" . mg-notmuch-update-mail))
    :config
    (setq notmuch-hello-refresh-hook #'mg-notmuch-update-mail))

  (provide 'mg-emacs-notmuch)
#+end_src

** The ~mg-emacs-languages.el~ module

This module handles all language-specific options, either for markup ones or for programming. It is therefore full of stuff, so maybe in the future it would be better to divide it into smaller sub-modules.

I very rarely use Markdown, mostly when formatting text to send it later on Slack or related software. The workflow I've been having (that should change sooner or later) is to just open a temporary buffer, turn ~markdown-mode~ on, write the formatted message, and then send it on Slack. I'd rather go with an automated feature that enables all of that automatically without the need to do everything by hand (e.g., press a keystroke, and choose the mode interactively, and just spawn the buffer with that mode).

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-languages.el"
  (use-package markdown-mode
    :straight t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
#+end_src

Since natural language is still a language, let's enable spellchecking in this module.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-languages.el"
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+end_src

Since I work with the Linux kernel every single day, I want Emacs to format C code as stated by the kernel community's directives. The code below sets the C style to be compliant to those directives.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-languages.el"
  (setq c-default-style "linux")
#+end_src

The following is a series of packages to enable LSP and major-modes for some programming languages. I've been using ~eglot~ as LSP client for quite a while now, and I'd say that I'm really satisfied with it. The code below is basically a setup of some configuration options for ~eglot~ (already shipped with Emacs 29) and the declarations for some programming modes. I used ~lsp-mode~ in the past, but I think ~eglot~ has the perfect balance between simplicity and feature-richness.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-languages.el"
  (use-package dockerfile-mode
    :straight t
    :mode "\\.docker.file\\'" "\\Dockerfile\\'")

  (use-package haskell-mode
    :straight t
    :mode "\\.hs\\'")

  (use-package bpftrace-mode
    :straight t
    :mode "\\.bt\\'")

  (use-package racket-mode
    :straight t
    :mode "\\.rkt\\'")

  (use-package python-mode
    :straight t
    :mode "\\.py\\'")

  (use-package edts
    :straight t)

  (use-package erlang-mode
    :ensure nil
    :after (edts)
    :mode "\\.erl\\'")

  (use-package nasm-mode
    :straight t)

  (use-package gnuplot
    :straight t)

  (use-package pyvenv
    :straight t)

  (use-package eglot
    :ensure nil
    :config
    (add-to-list 'eglot-server-programs
  	       '((c-mode)
  		 . ("clangd"
                      "-j=8"
                      "--log=error"
                      "--malloc-trim"
                      "--background-index"
                      "--clang-tidy"
                      "--completion-style=detailed"
                      "--pch-storage=memory"
                      "--header-insertion=never"
                      "--header-insertion-decorators=0")))
    (if (eq system-type 'darwin)
        (add-to-list 'eglot-server-programs
  		   '((python-mode)
  		     . ("/usr/bin/pylsp")))
      (add-to-list 'eglot-server-programs
  		 '((python-mode)
  		   . ("~/.local/bin/pylsp"))))
    (add-hook 'c-mode-hook 'eglot-ensure)
    (add-hook 'haskell-mode-hook 'eglot-ensure)
    (add-hook 'erlang-mode-hook 'eglot-ensure)
    (add-hook 'python-mode-hook 'eglot-ensure))

  (provide 'mg-emacs-languages)
#+end_src

** The ~mg-emacs-browsing.el~ module

In this module, I enable some of the packages I use for browsing the web. The preferred way to do so is clearly a full-fledged web browser, but I often type queries directly in Emacs using ~engine-mode~. For fast searches and plain HTML websites, ~eww~ is a convenient Emacs-based alternative to a standard web browser.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-browsing.el"
  (use-package engine-mode
    :straight t
    :config
    (engine/set-keymap-prefix (kbd "C-c u e"))
    (defun mg-engine-mode-exact-phrase-transform (search-term)
      (if current-prefix-arg
  	(concat "\"" search-term "\"")
        search-term))
    (defengine archwiki
      "https://wiki.archlinux.org/index.php?search=%s"
      :keybinding "a")
    (defengine google
      "http://www.google.com/search?hl=en&ie=utf-8&oe=utf-8&q=%s"
      :keybinding "g"
      :term-transformation-hook mg-engine-mode-exact-phrase-transform)
    (defengine elixir
      "https://elixir.bootlin.com/linux/latest/A/ident/%s"
      :keybinding "k")
    (defengine kernel-documentation
      "https://www.kernel.org/doc/html/v4.12/core-api/kernel-api.html#c.%s"
      :keybinding "d")
    (defengine syscall-table
      "https://syscalls.mebeim.net/?table=x86/64/x64/latest"
      :keybinding "s")
    (defengine google-maps
      "https://www.google.com/maps/search/%s/"
      :keybinding "M")
    (defengine semantic-scholar
      "https://www.semanticscholar.org/search?q=%s&sort=relevance"
      :keybinding "r")
    (defengine openstreetmap
      "https://www.openstreetmap.org/search?query=%s"
      :keybinding "m")
    (defengine wordreference-iten
      "https://www.wordreference.com/iten/%s"
      :keybinding "i")
    (defengine wordreference-enit
      "https://www.wordreference.com/enit/%s"
      :keybinding "e")
    (defengine wikipedia
      "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
      :keybinding "w")
    (defengine youtube
      "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
      :keybinding "y")
    (engine-mode t))

  (use-package eww
    :ensure nil
    :custom (shr-use-fonts nil))

  (provide 'mg-emacs-browsing)
#+end_src

** The ~mg-emacs-git.el~ module

I use ~magit~ as git client for Emacs. I think it is, along with ~org-mode~, the most impactful Emacs package I have ever used. There is nothing more to add. Besides ~magit~, I used ~git-email~, which is a simple package that allows to send e-mails with git patches directly in Emacs. Starting from Emacs 29, they introduced ~vc-prepare-patch~ natively, which basically covers the same features of ~git-email~ (see [[https://lists.sr.ht/~yoctocell/git-email-devel/%3Ccc4a1b8b-9a1d-46cf-9b04-466c85ebcd44%40riseup.net%3E]]). There is not much to configure in ~magit~, just some formatting configurations just for being compliant to the Linux kernel's coding (and patching) guidelines.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-git.el"
  (use-package magit
    :straight t
    :bind (("C-c x" . magit))
    :config
    (setf (alist-get 'unpushed magit-section-initial-visibility-alist) 'show)
    (setq magit-refresh-status-buffer t)
    (setq git-commit-fill-column 75))

  (provide 'mg-emacs-git)
#+end_src

** The ~mg-emacs-coding.el~ module
:PROPERTIES:
:ID:       603EA351-F695-447C-A2EB-AD7FB7C61E5E
:END:

In this module, I pull and enable several coding-related packages, regardless of their specific functionality: they could either allow to inspect code, execute diffs, move cursors around. I don't know whether I should further sub-categorize them, but for now it's better to stick with this solution. Some of these packages are crucial for my work with the Linux kernel (e.g., ~xcscope~, ~multiple-cursors~), and I use them extensively, while I use others very rarely (e.g., ~ztree~).

Having multiple cursors is a neat feature that changed the way I look and modify source code. I started to realize how many times we have common patterns that we repeatedly modify, wasting time and energy. Whenever you realize this fact, having multiple cursors and edit different parts of the text at the same time is a valuable feature that could hardly be ignored. The ~multiple-cursor~ package does the job wonderfully.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-coding.el"
  (use-package multiple-cursors
    :after (org)
    :straight t
    :bind (("C-c m >" . #'mc/mark-next-like-this)
  	 ("C-c m <" . #'mc/mark-previous-like-this)
  	 ("C-c m -" . #'mc/mark-next-like-this-word)
  	 ("C-c m e" . 'mc/mark-more-like-this-extended)
  	 ("C-c m s" . 'mc/mark-all-dwim)
  	 ("C-c m a" . mc/mark-all-like-this)
  	 ("C-c m r" . mc/mark-all-in-region)
  	 ("C-c m d" . mc/mark-all-like-this-dwim)
  	 ("C-c m w" . mc/mark-all-words-like-this))
    :custom
    (mc/always-run-for-all t)
    :init
    (require 'multiple-cursors)
    (define-key mc/keymap (kbd "<return>") nil)
    :config
    (multiple-cursors-mode 1))
#+end_src

The following packages, instead, are mostly for source code analysis and browsing. For sure, ~xcscope~ is the killer package here, and I use it every day multiple times. When it comes to inspecting *huge* codebases (e.g., the Linux kernel), having an efficient way to find definitions, function calling another function, patterns, etc. is fundamental. The ~xcscope~ package is just a ~cscope~ client for Emacs (to make ~cscope~ to work you typically have to build a ~cscope~ "database" - e.g., in the Linux kernel you simply type ~make cscope~).

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-coding.el"

  (use-package ztree
    :straight t)

  (use-package deadgrep
    :straight t
    :bind
    (("M-g r" . deadgrep)))

  (use-package xcscope
    :straight t
    :bind
    (("C-c s s" . cscope-find-this-symbol)
     ("C-c s d" . cscope-find-global-definition)
     ("C-c s c" . cscope-find-functions-calling-this-function)
     ("C-c s x" . cscope-set-initial-directory)
     ("C-c s f" . cscope-find-this-file))
    :config
    (cscope-setup))

  (use-package ediff
    :straight t
    :config
    (set 'ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

Although I do not use it just for coding (but for templates in general, even in org files), ~yasnippet~ is another great tool that I leverage upon.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-coding.el"
  (use-package yasnippet
    :straight t
    :init
    (defconst mg-snippets-dir ".snippets")
    :custom
    (yas-snippet-dirs (list (format "%s/%s" mg-emacs-root mg-snippets-dir)))
    :config
    (yas-global-mode 1))
#+end_src

I mostly write and review code for the [[https://kernel.org/][Linux kernel]]. I have a custom library with some useful functions I use on my daily work. They are not ground-breaking, rather they just speed-up some repeated operations.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-coding.el"
  (use-package mg-kernel
    :ensure nil
    :bind (("C-c u k v" . mg-get-kernel-version-from-source)))
#+end_src

The following piece of code introduces ~vterm~ as terminal emulator, with ~multi-vterm~ on top of it. I've been using ~vterm~ since the very beginning, and never felt the need to switch to any other terminal emulator (e.g., ~eshell~). The ~multi-vterm~ package, instead, allows to spawn multiple ~vterm~ buffer, that in conjunction with window splitting and multiple buffer basically creates a "terminal multiplexer" inside of Emacs.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-coding.el"
  (use-package vterm
    :straight t)

  (use-package multi-vterm
    :straight t
    :bind (("C-c v" . multi-vterm)))

  (provide 'mg-emacs-coding)
#+end_src

** The ~mg-emacs-ai.el~ module

Starting from [2024-10-15 Tue], I plan to use open-source LLMs to help in my research work. This includes summarizing text, spell-checking and rephrasing. Although some skepticism, I found that these tools can substantially help us with some tasks related to the writing process, either it is for research or note-taking. As far as Emacs is concerned, these tools can be deeply integrated in one's workflow and generally provide a smooth experience without the pain of using webapps or other bloated nonsense.

#+begin_src emacs-lisp :tangle "mg-emacs-modules/mg-emacs-ai.el"
  (use-package ellama
    :straight t
    :custom
    (ellama-keymap-prefix "C-c u a")
    (ellama-language "English")
    :config
    (require 'llm-ollama)
    (setq ellama-provider
  	(make-llm-ollama
  	 :chat-model "llama3.2:latest")))

  (provide 'mg-emacs-ai)
#+end_src

* The ~mg-custom-modules~ libraries
** The ~mg-utils.el~ library

#+begin_src emacs-lisp :tangle "mg-custom-modules/mg-utils.el" :mkdirp yes
  ;;; mg-utils.el --- Custom utility functions for Emacs Lisp coding -*- lexical-binding: t -*-

  ;; Copyright (C) 2024  Claudio Migliorelli

  ;; Author: Claudio Migliorelli <claudio.migliorelli@mail.polimi.it>
  ;; URL: https://crawlingaway/emacs/dot-emacs
  ;; Version: 0.0.1
  ;; Package-Requires: ((emacs "29.3"))

  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:
  ;; This library introduces some utility functions that I find useful when coding in Emacs Lisp.

  ;;; Code:

  (defconst mg-work-laptop-hostname "nano"
    "This constant keeps track of the hostname I have on my Linux work laptop.")

  (defconst mg-personal-laptop-hostname "think"
    "This constant keeps track of the hostname I have on my Linux personal laptop.")

  (defconst mg-pkm-base-directory "~/Vault/pkm"
    "This constant keeps track of the base directory for my entire knowledge base.")

  (defconst denote-directory (expand-file-name mg-pkm-base-directory)
    "This constant keeps track of the denote directory for my entire knowledge base.")

  (defconst mg-work-projects-file (format "%s/%s" denote-directory "20231210T220334--work-and-study-projects__project_work.org")
    "This constant keeps track of the work and project file within my knowledge base.")
  (defconst mg-inbox-file (format "%s/%s" denote-directory "20231211T145832--inbox__gtd_personal.org")
    "This constant keeps track of the inbox file within my knowledge base.")
  (defconst mg-agenda-file (format "%s/%s" denote-directory "20231210T224321--agenda__personal.org")
    "This constant keeps track of the agenda file within my knowledge base.")
  (defconst mg-archive-file (format "%s/%s" denote-directory ".archive/archive.org")
    "This constant keeps track of the archive file within my knowledge base.")
  (defconst mg-capture-notes-file (format "%s/%s" denote-directory "20231213T172757--capture-notes__gtd_personal.org")
    "This constant keeps track of the capture notes file within my knowledge base.")
  (defconst mg-conferences-file (format "%s/%s" denote-directory "20231210T222135--conferences__personal_research.org")
    "This constant keeps track of the conferences file within my knowledge base.")
  (defconst mg-personal-projects-file (format "%s/%s" denote-directory "20231210T220139--personal-projects__personal_project.org")
    "This constant keeps track of the personal projects file within my knowledge base.")
  (defconst mg-books-file (format "%s/%s" denote-directory "20240102T104309--books__personal_reading.org")
    "This constant keeps track of the books file within my knowledge base.")
  (defconst mg-planning-file (format "%s/%s" denote-directory "20240104T191508--planning__personal_planning.org")
    "This constant keeps track of the planning file within my knowledge base.")
  (defconst mg-flashcards-file (format "%s/%s" denote-directory "20240220T165813--flashcards__learning_personal.org")
    "This constant keeps track of the flashcards file within my knowledge base.")
  (defconst mg-reading-list-file (format "%s/%s" denote-directory "20241130T124328--references-reading-list__metanote_research.org")
    "This constant keeps track of the reading list file within my knowledge base.")
  (defconst mg-references-file (format "%s/%s" denote-directory "20241204T111546--references__main_metanote_research.org")
    "This constant keeps track of the references file within my knowledge base.")
  (defconst mg-bibliography-path "~/Vault/research/references.bib"
    "This constant keeps track of my references bibtex file.")
  (defconst mg-latex-cmds '("latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f")
    "This constant keeps track of the latex command I use to export from org-mode.")

  (defun mg-get-today-timestamp ()
    "Helper function to get today's timestamp with the abbreviated day name."
    (format-time-string "%Y-%m-%d %a"))

  (provide 'mg-utils)
  ;;; mg-utils.el ends here
#+end_src

** The ~mg-emacs.el~ library

#+begin_src emacs-lisp :tangle "mg-custom-modules/mg-emacs.el"
  ;;; mg-emacs.el --- Custom emacs functionalities -*- lexical-binding: t -*-

  ;; Copyright (C) 2024  Claudio Migliorelli

  ;; Author: Claudio Migliorelli <claudio.migliorelli@mail.polimi.it>
  ;; URL: https://crawlingaway.org/emacs/dot-emacs
  ;; Version: 0.0.1
  ;; Package-Requires: ((emacs "29.4"))

  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:
  ;; This library introduces some customizations within the Emacs text
  ;; editor. Its purpose its mainly to have some convenient
  ;; functionalities built on top of the Emacs base.

  ;;; Code:

  (require 'mg-utils)

  (defvar mg-screenshots-directory "~/.screenshots"
    "Directory for storing screenshots.

    This directory is used by the `mg-take-screenshot' function to
    store screenshots obtained with scrot.")

  (defconst mg-scrot-command "/usr/bin/scrot -s "
    "This is the \"scrot\" command to use to take a screenshot and save it.")

  (defun mg-insert-today-timestamp-formatted ()
    "Insert a timestamp of today at the current point.

    The timestamp is formatted around square brackets, which is the
    typical way I specify the date. The square bracketed date have a
    specific meaning in org-mode, but here we assume the date is
    inserted in a non-org file, or that it is not meaningful for
    agenda purposes."
    (interactive)
    (insert (format "[%s]" (mg-get-today-timestamp))))

  (defun mg-take-screenshot ()
    "Take a screenshot using \"scrot\".

    The file will be saved under the `mg-screenshots-directory'. Since
    screenshots are meant to be further categorized, a \"RENAME\"
    string is added before the \"png\" extension."
    (interactive)
    (let ((screenshot-name (format "%s/%s" mg-screenshots-directory (format-time-string "%Y-%m-%d-%H-%M_screenshot_RENAME.png"))))
      (shell-command (concat mg-scrot-command screenshot-name))))

  (defun mg-add-current-file-name-to-killring ()
    "Add the file name visited by the current buffer to the killring."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
  		      default-directory
  		    (buffer-file-name))))
      (when filename
        (kill-new filename)
        (message "Added file name '%s' to the killring." filename))))

  (defconst mg-get-battery-percentage-cmd "acpi -b | grep -E -o '[0-9][0-9][0-9]?%'"
    "This is a string representing a shell command to get the current battery percentage.")

  (defconst mg-get-battery-status-cmd "acpi -b | grep -Eo 'Charging|Not charging|Discharging' | head -n 1"
    "This is a string representing a shell command to get the current battery status.")

  (defconst mg-get-battery-remaining-time-cmd "acpi -b | grep -Eo '[0-9][0-9]:[0-9][0-9]:[0-9][0-9] %?'"
    "This is a string representing a shell command to get the current battery remaning time.")

  (defconst mg-get-cpu-temp-cmd "sensors | grep 'Package id 0:\\|Tdie' | grep ':[ ]*+[0-9]*.[0-9]*°C' -o | grep '+[0-9]*.[0-9]*°C' -o"
    "This is a string representing a shell command to get the current CPU temperature.")

  (defconst mg-get-cpu-usage-cmd "mpstat 1 1 | awk '/Average:/ {printf(\"%s\", $(NF-9))}'"
    "This is a string representing a shell command to get the current CPU usage.")

  (defconst mg-get-total-ram-cmd "free -h | awk '/^Mem:/ {print $2}'"
    "This is a string representing a shell command to get the current total RAM capacity.")

  (defconst mg-get-used-ram-cmd "free -h | awk '/^Mem:/ {print $3}'"
    "This is a string representing a shell command to get the current used RAM.")

  (defconst mg-get-disk-usage-cmd "df -h / | awk '/\\//{ printf(\"%4s/%s\", $4, $2) }'"
    "This is a string representing a shell command to get the current usage of disk.")

  (defconst mg-get-volume-percentage-cmd "amixer get Master | grep -oE '[0-9]{1,3}%' | head -n1"
    "This is a string representing a shell command to get the current volume level as percentage.")

  (defconst mg-get-keyboard-layout-cmd "setxkbmap -query | grep layout | sed -e 's/layout:\s*//' -e 's/\s*$//'"
    "This is a string representing a shell command to get the current keyboard layout.")

  (defconst mg-shutdown-system-cmd "/usr/sbin/shutdown now"
    "This is a string representing a shell command to shutdown the machine.")

  (defun mg--get-formatted-cpu-infos ()
    "Get all the battery-related information and format them."
    (format "%s @ %s"
  	  (string-trim (shell-command-to-string mg-get-cpu-usage-cmd))
  	  (string-trim (shell-command-to-string mg-get-cpu-temp-cmd))))

  (defun mg--get-formatted-battery-infos ()
    "Get all the battery-related information and format them."
    (format "%s (%s) : %s"
  	  (string-trim (shell-command-to-string mg-get-battery-percentage-cmd))
  	  (string-trim (shell-command-to-string mg-get-battery-status-cmd))
  	  (string-trim (shell-command-to-string mg-get-battery-remaining-time-cmd))))

  (defun mg--get-formatted-ram-infos ()
    "Get all the battery-related information and format them."
    (format "%s @ %s"
  	  (string-trim (shell-command-to-string mg-get-cpu-usage-cmd))
  	  (string-trim (shell-command-to-string mg-get-cpu-temp-cmd))))

  (defun mg--get-formatted-disk-infos ()
    "Get all the disk-related information and format them."
    (format "%s"
  	  (string-trim (shell-command-to-string mg-get-disk-usage-cmd))))

  (defun mg--get-formatted-volume-infos ()
    "Get all the volume-related information and format them."
    (format "%s"
  	  (string-trim (shell-command-to-string mg-get-volume-percentage-cmd))))

  (defun mg--get-formatted-keyboard-infos ()
    "Get all the keyboard-related information and format them."
    (format "%s"
  	  (string-trim (shell-command-to-string mg-get-keyboard-layout-cmd))))

  (defun mg-show-machine-info ()
    "Show the some system information for the current machine.

    This function basically substitutes a full-fledged system-tray with additional information such as remaning battery time, memory and disk usage, etc. It better works in conjuction with a simple modeline and EXWM, and makes no sense when Emacs runs in a complete DE."
    (interactive)
    (let* ((battery-info (mg--get-formatted-battery-infos))
  	 (cpu-info (mg--get-formatted-cpu-infos))
  	 (ram-info (mg--get-formatted-ram-infos))
  	 (disk-info (mg--get-formatted-disk-infos))
  	 (volume-info (mg--get-formatted-volume-infos))
  	 (keyboard-layout-info (mg--get-formatted-keyboard-infos)))
      (message "System-level info => BAT: %s - CPU: %s - MEM: %s - DSK: %s - VOL: %s - KBD: %s"
  	     battery-info cpu-info ram-info disk-info volume-info keyboard-layout-info)))

  (defun mg-shutdown-machine-with-confirmation ()
      "Ask for confirmation and shut down the system if confirmed."
    (when (yes-or-no-p "Are you sure you want to shut down the system? ")
      (shell-command mg-shutdown-system-cmd)))

  (provide 'mg-emacs)
  ;;; mg-emacs.el ends here
#+end_src

** The ~mg-exwm.el~ library

#+begin_src emacs-lisp :tangle "mg-custom-modules/mg-exwm.el"
  ;;; mg-exwm.el --- Utility functions for EXWM -*- lexical-binding: t -*-

  ;; Copyright (C) 2024  Claudio Migliorelli

  ;; Author: Claudio Migliorelli <claudio.migliorelli@mail.polimi.it>
  ;; URL: https://crawlingaway.com/emacs/dot-emacs
  ;; Version: 0.0.1
  ;; Package-Requires: ((emacs "29.4"))

  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:
  ;; This library includes some utility functions that I use when EXWM
  ;; is enabled.

  ;;; Code:

  (defconst mg-exwm--screenlayout-dir "~/.screenlayout"
    "Directory for screenlayouts to be used with randr.")

  (defconst mg-exwm--zurich-layout-script-name "zurich.sh"
    "Script to enable the layout for the workstation in Zurich.")

  (defconst mg-exwm--default-layout-script-name "default.sh"
    "Script to enable the default layout.")

  (defconst mg-exwm--workstation-layout-script-name "workstation_new.sh"
    "Script to enable the workstation layout.")

  (defconst mg-exwm--xrandr-think-name "eDP1"
    "Name assigned by xrandr to the screen of \"think\".")

  (defconst mg-exwm--xrandr-vertical-name "HDMI1"
    "Name of the vertical monitor of my workstation.")

  (defun mg-exwm--change-layout (script)
    "Change the current xrandr layout by executing SCRIPT."
    (start-process-shell-command "screenlayout" nil
  			       (format "%s/%s" mg-exwm--screenlayout-dir script)))

  (defun mg-exwm-trigger-default-layout ()
    "Trigger the default layout."
    (interactive)
    (mg-exwm--change-layout mg-exwm--default-layout-script-name))

  (defun mg-exwm-trigger-zurich-layout ()
    "Trigger layout for the workstation in Zurich."
    (interactive)
    (mg-exwm--change-layout mg-exwm--zurich-layout-script-name)
    ;; NOTE: The Zurich layout has two screens, therefore move
    ;; workspaces 2 and 5 to second screen
    (setq exwm-randr-workspace-monitor-plist `(2 ,mg-exwm--xrandr-think-name 5 ,mg-exwm--xrandr-think-name))
    (exwm-randr-refresh))

  (defun mg-exwm-trigger-workstation-layout ()
    "Trigger the workstation layout"
    (interactive)
    (mg-exwm--change-layout mg-exwm--workstation-layout-script-name)
    (setq exwm-randr-workspace-monitor-plist `(2 ,mg-exwm--xrandr-think-name 5 ,mg-exwm--xrandr-vertical-name))
    (exwm-randr-refresh))

  (provide 'mg-exwm)
  ;;; mg-exwm.el ends here
#+end_src

** The ~mg-defaults-extensions.el~ library

#+begin_src emacs-lisp :tangle "mg-custom-modules/mg-defaults-extensions.el"
  ;;; mg-emacs-default-extensions.el --- Sane extensions to the defaults for Emacs  -*- lexical-binding: t -*-

  ;; Copyright (C) 2024  Claudio Migliorelli

  ;; Author: Claudio Migliorelli <claudio.migliorelli@mail.polimi.it>
  ;; URL: https://crawlingaway.org/emacs/dot-emacs
  ;; Version: 0.0.1
  ;; Package-Requires: ((emacs "29.3"))

  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:
  ;; This source file introduces some extensions (e.g., minor/major
  ;; modes) to the ones I usually enable when using Emacs.

  ;;; Code:
  (define-minor-mode mg-line-numbers-highlight-line-mode
    "This minor mode shows line numbers in relative mode and
  highlights the current line. I use it extensively when in coding."
    :initial nil
    (if mg-line-numbers-highlight-line-mode
        (progn
  	(display-line-numbers-mode 1)
  	(hl-line-mode 1)
  	(setq display-line-numbers-type 'relative))
      (progn
        (display-line-numbers-mode 0)
        (hl-line-mode 0))))

  (provide 'mg-defaults-extensions)
  ;;; mg-defaults-extensions.el ends here
#+end_src

** The ~mg-modeline.el~ library

#+begin_src emacs-lisp :tangle "mg-custom-modules/mg-modeline.el"
  ;;; mg-modeline.el --- Custom modeline for the Emacs editor -*- lexical-binding: t -*-

  ;; Copyright (C) 2024  Claudio Migliorelli

  ;; Author: Claudio Migliorelli <claudio.migliorelli@mail.polimi.it>
  ;; URL: https://crawlingaway.org/emacs/dot-emacs
  ;; Version: 0.0.1
  ;; Package-Requires: ((emacs "29.4"))

  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:
  ;; This source file defines a custom modeline for the Emacs editor. It
  ;; has a cleaner structure compared to the original one, and
  ;; highlights buffer state (i.e., local vs. remote, saved vs. unsaved)
  ;; more clearly.

  ;;; Code:

  (defvar mg-modeline-buffer-status
    '(:eval
      (if (file-remote-p default-directory)
  	(propertize " @ "
  		    'mouse-face 'mode-line-highlight)
        (propertize " ^ "
  		  'mouse-face 'mode-line-highlight)))
    "This is the propertized variable containing the status of the
  current buffer. The status specifies whether this buffer is
  remote or local.")

  (defvar mg-modeline-buffer-name
    '(:eval
      (propertize (buffer-name) 'face 'mode-line-buffer-id))
    "This is the propertized variable containing the current buffer's
  name.")

  (defun mg-modeline--major-mode ()
    "This is a function used to get the current major mode for the
  opened buffer. The major mode is obtained by looking at the
  `major-mode' variable. In case we are under EXWM, the major mode
  haas also a `exwm--input-mode' further specification (i.e., Char
  or Line) that is also useful to specify in the modeline."
    (let* ((mode
  	  (mapconcat 'capitalize
  		     (butlast (split-string (symbol-name major-mode) "-")) " "))
  	 (mode-final
  	  (if (string-equal mode "Exwm")
  	      (concat "Exwm: "
  		      (mapconcat 'capitalize
  				 (butlast (split-string (symbol-name exwm--input-mode) "-"))))
  	    mode))
  	 (indicator (cond
  		     ((derived-mode-p 'text-mode) "§")
  		     ((derived-mode-p 'prog-mode) "λ")
  		     ((derived-mode-p 'comint-mode) ">_")
  		     (t "o"))))
      (format "%s (%s)" indicator mode-final)))

  (defvar mg-modeline-major-mode
    '(:eval
      (mg-modeline--major-mode))
    "This is the variable containing the major mode for the current
   buffer, as returned by the `mg-modeline--major-mode' function")

  (defvar mg-modeline-buffer-mode
    '(:eval
      (if buffer-read-only
  	"*L*"
        "*U*"))
    "This is the variable indicating whether the buffer is in
   read-only mode or not." )

  (setq mode-line-end-spaces
        '(""
  	mode-line-misc-info))

  (setq-default mode-line-format
  	      '("%e"
  		mg-modeline-buffer-status
  		mg-modeline-buffer-mode
  		" "
  		mg-modeline-buffer-name
  		" "
  		mode-line-position
  		"  "
  		(vc-mode vc-mode)
  		"  "
  		mg-modeline-major-mode
  		"  "
  		(:eval
  		 (when (mode-line-window-selected-p)
  		   mode-line-end-spaces))))

  (dolist (construct
  	 '(mg-modeline-major-mode
  	   mg-modeline-buffer-mode
  	   mg-modeline-buffer-status
  	   mg-modeline-buffer-name))
    (put construct 'risky-local-variable t))

  (provide 'mg-modeline)
  ;;; mg-modeline.el ends here
#+end_src

** The ~mg-macos.el~ library
:PROPERTIES:
:ID:       93f60f28-3019-4010-9012-f7897dc3b873
:END:

#+begin_src emacs-lisp :tangle "mg-custom-modules/mg-macos.el"
  ;;; mg-macos.el --- Enable macos support -*- lexical-binding: t -*-

  ;; Copyright (C) 2024  Claudio Migliorelli

  ;; Author: Claudio Migliorelli <claudio.migliorelli@mail.polimi.it>
  ;; URL: https://crawlingaway.org/emacs/dot-emacs
  ;; Version: 0.0.1
  ;; Package-Requires: ((emacs "29.3"))

  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:
  ;; This source file just enables some options to make Emacs smooth on
  ;; `darwin' as well. Nothing more.

  ;;; Code:

  (defun mg-macos-support-enable ()
    "This function simply turns some options on, for me to have a
   smooth experience with Emacs even on `darwin'."
    (progn
      (setenv "LANG" "en_US.UTF-8")
      (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
      (add-to-list 'default-frame-alist '(ns-appearance . dark))
      (setq ns-use-proxy-icon nil
  	  mac-option-modifier 'meta
  	  frame-title-format nil
  	  mac-frame-tabbing nil)))

  (provide 'mg-macos)
  ;;; mg-macos.el ends here
#+end_src

** The ~mg-org.el~ library

#+begin_src emacs-lisp :tangle "mg-custom-modules/mg-org.el"
  ;;; mg-org.el --- Org-mode custom extensions -*- lexical-binding: t -*-

  ;; Copyright (C) 2024  Claudio Migliorelli

  ;; Author: Claudio Migliorelli <claudio.migliorelli@mail.polimi.it>
  ;; URL: https://crawlingaway.org/emacs/dot-emacs
  ;; Version: 0.0.1
  ;; Package-Requires: ((emacs "29.3"))

  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:
  ;; This library introduces some custom Emacs Lisp code to extend
  ;; `org-mode', which is one of the Emacs packages that I use the most.

  ;;; Code:

  ;; Required for string-trim function
  (require 'subr-x)
  (defun mg-extract-heading-name (heading)
    "Extract the heading name, handling text before links, links, and task indicators."
    ;; Remove task progress indicators like [1/1] and trim trailing spaces
    (setq heading (string-trim (replace-regexp-in-string "\\[\\([0-9]+\\)/\\([0-9]+\\)\\]\\s-*" "" heading)))
    ;; Function to extract and concatenate text before the link and the link description
    (let ((start 0) (parts '()))
      (while (string-match "\\(.*?\\)\\(\\[\\[.*?\\]\\[\\(.*?\\)\\]\\]\\)" heading start)
        (push (match-string 1 heading) parts)  ; Text before the link
        (push (match-string 3 heading) parts)  ; Link description
        (setq start (match-end 0)))
      (push (substring heading start) parts)  ; Remaining text after last link
      (string-join (reverse parts) "")))

  (require 'mg-emacs-org)

  (defun mg-org-get-clock-minutes (file start-date end-date)
    "Get minutes from org-clock of a specific file and date."
    (interactive
     (list
      (read-file-name "Get clock data from FILE: ")
      (format "<%s>" (org-read-date))
      (format "<%s>" (org-read-date))))
    (let ((minutes (nth 1
  		      (with-current-buffer (find-file-noselect file)
  			(org-clock-get-table-data file `( :maxlevel 4
  							  :tstart ,start-date
  							  :tend ,end-date))))))
      minutes))

  (defun mg-org-get-tasks ()
    "Get active tasks from all `org-agenda-files'.

    This function returns a list of tasks taken from files belonging
    to the `org-agenda-files' list. NOTE: It needs to be tweaked and
    generalized to filter based on `org-todo-keywords'."
    (let ((tasks nil))
      (dolist (file org-agenda-files)
        (let* ((buffer-exists (get-file-buffer file))
    	     (buffer (or buffer-exists (find-file-noselect file))))
    	(with-current-buffer buffer
    	  (let ((task-list (save-excursion
    			     (org-agenda-get-todos))))
    	    (push task-list tasks)))
    	(unless buffer-exists
    	  (kill-buffer buffer))))
      (flatten-tree tasks)))

  (defun mg-org--task-prompt ()
    "Prompt the user for a task.

  The task can be selected from the list of tasks returned by
  `mg-org-get-tasks'."
    (completing-read "Select task: " (mg-org-get-tasks) nil :require-match))

  (defun mg-org-block-time ()
    "Prompt the user for time and task and block time.

  The user is continuously prompted with a date-time to select -
  the current day is supposed to be selected -, and it prompts the
  a list of pending org-agenda todo tasks. It creates and hidden
  file with the time-blocking and then it adds it to the
  `org-agenda-files'."
    (interactive)
    (let ((default-directory "/tmp/"))
      (with-current-buffer (find-file (format ".%s--timeblock.org" (format-time-string "%Y%m%dT%H%M%S")))
        ;; In case of one file, to avoid overwritting stuff:
        ;; (goto-char (point-max))
        (org-agenda-file-to-front)
        (catch 'no-time
    	(while t
    	  (let ((time (org-read-date)))
    	    (unless (string-match-p "[0-9-]\\{10\\} .*" time)
    	      (throw 'no-time time))
    	    (insert (format "* %s\n" (string-trim (mg-org--task-prompt))))
    	    (insert (format "SCHEDULED: <%s>\n\n" time))))))))


  (defvar my-org-export-functions
    '((html-buffer . org-html-export-as-html)
      (latex-buffer . org-latex-export-as-latex)))

  (defvar my-org-select-export-history nil)

  (defun my-org-select-export-function ()
    (let ((default (car my-org-select-export-history)))
      (intern
       (completing-read
        (format-prompt "Select export type" default)
        my-org-export-functions
        nil :require-match nil 'my-org-select-export-history
        default))))

  (defun my-org-export-get-function ()
    (alist-get
     (my-org-select-export-function)
     my-org-export-functions))

  (defun my-org-export-region-to-html (beg end export-fn)
    (interactive
     (list
      (region-beginning)
      (region-end)
      (my-org-export-get-function)))
    (unless (region-active-p)
      (user-error "No active region; aborting"))
    (let ((current-window (selected-window)))
      (unwind-protect
          (progn
            (narrow-to-region beg end)
            (funcall export-fn nil nil t t nil))
        (select-window current-window)
        (deactivate-mark)
        (widen))))

  (defun mg-org-capture-generate-flash-header ()
    "Generate the header to use in flaschards."
    (let ((link (mg-org--capture-get-last-file-link)))
      (format "%s @ %s" (mg-org--capture-get-last-file-link) (denote-get-identifier))))

  (defun mg-org--capture-get-last-file-link ()
    "In `org-capture' context, get last visited file's name and format as link."
    (let ((link (format "[[file:%s]]" (plist-get org-capture-plist :original-file))))
      link))

  (provide 'mg-org)
  ;;; mg-org.el ends here
#+end_src

** The ~mg-bib.el~ library
:PROPERTIES:
:ID:       FBDD1B14-1B4E-4905-ABBB-DA9131AF0644
:END:

#+begin_src emacs-lisp :tangle "mg-custom-modules/mg-bib.el"
  ;;; mg-bib.el --- Extensions for bibliographic packages -*- lexical-binding: t -*-

  ;; Copyright (C) 2024  Claudio Migliorelli

  ;; Author: Claudio Migliorelli <claudio.migliorelli@mail.polimi.it>
  ;; URL: https://crawlingaway.org/emacs/dot-emacs
  ;; Version: 0.0.1
  ;; Package-Requires: ((emacs "29.1"))

  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:
  ;; This library introduces some extensions for packages I use to
  ;; manage bibliography files.

  ;;; Code:

  (defun mg-bib-denote-org-capture-paper-biblio ()
    "Custom `org-capture` template to add a paper reference."
    (let* ((old-bibtex (mg-bib--denote-bibtex-prompt))
           (old-key (mg-bib--denote-bibtex-key old-bibtex))
           (key (mg-bib--reformat-bib-key old-bibtex))
           (title (mg-bib--denote-bibtex-field old-bibtex "title"))
           (bibtex (s-replace-regexp old-key key old-bibtex))
           (heading (format "* %s [cite:@%s]\n" title key)))
      (mg-bib--denote-pull-resource-for-entry key)
      (concat heading (mg-bib--denote-bibtex-org-block
                       (mg-bib--downcase-first-line-bibtex bibtex)))))

  (defun mg-bib-denote-org-capture-website-biblio ()
    "Custom `org-capture` template to add a website reference."
    (let* ((url (read-string "URL: "))
           (title (mg-bib--www-get-page-title url))
           (authors (read-string "Insert author(s) (name, surname + \"and\"): "))
           (date (org-read-date nil nil nil "Insert the article date: " nil nil nil))
           (old-bibtex 
  	  (format "@misc{%s,\nauthor = {%s},\ntitle = {%s},\nurl = {%s},\ndate = {%s},\nnote = {[Accessed %s]},\n}"
                               "0000"
                               authors
                               title
                               url
                               date
                               (format-time-string "%Y-%m-%d")))
           (key (mg-bib--reformat-bib-key old-bibtex))
           (bibtex (s-replace-regexp "0000" key old-bibtex))
           (heading (format "* %s [cite:@%s]\n" title key)))
      (concat heading (mg-bib--denote-bibtex-org-block bibtex))))


  (defun mg-bib--denote-bibtex-field (bibtex field)
    "Extract a specific FIELD (like 'title', 'year', 'author') from a BIBTEX entry."
    (when (string-match (format "\\s *%s\\s *=\\s *{\\(.*\\)}," field) bibtex)
      (match-string-no-properties 1 bibtex)))

  (defun mg-bib-search-add-to-reading-list ()
    "Search for a bibliography entry in the minibuffer, and add it to `mg-reading-list-file`."
    (interactive)
    (let ((key (citar-select-ref)))
      (with-current-buffer (find-file-noselect mg-reading-list-file)
        (goto-char (point-max))
        (beginning-of-line)
        (insert (format "* TODO %s [cite:@%s]\n"
                        (citar-get-value "title" key)
                        key)))))

  (defun mg-bib--denote-bibtex-author (bibtex)
    "Returns the author field from BIBTEX."
    (or (mg-bib--denote-bibtex-field bibtex "author") "Unknown Author"))

  (defun mg-bib--denote-bibtex-get-author-surname (authors)
    "Get the first author's surname starting from the string of authors AUTHORS."
    (let ((surname
           (if (string-match "\\," authors)
               (nth 0 (string-split authors))
             (nth 1 (string-split authors)))))
      (mg-bib--denote-reformat-entry surname)))

  (defun mg-bib--denote-reformat-entry (entry)
    "Reformat BibTeX entry ENTRY to later generate a key from it."
    (let ((case-fold-search t))
      (replace-regexp-in-string "[^a-z0-9]" "" (downcase (car (string-split entry))))))

  (defun mg-bib--reformat-bib-key (bibtex)
    "Reformat the bibtex key for entry BIBTEX."
    (let* ((title (mg-bib--denote-reformat-entry (mg-bib--denote-bibtex-field bibtex "title")))
           (author (mg-bib--denote-bibtex-get-author-surname (mg-bib--denote-bibtex-author bibtex)))
           (year (mg-bib--denote-bibtex-field bibtex "year"))
           (new-key (format "%s_%s_%s" author title year)))
      new-key))

  (defun mg-bib--denote-pull-resource-for-entry (key)
    "Prompt the user for file path of paper having key KEY, format the file name and move it in the `denote-directory`."
    (let* ((file-path (read-file-name "Select a PDF file: "))
           (file-exists (file-exists-p file-path))
           (is-pdf (string-match-p "\\.pdf$" file-path)))
      (unless file-exists
        (user-error "Error: File does not exist."))
      (unless is-pdf
        (user-error "Error: Selected file is not a PDF."))
      (let* ((keywords (denote-keywords-prompt))
             (identifier (denote-create-unique-file-identifier file-path))
             (new-file-name (format "%s--%s__%s"
                                    identifier key
                                    (mapconcat #'identity (delete-dups (copy-sequence keywords)) "_")))
             (new-file-path (format "%s/assets/%s.pdf" (denote-directory) new-file-name)))
        (rename-file file-path new-file-path))))

  (defun mg-bib--downcase-first-line-bibtex (bibtex)
    "Downcase the first line of BIBTEX."
    (let ((lines (split-string bibtex "\n")))
      (if lines
          (concat (downcase (car lines)) "\n" (mapconcat 'identity (cdr lines) "\n"))
        bibtex)))

  (defun mg-bib--denote-bibtex-org-block (bibtex)
    "Returns a string representing an org `bibtex` source block encompassing BIBTEX."
    (let* ((src (format "#+begin_src bibtex :tangle \"%s\"\n%s\n#+end_src" mg-bibliography-path bibtex))
           (entries ":PROPERTIES:\n:FILE:\n:NOTES:\n:END:\n"))
      (format "%s\n%s\n" entries src)))

  (defun mg-bib--denote-bibtex-prompt (&optional default-bibtex)
    "Ask the user for a bibtex entry. Returns the sanitised version."
    (let* ((def default-bibtex)
           (format (if (and def (not (string-empty-p def)))
                       (format "Bibtex [%s]: " def)
                     "Bibtex: "))
           (sanitised-bibtex (mg-bib--denote-bibtex-sanitise (read-string format nil nil def))))
      (if sanitised-bibtex
          sanitised-bibtex
        (user-error "Invalid BiBTeX entry provided to `mg-bib--denote-bibtex-prompt'"))))

  (defun mg-bib--denote-bibtex-sanitise (bibtex)
    "Returns a sanitised version of BIBTEX. Sanitisation entails removing all non-alphanumeric characters from the bibtex key."
    (when (string-match "@.*{\\(.*\\)," bibtex)
      (let* ((key (match-string-no-properties 1 bibtex))
             (sanitised-key (replace-regexp-in-string "[^A-Za-z0-9]" "" key)))
        (replace-regexp-in-string key sanitised-key bibtex))))

  (defun mg-bib--www-get-page-title (url)
    "Get the page title from URL."
    (let ((title))
      (with-current-buffer (url-retrieve-synchronously url)
        (goto-char (point-min))
        (re-search-forward "<title>\\([^<]*\\)</title>" nil t 1)
        (setq title (match-string 1)))
      title))

  ;;; mg-bib.el ends here
#+end_src

** The ~mg-notmuch.el~ library

#+begin_src emacs-lisp :tangle "mg-custom-modules/mg-notmuch.el"
  ;;; mg-notmuch.el --- Custom functions for `notmuch' -*- lexical-binding: t -*-

  ;; Copyright (C) 2024  Claudio Migliorelli

  ;; Author: Claudio Migliorelli <claudio.migliorelli@mail.polimi.it>
  ;; URL: https://crawlingaway.com/emacs/dot-emacs
  ;; Version: 0.0.1
  ;; Package-Requires: ((emacs "29.4"))

  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:
  ;; This library introduces a series of custom function I use for the
  ;; `notmuch' e-mail client for Emacs.

  ;;; Code:

  (defconst mg-notmuch--get-emails "mbsync -a"
    "Shell command used to get new emails.")

  (defconst mg-notmuch--reindex "notmuch new"
    "Shell command used to reindex notmuch.")

  (defconst mg-notmuch--update-shell-commands
    (list mg-notmuch--get-emails mg-notmuch--reindex
  	"Shell commands used to update the mail directory.
  NOTE: The order of these commands *matter*. Do not change it."))

  (defun mg-notmuch-update-mail ()
    "Update the mail directory."
    (interactive)
    (dolist (cmd mg-notmuch--update-shell-commands)
      (call-process-shell-command cmd nil 0)))

  (provide 'mg-notmuch)

  ;;; mg-notmuch.el ends here
#+end_src

** The ~mg-pkm-utils.el~ library

#+begin_src emacs-lisp :tangle "mg-custom-modules/mg-pkm-utils.el"
  ;;; mg-pkm-utils.el --- Utility functions for my pkm -*- lexical-binding: t -*-

  ;; Copyright (C) 2024  Claudio Migliorelli

  ;; Author: Claudio Migliorelli <claudio.migliorelli@mail.polimi.it>
  ;; URL: https://crawlingaway.org/emacs/dot-emacs
  ;; Version: 0.0.1
  ;; Package-Requires: ((emacs "29.4"))

  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:
  ;; This library introduces several utility functions and commands to
  ;; manage my "Personal Knowledge Management System". Although the
  ;; system heavily relies on `org-mode' and `denote', functions in this
  ;; library tackle general purpose use-cases (i.e., not necessarily
  ;; related to `org-mode' or `denote').

  ;;; Code:

  (require 'mg-org)

  (defun mg-org-compute-deep-work-minutes (start-date end-date)
    "Compute the minutes of deep work from START-DATE to END-DATE.

    This function searches into both projects and archive files to
    retrive logbooks properties and their related timing."
    (interactive
     (list
      (format "<%s>" (org-read-date))
      (format "<%s>" (org-read-date))))
    (let* ((default-directory (denote-directory))
  	 (target-files
  	  '(mg-work-projects-file
  	    mg-archive-file)))
      (insert (format "%s"
  		    (apply '+ (mapcar (lambda (file)
  					(mg-org-get-clock-minutes file start-date end-date)) target-files))))))

  (defun mg-toggle-pdf-presentation-mode ()
    "Toggle a presentation mode to show PDFs in a clean layout.

  When showing a PDF in docview, the modeline should be hidden, and the document itself should be centered, for better visibility."
    (interactive)
    (toggle-frame-fullscreen)
    (if (not (bound-and-true-p hide-mode-line-mode))
        (hide-mode-line-mode 1)
      (hide-mode-line-mode 0))
    (pdf-view-fit-page-to-window))

  (provide 'mg-pkm-utils)
  ;;; mg-pkm-utils.el ends here
#+end_src

** The ~mg-denote.el~ library
:PROPERTIES:
:ID:       cf17aa34-cd6c-4eea-be80-c111b00f5f3e
:END:

#+begin_src emacs-lisp :tangle "mg-custom-modules/mg-denote.el"
  ;;; mg-denote.el --- Custom code to extend denote -*- lexical-binding: t -*-

  ;; Copyright (C) 2024  Claudio Migliorelli

  ;; Author: Claudio Migliorelli <claudio.migliorelli@mail.polimi.it>
  ;; URL: https://crawlingaway.org/emacs/dot-emacs
  ;; Version: 0.0.1
  ;; Package-Requires: ((emacs "29.3"))

  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:
  ;; This library introduces some custom Emacs Lisp code to extend the
  ;; functionalities provided by `denote'. Along with `org', `denote' is
  ;; probably one of the packages that I use (and tweak) the most within
  ;; Emacs.

  ;;; Code:

  (defun mg-denote-copy-timestamp-to-killring ()
    "Helper function to get a convenient denote-style timestamp."
    (interactive)
    (kill-new (denote-get-identifier)))

  (defun mg-denote--get-item (filter-regex)
    "Get a file path interactively starting from the denote-directory."
    (let* ((candidates (denote-directory-files filter-regex))
  	 (file-name (completing-read
  		     "Choose FILE: "
  		     candidates))
  	 (file-path file-name))
      file-path))

  (defun mg-denote--get-file ()
    "Get a denote file interactively starting from the denote-directory"
    (mg-denote--get-item denote-id-regexp))

  (defun mg-denote-find-file ()
    "Find files interactively starting from the denote-directory."
    (interactive)
    (find-file (mg-denote--get-file)))

  (defun mg-denote--get-zettel ()
    "Get zettel interactively starting from the denote directory."
    (mg-denote--get-item denote-signature-regexp))

  (defun mg-denote-find-zettel ()
    "Find zettels interactively starting from the denote-directory."
    (interactive)
    (find-file (mg-denote--get-zettel)))

  (defun mg-insert-denote-or-normal-link (name)
    "Insert a denote link if the file specified by buffer-name is a denote item, otherwise a normal link."
    (if (denote-file-is-note-p (format "%s" name))
        (mg-denote--insert-link-from-file-path name)
      (format "[[file:%s]]" name)))

  (defun mg-denote--insert-link-from-file-path (file-path)
    "Insert a denote link provided a file path"
    (let ((file-description (denote--link-get-description file-path)))
      (denote-link file-path (denote-filetype-heuristics file-path) file-description)))

  (defun mg-denote-insert-zettel-link ()
    "Select a zettel from `denote-directory` and insert its link at current point."
    (interactive)
    (let ((file-path
  	 (mg-denote--get-zettel)))
      (mg-denote--insert-link-from-file-path file-path)))

  (defun mg-denote-grep-on-zettels ()
    "Grep for a search query, but only on zettels."
    (interactive)
    (let ((zettels
  	 (denote-directory-files denote-signature-regexp)))
      (consult-grep zettels)))

  (defun mg-denote-get-references-in-dired ()
      "Get the reference notes from the `denote-directory' listed in `dired'.
  Although this functionality is not only related to `denote', rather on 'dired', it's still relevant in this library: all notes I have are `denote' entries."
      (interactive)
      (dired (denote-directory))
      (revert-buffer)
      (dired-mark-files-regexp "_bib")
      (dired-toggle-marks)
      (dired-do-kill-lines)
      ;; NOTE: We don't want zettels to appear, this function just shows
      ;; reference entries
      (dired-mark-files-regexp denote-signature-regexp)
      (dired-do-kill-lines))

  ;;; mg-denote.el ends here
#+end_src

** The ~mg-kernel.el~ library

#+begin_src emacs-lisp :tangle "mg-custom-modules/mg-kernel.el"
  ;;; mg-kernel.el --- Utilities to use with the Linux kernel -*- lexical-binding: t -*-

  ;; Copyright (C) 2024  Claudio Migliorelli

  ;; Author: Claudio Migliorelli <claudio.migliorelli@mail.polimi.it>
  ;; URL: https://crawlingaway.com/emacs/dot-emacs
  ;; Version: 0.0.1
  ;; Package-Requires: ((emacs "29.4"))

  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:
  ;; This is a series of utility functions I use when working with the
  ;; Linux kernel. All of my activities lie into Emacs, and I really
  ;; enjoy writing Emacs Lisp code. Therefore, some of these function
  ;; could also be easily implemented as simple bash scripts. Writing
  ;; them in Lisp is merely a convenience for me working with Emacs
  ;; every day.

  ;;; Code:
  (defun mg-kernel-coding-style/c-lineup-arglist-tabs-only (ignored)
    "Line up argument lists by tabs, not spaces."
    (let* ((anchor (c-langelem-pos c-syntactic-element))
  	 (column (c-langelem-2nd-pos c-syntactic-element))
  	 (offset (- (1+ column) anchor))
  	 (steps (floor offset c-basic-offset)))
      (* (max steps 1)
         c-basic-offset)))

  (add-hook 'c-mode-common-hook
  	  (lambda ()
  	    (c-add-style "linux-kernel"
  			 '("linux" (c-offsets-alist
  				    (arglist-cont-nonempty
  				     c-lineup-gcc-asm-reg
  				     linux-kernel-coding-style/c-lineup-arglist-tabs-only))))))

  (defun mg-kernel-coding-style/setup ()
    (let ((filename (buffer-file-name)))
      ;; Enable kernel mode for the appropriate files
      (when (and buffer-file-name
                 ( or (string-match "linux" buffer-file-name)
                   (string-match "liburing" buffer-file-name)))
        ;; (string-match "xfstests" buffer-file-name)))
        (setq indent-tabs-mode t)
        (setq tab-width 8)
        (setq c-basic-offset 8)
        (c-set-style "linux"))))

  (add-hook 'c-mode-hook 'mg-kernel-coding-style/setup)

  (defun mg-get-kernel-version-from-source (source)
    "Return the kernel version from the source SOURCE.

  When interactive, prompt the user for a kernel source. NOTE: This
  function has a double check at the end, to be relatively sure
  that a proper kernel version is returned to the user. This makes
  sense because sometimes for a, e.g., mispell, the user provides a
  wrong directory as SOURCE. The check could've been performed
  better, but for now it just proved to work."
    (interactive
     (list
      (read-file-name "Kernel SOURCE: ")))
    (let* ((command (format "cd %s && make kernelversion" source))
  	 (kernel-version
  	  (shell-command-to-string command)))
      (if (string-match-p "\\<[0-9]+\\." kernel-version)
  	(message "Kernel version for specificed SOURCE is %s" kernel-version)
        (user-error "Can't identify a kernel version for the specified SOURCE %s" source))))

  ;;; mg-kernel.el ends here
#+end_src

* Footnotes

[fn:1] I don't know whether it is mandatory in this case, and I've never tried to disable it. It is more efficient to have it running as a single instance anyhow, so that's why I'm doing it.
